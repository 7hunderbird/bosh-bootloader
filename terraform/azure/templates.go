// Code generated by go-bindata.
// sources:
// templates/cf_dns.tf
// templates/cf_lb.tf
// templates/concourse_lb.tf
// templates/network.tf
// templates/network_security_group.tf
// templates/output.tf
// templates/resource_group.tf
// templates/storage.tf
// templates/tls.tf
// templates/vars.tf
// DO NOT EDIT!

package azure

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesCf_dnsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x93\xd1\x6a\xf3\x30\x0c\x85\xef\xfd\x14\xc2\xf4\xea\x87\x9a\xc2\x7f\xbd\x27\x29\x43\xa8\xb6\xda\x19\x12\xdb\xd8\x4e\x47\x1b\xfc\xee\xc3\x1e\x59\xdb\x64\xcb\xc6\xee\x96\x5b\x1d\x49\xe7\x7c\x91\x0d\x65\x02\x49\xd7\x21\x72\xec\x31\x0c\x87\xce\x6a\xb4\x41\x82\xd4\xc7\x6d\x77\x90\x30\x0a\x00\x47\x3d\xc3\xec\x7b\x02\xb9\x19\xcf\x14\x15\xbb\x33\x5a\x53\xb6\x4d\xbf\xb5\x41\x0a\x80\xc8\xc9\x0f\x51\x33\x9e\xa2\x1f\x02\xb6\xfe\xd6\x30\x2d\x7a\x14\xa8\x83\x4f\x2f\xaa\xaa\x4a\xed\x36\x1c\xd8\x99\x84\xde\xdd\xaf\xdb\x7f\xb8\xa4\x10\x3a\xab\x29\x5b\xef\xf0\x44\x99\x5f\xe9\xa2\xf4\x51\x3e\x8b\x22\xc4\x34\xf8\x96\xc9\xb8\x84\x57\xef\xb8\x45\xfa\x41\x9e\x74\x49\x99\x7b\x34\xbe\x27\xeb\xca\x6a\x9a\x2a\xff\xa4\x58\xa4\x10\x00\x99\x4e\xa9\x6d\x03\x60\x77\xb6\xd1\xbb\x9e\x5d\x5e\x70\xab\x0b\xca\xd7\xce\x09\x23\x6b\x1f\xcd\xf7\xee\xff\xd5\x49\x35\x28\xce\x04\x0f\xe0\x27\x1a\x4a\x1f\x6f\xc0\x7f\x11\x10\x20\xe7\x6e\xee\xa2\x36\xfd\xdf\xed\xde\x47\x56\xd7\x69\x56\xdd\xcb\xcd\x58\x2f\x4e\x2d\x0e\x4e\xb5\xf3\x51\x36\x20\x19\x13\x39\xa5\xb2\xf6\x3f\xef\xa8\xd4\xd3\x59\xe5\xd2\x04\x7f\x03\xcd\x92\x4a\x7b\x18\x73\x28\x6f\x01\x00\x00\xff\xff\x77\xec\x38\xa8\xb4\x03\x00\x00")

func templatesCf_dnsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_dnsTf,
		"templates/cf_dns.tf",
	)
}

func templatesCf_dnsTf() (*asset, error) {
	bytes, err := templatesCf_dnsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_dns.tf", size: 948, mode: os.FileMode(480), modTime: time.Unix(1526920141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x4b\x6f\xe3\xb6\x13\xbf\xeb\x53\x10\xc2\xff\xf0\x6f\xb1\x72\x9c\xc4\x28\x72\xd1\xa1\x45\x0f\xed\x79\x7b\x27\x28\x71\x64\x13\xa1\x49\x96\x0f\x67\xdd\x85\xbf\x7b\x41\x52\x52\x2c\x9a\xf2\x23\xc0\xee\x66\xd1\xcd\x2d\x9e\xf7\xcc\x6f\x86\x33\xda\x11\xcd\x48\xc3\x01\x95\x66\x6f\x2c\x6c\x31\x95\x5b\xc2\x44\x89\x3e\x1f\x8a\xe2\x95\xa8\xba\x4f\xb8\x05\x6d\x71\x43\x0c\xfc\xb2\xca\x91\x15\x31\xe6\x45\x6a\x1a\x69\x1a\x8c\x74\xba\x05\x54\x92\x7f\x9c\x06\xbd\xc5\xc6\x35\x02\x6c\x89\xca\xb6\xab\x8c\x37\x50\x20\x24\xc8\x16\x50\xfa\x57\xa3\xf2\x7f\x9f\x77\x44\x2f\x40\xec\x30\xa3\x87\x2a\x0a\x14\x08\x11\x4a\x35\x18\x83\x95\x86\x8e\x7d\x3a\x66\x6f\x19\xd5\xd1\xc0\xff\xbd\xa4\x00\xfb\x22\xf5\x33\xf6\x3f\x7f\x40\x4f\x1f\xd0\xfd\x4f\x07\xaf\x60\xf0\x0a\xaf\xb5\x74\x0a\x47\xf3\xa3\xbd\x0c\x35\x48\xed\x98\xb6\x8e\x70\x3c\x68\x0d\x62\x41\x6a\x88\x2d\xe1\x58\x34\xd2\x6c\x16\xbd\x7c\x36\x19\x83\x2a\x03\xad\xd3\xcc\xee\xa3\xc9\x90\x9c\xf9\xcc\x64\x12\xe3\xdd\xe3\xb2\x25\x96\x49\x91\x65\xd5\xb0\x66\x52\xcc\x06\x7f\x21\xf6\x02\x21\x4b\xd6\x26\x78\x84\x10\x88\x1d\xd3\x52\x6c\x41\xd8\x13\x5f\xbc\x81\xc3\x95\xb1\x6a\xc7\x21\xe2\x60\x63\xad\x3a\x83\x84\x33\x80\x08\x92\x05\x42\x4a\x33\xe9\x95\xe6\xe5\x1e\x96\xf7\x05\x42\x94\x69\x68\xd3\x0c\xbd\xea\xfe\x53\x34\xd2\x09\x1a\x00\xd6\xb6\x60\xcc\xac\x17\xbf\x72\x2e\x5f\xa2\x55\x69\x65\x2b\xf9\x0c\xdf\x5f\x6d\xf0\xad\xcf\xa8\x92\xda\x62\x4d\xc4\x1a\xa6\x5c\x3f\x7b\x1e\x0a\xc6\x32\x11\xea\x77\xc2\x58\xa3\xf2\x69\x79\xa4\x68\x0e\xfe\x27\x8a\x52\xc6\x81\x27\x0b\xff\x53\xc4\xe4\xbb\x20\x0f\xd9\x4c\x33\xe4\x19\x17\x6d\x77\x5b\x47\x4c\x51\x62\xde\x0e\x13\x73\x0d\x4e\x1e\xbe\x6f\x9c\xac\x56\x8f\x3f\x80\x52\x71\xb9\x7e\x1b\x4c\xbc\xe0\x15\x20\x79\xfc\xde\x41\xf2\xdf\x41\x89\x72\x0d\x67\x2d\x66\x97\xde\xd4\xf3\xb0\x68\x2a\xa6\xe6\x9e\xd8\x5c\xa8\x67\xdf\xda\xeb\x73\x33\x3a\x3f\xa6\x9e\xf0\xd1\x85\x1a\x95\x74\x2f\xc8\x96\xb5\x33\xa1\x13\xa5\x38\x8b\xcc\x78\x4d\x2c\xbc\x90\xfd\xad\x8b\x05\x51\xaa\x1a\x44\xdf\xb6\x39\x5c\xbb\x96\x78\x38\x3e\xbb\x7e\xc1\x18\x7d\xab\x51\xf9\xd1\x12\x41\x89\xa6\xf8\xe3\x96\x70\x5e\x06\xba\x65\xa0\x53\x7a\xa4\xb4\x44\x91\xd6\x77\x6e\x8d\x1e\xc2\x26\x12\xfb\xaa\x81\x54\xf3\xd4\x99\x0d\x10\x6e\x37\x55\xe0\x8c\x8a\x72\xcd\x58\xa3\xf2\x8f\x7e\xdd\x40\x48\x11\xbb\xc9\x68\xba\x8b\xd4\x8d\x34\x36\x43\x25\x8a\x2d\x62\xe0\x93\x2d\xfb\x10\x85\x98\xb0\xa0\x77\x24\xb1\xf9\xb8\xec\x63\xde\x82\x74\x16\x65\x89\x4e\xc4\x08\xf6\xd8\x6e\x34\x98\x8d\xe4\xd4\x13\x87\x0c\xf4\x25\xf4\x40\x6a\xa5\xe8\xd8\xda\xe9\x58\x92\x34\x29\x39\xf0\xf7\xc2\x15\x53\xd5\x44\x38\xfa\x1c\x97\x6d\xcc\xe8\x15\x8b\x30\xa3\x87\xbb\xc8\x6f\xee\x5e\x59\xe3\x2f\x8b\xb0\xdc\x2f\x46\xd4\x04\xbf\x3b\x2d\x85\x05\x41\xc3\x10\x3b\x76\xb6\x46\xe5\x40\xf3\xa4\xf1\x75\x47\x28\x70\xd6\x68\xb5\x7a\x7c\x8b\x92\x89\x8e\xa7\xe5\xad\x2a\xb8\x5c\xa7\x6e\x64\xfc\xb8\x58\x85\x73\x1d\xd9\x76\xd5\xa0\x68\xa6\x22\xa7\x43\x23\x2d\xce\xc8\xe1\x87\xe7\xb8\xb3\x17\x08\x35\xa4\x7d\xf6\x1e\x8e\x83\x5e\x4a\x9e\x84\x7b\xe2\x4d\x2f\x53\xf5\x32\x95\x97\x39\x51\xe8\x73\x8b\x0d\x58\xcb\xc4\x78\x45\xe4\xa7\xf0\x95\xe7\x54\xd5\x40\xb5\xb1\xc6\xf6\x5d\x2f\xe5\x33\x83\x70\x93\x52\x4c\xba\x8e\x89\x38\x02\xca\xdf\x99\xf1\x87\x29\x3d\x2a\x4a\xc6\xe2\xd3\x72\xb6\xe5\x93\xa6\xd7\xf0\xb7\x03\x63\xf1\xb4\x19\x6b\x74\x3f\x6a\x68\x00\xa7\x81\x65\xe6\x4b\x48\x8e\x31\x3c\xdc\xd2\xac\xf3\x53\xfa\x64\x42\xd5\xa8\x34\x86\x57\x9e\x23\x1a\xa7\xc4\x92\x29\x28\x92\x6b\xfc\x30\x4c\xa6\x78\x80\x4f\xf9\x86\x5f\x5f\xab\x1d\x8a\xc2\x99\xb1\x20\x40\x9f\x2d\xca\xcd\xd5\xf1\xaa\x2b\x6e\x6c\x0f\xc9\x59\xe8\xe3\x59\x58\x5d\x00\xf9\xa4\x23\x4f\x32\x7e\xa6\xb5\xcf\xec\x58\xd3\x62\x7f\x8d\x14\x99\x77\x96\x23\x73\x4b\x92\x7a\xe6\x04\xc5\xa9\x9d\x04\xc5\x5f\x3a\xab\x7e\x02\xbf\xa3\xa4\x1e\x3d\x08\x5f\x38\xa7\xc3\x64\xd2\xd2\xf9\x21\x1b\x8e\xa1\xcb\xa9\xbd\xa9\x9f\xc3\x7d\x15\xc7\xa0\xe3\x80\xed\x5e\xe5\xe7\xf7\x6f\xc4\xf8\x9d\xd4\xff\x37\xa9\x74\xe6\x30\xb8\x7d\x94\xe4\x9e\xa8\xf4\xfb\xdd\x15\xaf\xd3\xcc\xd3\x74\xd3\x27\xbd\xe3\x37\xe8\x2b\xd5\xc0\x7c\xc3\x22\x98\x1f\x55\x18\x06\xcc\xb7\x29\x42\x32\xdb\xde\x6d\x0d\x0e\x45\x21\x9d\x55\xce\xfa\x63\xd3\x5f\xa1\xc3\xf5\x19\x74\xc6\xeb\x73\x47\xb8\x4b\xd4\x67\xce\xd5\xe9\x71\x7f\xa4\x34\xfd\x5c\x3e\xa3\xf2\x8a\x4f\x06\xff\x06\x00\x00\xff\xff\x40\x23\xef\x96\xf8\x18\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 6392, mode: os.FileMode(480), modTime: time.Unix(1526920141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConcourse_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x3d\xaf\xd3\x30\x14\xdd\xf3\x2b\x2c\x8b\x09\x29\x51\xc5\xeb\x50\x86\x0e\x88\x89\x0d\x09\xf6\xc8\xb1\xdd\x3e\xab\xae\xaf\x75\x6d\xf7\x01\x4f\xfd\xef\xc8\x49\x9b\xa6\x89\x93\x7e\x3c\x09\x51\x41\xe7\x73\x8f\x7d\xcf\x47\x9a\xa0\x74\x10\x90\x4b\x42\xd9\xaf\x80\x12\xb7\xa5\x0d\x95\x56\xbc\x54\x96\x12\xca\xc1\x70\x08\xe8\x24\x25\xaf\x19\x21\x86\x6d\x25\x19\xfb\x2d\x09\x7d\xf7\xba\x63\x58\x48\xb3\x2b\x95\xd8\xe7\xed\x70\xae\x2b\x9a\x11\xa2\x81\x33\xaf\xc0\x4c\x4f\xa3\x5c\x2b\x30\xfb\x38\x70\xbc\x5b\xb9\x46\x08\xb6\x3c\x3f\xbd\x33\x30\x40\xd5\xd3\xed\x1e\x25\x13\x02\xa5\x73\x25\xd3\xed\x15\x96\x84\x3a\xcf\xbc\xe2\x11\xe9\x36\x61\x74\xab\x88\xfc\xe6\x99\x11\x0c\x05\xcd\x32\x42\x3c\x5b\xbb\x5a\x0c\x42\xa4\xd9\x29\x04\xb3\x95\xc6\x0f\xb6\x8f\xbc\xfb\x6c\x9f\x65\x43\x81\x75\x75\x9d\xb2\x17\x05\x4d\xe9\x73\x51\x96\x94\x0b\x29\xf1\x53\xa2\xf4\xb5\x58\x21\x18\x2f\x8d\x88\x22\x73\x30\x2b\xb5\x0e\xd8\x90\x37\x02\x25\xf3\x32\xb1\xd6\x91\x2f\x57\x36\x3f\xe3\xa3\x35\xdd\xd0\x51\x25\x1a\xba\x41\x76\x8b\x96\xb4\xb8\x64\x46\x89\x41\xcb\xae\x23\xf9\xb3\xf7\xd6\xdd\xe5\x4b\x33\x79\xbf\x35\x4c\x54\x4c\x33\xc3\x25\xc6\xd5\xda\xc3\x4e\x97\xed\xef\x35\x65\x42\xef\xd4\x1b\xe5\xb6\x08\x1e\x38\xe8\xf1\x5a\x7c\xff\xfc\x95\x76\xcf\xb7\x80\x3e\x05\x9c\xcf\x9f\x32\x42\x2a\xc6\x37\xe3\xa8\x03\xac\x83\x3b\x5a\x6c\x01\xf4\xc0\x67\x5d\x95\x29\xdc\xd0\x75\x8b\x50\xc9\xa3\x96\x7d\x0f\x3b\x6c\x35\xae\xe8\x19\xd9\x90\x8c\xc5\xa6\x1e\x79\xd4\xdc\xa4\xfd\x3d\x99\x9a\x72\xa9\xb1\xe8\xa6\x16\xdd\x2d\xc6\xff\x0e\x9d\x03\x17\xb3\x6b\x2a\xb4\x98\xfd\x5d\x0d\xba\xa7\x40\x0f\x11\x99\xfb\xea\xb3\x98\xa5\xb5\x30\xd2\xbf\x00\x6e\x4a\x27\x79\x40\xe5\x7f\xde\xda\xa5\x1b\x04\xb2\xa8\x20\x1e\x91\x1e\xff\x30\xfb\x98\x11\x22\x14\x4a\x3e\xf2\xa2\xb6\x24\xf4\x8b\xa9\x20\x18\x11\xd9\x18\xe7\xd2\xb9\xd1\xcb\x7c\xd2\x1a\x5e\x2e\xf5\x20\x8a\xc6\xeb\xbb\x1d\xdc\x89\xda\x95\xc8\xcc\x5a\x9e\xa3\xde\x47\x8c\x90\xce\x2b\xd3\x54\xb3\x0f\x5c\x12\xba\x98\x75\x88\xda\x5c\xa3\x5c\xa9\x1f\x13\x44\x7d\xe0\x11\x33\xf5\xfe\x79\x31\x55\x03\x53\xfb\x91\x1c\x75\xbf\x06\x16\x15\xb8\xe7\xe2\xc0\xf6\x86\xd4\x4c\xfc\x1f\x5d\x19\x1b\x77\x4d\x6e\x16\x8f\x9d\x9b\xf9\xfc\xe9\xdf\x09\xce\xc8\xa3\xff\xcd\x1f\x25\x07\xd2\xbc\x26\xfb\x83\x0f\xe3\x7d\x96\x41\xf0\x36\xf8\xce\x02\x71\xc9\xc8\xd9\x2c\xb2\x63\x3a\xc8\x09\x9a\x93\x5a\x49\x22\x65\x47\x69\x92\x1f\x1c\xed\xf7\x49\xcd\xf9\x3b\x00\x00\xff\xff\x53\x51\xbd\xbe\x62\x0f\x00\x00")

func templatesConcourse_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesConcourse_lbTf,
		"templates/concourse_lb.tf",
	)
}

func templatesConcourse_lbTf() (*asset, error) {
	bytes, err := templatesConcourse_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/concourse_lb.tf", size: 3938, mode: os.FileMode(480), modTime: time.Unix(1526920141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetworkTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x84\x91\xcd\x4a\xc4\x30\x10\xc7\xef\x79\x8a\x61\xf0\xa0\xb0\x5b\x3c\x7a\xf1\x49\x44\x42\x36\x19\xd7\x60\x9b\x94\xc9\x87\x62\xc9\xbb\x4b\x6c\x2b\xfd\xb0\x6c\xaf\xfd\x7f\xfd\x32\x4c\xc1\x27\xd6\x04\xa8\xbe\x13\x13\x77\x32\x5b\x8e\x49\xb5\xd2\x51\xfc\xf4\xfc\x81\x80\x17\x1f\xde\x11\x06\x01\xe0\x54\x47\xb0\xf9\x9e\x01\xef\x86\xac\xb8\x21\x97\xa5\x35\xe5\x5c\xe5\xe7\xec\x50\x00\x28\x63\x98\x42\x90\xa1\x57\x9a\xfe\xf4\x2f\x93\x61\x6a\x90\xda\x1a\x2e\xf8\x2a\x00\x5a\xaf\x55\xb4\xde\xfd\x9b\xcf\x74\xb5\xde\x95\x9a\x3b\xaf\x96\x57\xf6\xa9\x97\xbf\xb3\x16\xba\xdd\xcf\x82\xa2\x08\xb1\x67\x0d\xe9\xe2\x28\xde\x44\x3c\x60\x0c\x2b\xc6\x9e\xe9\xcd\x7e\x2d\x0d\x95\x6b\x6c\xb8\xdf\xe2\x9e\xe0\xe9\x04\x8f\x0f\x87\x30\x63\xc0\x3c\x73\xad\x68\x6a\x79\x33\x61\x01\x6c\xee\xb5\x78\x8c\x83\x8b\xae\xfc\x45\xfc\x04\x00\x00\xff\xff\x49\x8e\x26\xf9\x02\x02\x00\x00")

func templatesNetworkTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetworkTf,
		"templates/network.tf",
	)
}

func templatesNetworkTf() (*asset, error) {
	bytes, err := templatesNetworkTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network.tf", size: 514, mode: os.FileMode(480), modTime: time.Unix(1526920141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesNetwork_security_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x94\xc1\xee\xda\x30\x0c\x87\xef\x79\x0a\x2b\xda\xe9\x2f\x81\x58\xa1\xa8\x17\x0e\x3b\xee\xbe\x7b\x15\x12\xaf\x44\x2b\x71\xe5\xa4\xb0\x0d\xf5\xdd\xa7\xb4\xb0\x75\x50\x50\x57\x4d\x9a\x98\xe0\xca\xe7\x9f\xed\xf8\x53\x19\x3d\xd5\xac\x11\xa4\xfa\x5e\x33\xf2\x3e\x77\x18\x8e\xc4\x5f\x72\x8f\xba\x66\x1b\xbe\xe5\x05\x53\x5d\x49\x90\x5b\xf2\x3b\x09\x27\x01\xe0\xd4\x1e\xe1\xea\xb7\x01\xf9\xee\x74\x50\x3c\x47\x77\xc8\xad\x69\x66\x2d\x2e\x00\x4a\xd2\x2a\x58\x72\x83\x30\x63\x61\xc9\x35\x91\xbb\x4c\xd2\xf5\xcb\xdb\x1e\x3d\xee\xe6\xcf\x46\x0a\x01\x10\x54\xe1\xdb\x99\x00\xd0\x1d\x2c\x93\xdb\xa3\x0b\x37\xd3\xc4\x06\x8d\x68\x84\x18\xb1\x2f\xd7\x25\x4a\x90\xfe\xd1\xb6\x77\xb7\xf6\xdd\xd2\x15\x5b\x8a\x61\xc3\x35\xc9\x62\x21\x00\x8c\x65\xd4\xd7\x2f\xf3\x2b\xf7\xa3\xdb\x52\xed\x4c\x4c\x53\x5a\xa3\xf7\x77\x27\xf8\x50\x96\x74\xec\xba\x52\x20\x4d\xe5\x1d\xee\x93\xae\x22\x75\x7e\xc9\x8a\x38\xe4\xac\x5c\x81\xbf\x53\x6f\x91\x31\xe8\x83\x75\xed\xdd\x6e\xc0\x0d\xc8\x24\xe9\x05\x29\x63\x18\xbd\xcf\x2b\xc6\xcf\xf6\xeb\x83\xa0\x6b\xf0\xc2\x0c\x5d\x7e\xc0\x94\x21\x03\x00\x86\x75\xed\xe9\xf3\xd8\xeb\x79\xd4\x74\x7e\x4e\xfb\x23\x3f\x62\xe1\x4c\x15\xe8\xc2\x04\x4d\x7a\xc5\x23\x6c\x79\xff\xdc\xb6\xac\xb3\x75\xf6\xf2\xa5\x3d\x79\x77\x45\xe2\xa9\xca\xfc\xac\x1f\x61\x4d\xf2\xdc\xd6\x24\x69\x9a\xa6\x2f\x6d\x8c\xf3\x13\x64\x89\x55\x23\x14\x59\xfe\x0b\x45\xde\xfe\x92\x20\xe9\xf2\x65\x87\x66\x34\xbb\x7a\x3b\xc1\x90\x4b\xe5\x08\x4b\x56\xcf\xfd\x21\xc9\xb2\xd5\xea\x3f\x35\xe5\x47\x00\x00\x00\xff\xff\x5e\x41\xf1\x55\xbe\x0b\x00\x00")

func templatesNetwork_security_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesNetwork_security_groupTf,
		"templates/network_security_group.tf",
	)
}

func templatesNetwork_security_groupTf() (*asset, error) {
	bytes, err := templatesNetwork_security_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/network_security_group.tf", size: 3006, mode: os.FileMode(480), modTime: time.Unix(1526920141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesOutputTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x93\xd1\x6e\xdc\x20\x10\x45\xdf\xfd\x15\xc8\xea\x43\x23\x6d\x9d\x76\x25\x57\xd5\x4a\xfd\x96\x11\xb6\x27\x6b\x1a\x0c\x68\x18\x48\xd2\x68\xff\xbd\x72\xbc\x8e\x8c\x0b\x4d\x13\x1e\xe1\xce\xb9\x57\x33\x83\x0d\xec\x02\x8b\x3a\x1a\x64\x30\x72\xc2\x5a\x3c\x57\x42\x44\xa9\x03\x8a\x9f\xa2\xfe\xf4\x2c\x7f\x07\x42\x9a\x20\x2a\xe2\x20\x35\x18\xe4\x07\x4b\xf7\x4d\x67\xfd\xd8\xcc\x15\x97\xba\xba\x54\xd5\x0a\xf2\xa1\x7b\x13\xb5\x68\x4a\x04\x42\x6f\x03\xf5\x08\x67\xb2\xc1\xe5\x49\x51\x52\x93\xd1\xed\xa2\xb0\x25\x79\x46\x90\x7d\x6f\x83\x79\x2b\x53\x2a\x2e\x85\x1b\xf0\x4e\x06\xcd\xe0\xb1\x0f\xa4\xf8\x69\x31\x2f\x52\xaf\xcd\xda\xc9\x4b\x70\x7c\x64\x24\x23\x35\xa8\x32\xd1\x85\x4e\xab\x1e\xd4\x15\xa2\x1c\xc8\x61\x20\xf4\x7e\x97\x53\x11\xf6\x6c\x69\x7d\xdd\xf1\x46\x66\xe7\x4f\xb7\xb7\xff\xc3\x3d\x1d\xdb\xb6\x6d\x13\xba\x23\x15\x25\x23\xdc\xe3\xd3\x16\x3c\x9f\x97\xb0\xac\x3d\x6c\x34\x2f\x48\x88\x93\x6f\x36\x97\xe0\x70\xba\xd4\x95\x10\x1e\x8d\x57\xac\xe2\x1c\x8c\x29\x60\x62\xb4\xa4\x7a\xbf\xcf\x6b\x1d\x58\x87\xc6\xfb\xf1\x2f\xab\x3b\xa9\x7d\xe2\xf5\x2b\x4c\xae\xb3\x8f\x10\x48\x7f\xa0\xfb\xa7\xe3\x31\x69\xd1\x3a\xf9\x5e\x0d\x94\x5d\xdf\xad\xa0\x30\xbb\xcc\xc2\xce\xb6\x5f\x16\x00\x9a\x08\x6a\x48\x4b\x95\xb9\x6e\x50\xd1\x36\x51\x64\xbf\x6e\xb6\x74\xbe\x5c\xde\x3f\xef\xc3\x1f\xc4\x8f\x83\xf8\x7a\x53\x08\x72\x7e\xc8\xb2\x46\xeb\x17\x52\x92\xe7\x20\xbe\xed\x38\xeb\x50\xe0\x55\x97\xf9\x1b\xff\x02\xb6\x37\x85\xe6\x7e\x98\xf8\x7d\x21\xfe\x09\x00\x00\xff\xff\x4b\xb9\xe4\x5e\x3a\x05\x00\x00")

func templatesOutputTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesOutputTf,
		"templates/output.tf",
	)
}

func templatesOutputTf() (*asset, error) {
	bytes, err := templatesOutputTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/output.tf", size: 1338, mode: os.FileMode(480), modTime: time.Unix(1526920141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesResource_groupTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x90\x41\x6e\xc3\x20\x10\x45\xf7\x9c\xe2\x0b\x75\xdb\xde\xa0\x67\x41\x63\x3c\x72\x91\x6c\xc6\x1a\xc0\x8b\x5a\xdc\x3d\xb2\xa5\x38\x4e\x42\xb2\xc8\x2c\xd1\xfb\x5f\x8f\xaf\x9c\xa4\xa8\x67\x58\xfa\x2f\xca\x3a\xb9\xeb\x8b\x1b\x54\xca\x6c\x61\x3b\x49\x7f\x16\xab\x01\x22\x4d\x8c\xed\x7e\x61\xbf\xd6\x85\xf4\xe7\x1e\x76\x1b\x50\xad\x01\x46\xf1\x94\x83\xc4\x33\x39\x04\x89\xd5\x1a\x03\x64\x1a\xd2\x5e\x08\x70\x5c\x82\x4a\x9c\x38\xe6\x1b\xcb\x71\x71\xa1\xdf\x8b\xaa\xa9\xc6\x3c\x4b\xce\xa5\x1b\x83\x77\xe1\x85\x5f\xeb\x1e\xdb\xbf\xf7\xdc\xd9\xf5\x6d\xea\xf0\x07\x1a\x9f\x6e\x06\xda\xd3\x1c\xea\x8e\xfa\x5e\x39\x25\x47\xe3\x79\xae\x94\x29\x07\xff\xc9\x4e\x97\x00\x00\x00\xff\xff\xff\xc9\xc8\x79\xcc\x01\x00\x00")

func templatesResource_groupTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesResource_groupTf,
		"templates/resource_group.tf",
	)
}

func templatesResource_groupTf() (*asset, error) {
	bytes, err := templatesResource_groupTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/resource_group.tf", size: 460, mode: os.FileMode(480), modTime: time.Unix(1526920141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesStorageTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x92\xbd\x6e\xc3\x30\x0c\x84\x77\x3f\x05\x21\x64\xf6\xd4\x35\x73\xf7\x66\x2c\x0a\x81\x91\x19\x45\x80\x4c\x09\x94\x6c\x20\x0d\xfc\xee\x85\x64\xd7\xf9\x41\xdb\x14\x9d\xea\xcd\x16\xef\xbb\x3b\xca\x42\x29\x0c\x62\x08\x94\x20\x77\xa1\xd7\x29\x8b\x63\xab\x40\xa1\x31\x61\xe0\xac\xe0\xdc\x00\x78\x62\x9b\x8f\x00\x5b\x78\x6a\x00\x86\x18\x49\xa0\xbc\x1d\xd0\x27\x6a\x00\x52\x24\xe3\xd0\xaf\x5f\xa6\xa6\xb9\x90\xf1\x7d\x10\x92\x82\x0e\x82\x96\xf4\x4a\x56\xfb\x90\x8e\xb3\x01\x63\x4f\x70\xf7\x6c\x41\x6d\xce\x23\x4a\x9b\x5c\x1f\x3d\x69\xe2\x51\xbb\x6e\xda\x9c\x6f\xa2\xb6\x0b\xae\x15\x4a\x83\xcf\x93\x6a\x00\x3e\xbd\xb5\x95\x30\x44\x5d\xe1\x2b\xed\x8b\xc3\x49\x35\xa5\x64\x30\x98\x5d\xe0\xfb\x1c\xd7\x52\xeb\x02\x57\x8b\xc5\x55\x67\x57\x57\x71\x33\xbc\xcb\xc8\x1d\x4a\x77\x3d\x27\x14\xbd\x9b\xf9\x3a\x9f\x62\xcd\xf3\xfc\xb2\xab\xc6\x19\x6d\xaa\x5b\x00\x20\x1e\x9d\x04\xee\x89\xf3\xc5\x76\x29\x5e\x70\x53\x0d\xea\x0e\x64\x4e\xc6\xd3\x22\x72\x96\x83\x90\x36\x47\x64\x4b\x09\xb6\xf0\xaa\x4a\x2b\xf5\x56\x05\x3f\xde\x85\x09\x9c\xd1\x31\xc9\xc3\xdb\xa8\xcd\xea\xc8\xdf\x16\x0c\x70\x77\xff\xb3\x6a\x96\x7d\xf3\x8b\xb4\xc5\xaf\x5d\x01\x6b\xd8\x72\x4e\x29\xad\x8b\x8c\xe2\x46\xcc\xa4\x7e\xdf\x35\x65\xea\x0d\x79\xff\xa0\xef\x3a\xf6\xff\x3a\xef\x7d\xd8\x97\xc2\x1f\x01\x00\x00\xff\xff\xd2\x9d\x98\xc5\xc2\x03\x00\x00")

func templatesStorageTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesStorageTf,
		"templates/storage.tf",
	)
}

func templatesStorageTf() (*asset, error) {
	bytes, err := templatesStorageTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/storage.tf", size: 962, mode: os.FileMode(480), modTime: time.Unix(1526920141, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesTlsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x04\xc0\x41\x0a\x02\x31\x0c\x05\xd0\x7d\x4e\xf1\xc9\x09\x5c\x88\xe0\xa2\x0b\xaf\xa0\x07\x08\xad\x04\x5b\x6c\xa9\x24\xb1\x30\x0c\x73\xf7\x79\xa6\x3e\xff\xf6\x56\x70\x74\x97\x9f\xb5\x95\x43\xe5\xab\x1b\x83\xcb\xf4\x2a\x6b\x38\x63\x27\x20\xf7\xcf\xb4\x16\x75\x20\x81\x9f\xaf\x07\x13\x60\x9e\xa5\xb4\x70\x20\xe1\x7a\xb9\xdf\xe8\xa0\x33\x00\x00\xff\xff\x52\x4d\xac\xad\x51\x00\x00\x00")

func templatesTlsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesTlsTf,
		"templates/tls.tf",
	)
}

func templatesTlsTf() (*asset, error) {
	bytes, err := templatesTlsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/tls.tf", size: 81, mode: os.FileMode(480), modTime: time.Unix(1522868022, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x90\xc1\x6a\xc4\x20\x10\x40\xef\x7e\xc5\x20\x3d\xa7\xcd\xa5\xb7\x7e\x4b\x30\x3a\x2d\x43\xcd\x18\x46\x63\xa1\x21\xff\x5e\x12\xc1\xee\x8a\x2c\x9b\xdc\xe6\xbd\x07\xce\x64\x23\x64\x66\x8f\xa0\x91\xf3\x44\x4e\xc3\x7e\x28\xf5\x3f\x15\xfc\xa2\xc0\xed\x34\xd2\xb2\x7a\x9c\xfa\x49\xdc\xe6\x68\x85\xd6\x44\x81\x3b\x38\x21\x1b\x4e\x1d\x60\x3d\xe1\x23\x10\xd1\x0a\xa6\x16\x32\xa6\x9f\x20\xdf\x93\x25\x27\x1a\x76\x05\xe0\xf0\xd3\x6c\x3e\xc1\x07\xe8\xf1\x6d\xb8\xfe\xd7\xf1\x5d\xab\xbb\x8c\x38\xa1\xb0\xf1\xcf\x75\xab\x84\x4c\x0e\x05\xb4\xf9\xdd\x04\x65\x29\x45\xb3\xe9\x59\xbe\xec\xd9\xc8\xd0\x80\x43\x2b\x80\xba\x37\x94\xaf\xca\x15\x5c\x5a\xbd\x42\xab\x55\x70\xab\x95\x9b\x74\xb4\x02\x8e\xf3\xf5\x7f\x01\x00\x00\xff\xff\x59\x69\xa5\xda\xe3\x01\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 483, mode: os.FileMode(480), modTime: time.Unix(1522868022, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/cf_dns.tf": templatesCf_dnsTf,
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/concourse_lb.tf": templatesConcourse_lbTf,
	"templates/network.tf": templatesNetworkTf,
	"templates/network_security_group.tf": templatesNetwork_security_groupTf,
	"templates/output.tf": templatesOutputTf,
	"templates/resource_group.tf": templatesResource_groupTf,
	"templates/storage.tf": templatesStorageTf,
	"templates/tls.tf": templatesTlsTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"cf_dns.tf": &bintree{templatesCf_dnsTf, map[string]*bintree{}},
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"concourse_lb.tf": &bintree{templatesConcourse_lbTf, map[string]*bintree{}},
		"network.tf": &bintree{templatesNetworkTf, map[string]*bintree{}},
		"network_security_group.tf": &bintree{templatesNetwork_security_groupTf, map[string]*bintree{}},
		"output.tf": &bintree{templatesOutputTf, map[string]*bintree{}},
		"resource_group.tf": &bintree{templatesResource_groupTf, map[string]*bintree{}},
		"storage.tf": &bintree{templatesStorageTf, map[string]*bintree{}},
		"tls.tf": &bintree{templatesTlsTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

