// Code generated by go-bindata.
// sources:
// templates/base.tf
// templates/cf_dns.tf
// templates/cf_lb.tf
// templates/concourse_lb.tf
// templates/iam.tf
// templates/iso_segments.tf
// templates/lb_subnet.tf
// templates/ssl_certificate.tf
// templates/vpc.tf
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBaseTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x5b\x5f\x6f\xe3\xb8\x11\x7f\x3e\x7f\x0a\xc1\xb8\x87\xdd\x36\xf6\x5a\xfe\x9f\x03\xb6\xc0\xb5\x57\xa0\xd7\x87\x6b\xd1\xbb\xb7\x62\x21\x50\x14\x2d\xb3\x91\x44\x81\xa4\x9c\xcd\x06\xfe\xee\x05\xff\x49\xa2\x24\xda\x52\x62\xaf\x93\xdd\x87\xd8\xe4\xcc\x70\xe6\xc7\xe1\xcc\x50\x1a\x1f\x00\xc5\x20\x4c\x90\x37\xce\x00\x0f\x40\x8a\x83\x14\xe4\x63\xef\x79\xe4\x79\xfc\x29\x47\xde\x67\x6f\x2c\x06\x46\x23\xcf\x8b\xd0\x0e\x14\x09\xf7\x3e\xcb\x59\xcf\x03\xf9\x24\x23\x94\xef\x11\x60\x7c\xe2\x0b\x4a\x90\xe2\x89\x3f\x8b\x76\x70\xbb\xd9\x8c\xdb\x34\xf3\x92\x06\xf8\x21\x5c\x6e\x96\x25\x0d\x23\x05\xdf\x4f\x7c\xf1\xcd\xd0\x6c\x96\xd0\xdf\xae\xfd\xd0\xa6\xb1\xd7\x5a\xac\xc1\x6e\x3e\x5b\xad\x3a\x68\xaa\xb5\xd0\xbd\xbf\xf5\x37\x91\xa2\x81\x60\x02\x51\xc6\x29\x48\xe4\x6a\x86\x66\x1e\x2d\xd6\x60\xb3\x56\x34\xa8\xe8\xa2\xb9\x47\x21\xf2\xb7\x3b\xbf\xa4\x79\x44\x52\x95\xba\xce\x0b\xb0\x5d\xde\xef\x56\xd0\xa6\x99\x5b\x34\x73\xdf\x9f\xcf\x96\x4b\xad\x73\xc1\x26\xda\xa4\x3a\x4d\xb4\x84\x2b\xb4\x83\x73\x9b\xc6\x96\xb3\x9b\x6f\xc2\x15\xb8\xdf\x94\x34\x31\x39\x94\x3a\x69\x1a\xb8\xb8\x5f\xfb\x33\x50\xc9\xe9\xd0\x39\xdc\x6e\x76\xab\x45\xb4\xb5\x69\xec\xb5\xb6\xe1\x0e\xa2\xed\x4e\xca\x39\x8e\x8e\xa3\x51\xe5\x35\x00\x42\xc4\x58\xf0\x80\x9e\x6c\xa7\x61\x9c\xe2\x2c\x1e\xdb\xc4\x0c\x41\x8a\x78\x4f\x62\x8a\x62\x4c\xb2\x1e\x84\x21\x61\xfb\x00\x67\x21\x29\xb2\x28\x80\x38\xa2\x8a\xa7\x72\xd7\xf1\x6c\x2a\xff\x7f\x9a\x35\x38\xc1\x01\xe0\x04\x84\x38\xc1\xfc\x29\xf8\x46\x32\xc4\xec\xe5\x12\xcc\x78\x83\x05\x65\x87\x00\x47\x7d\x6c\xdd\x13\xca\x83\xde\xe4\x87\x1c\xd6\x74\x97\xa4\x0a\x7f\x43\x6d\x19\xe4\x1b\x8b\xfc\xb5\x94\x43\x11\x23\x05\x85\xc2\xa4\x47\x16\x20\x9c\x8f\xbd\xf1\xff\x8a\x34\x0f\xc9\x57\xf5\x4d\x01\x92\xa3\x2c\x62\x01\xc9\xbc\xcf\xde\x7f\x25\x25\xce\x38\xa2\x19\xe2\x41\x0c\x38\x7a\x04\x4f\x53\x1c\x8f\xbf\x8c\x3c\xef\x90\x43\xcf\x33\x2e\xc0\x69\x81\xec\x45\x78\xc2\x82\x9c\xe2\x03\xe0\x48\x6d\xa6\xda\x83\x43\xaa\xf1\x03\x49\x4c\x28\xe6\xfb\x54\xe8\xfa\x9f\xdf\x7f\x16\xda\x53\x06\x82\x10\x73\x26\x24\x2e\x67\xf7\xeb\xb6\xda\x0f\xe8\x29\xc8\x01\xa6\x2d\x71\x62\x22\x03\x29\x52\x80\xfc\xf8\x7c\x00\x74\xaa\x80\x3d\x06\x25\xe5\xc8\xf3\xf2\x22\x4c\x30\x14\x72\x14\x5d\x43\xcd\xa9\xa1\x9d\x56\x84\x01\xc9\x51\xc6\xd8\xfe\xd8\x01\x23\x43\xb0\xa0\xc2\x33\x62\x4a\x0a\x81\xa8\x88\x90\xcd\x41\xa1\x9f\xd6\xcd\x9c\x18\x4b\xc1\x49\x06\xf8\xc4\x30\x4d\x14\x93\xdc\x0b\x06\x29\xce\x39\x96\x9b\x31\xfe\xed\xe7\x3f\xc6\x0a\xf6\x00\x47\x35\x41\x09\x81\x20\x99\xaa\xe1\xa3\x0c\xc2\x1c\xc4\x4c\xc7\xdf\xdf\xc4\xb2\x3d\xd7\x3b\x0a\xde\x04\xef\x10\x7c\x82\x09\xd2\x02\x70\x9c\x11\x8a\x02\xb8\x07\x59\x8c\x98\x74\x0a\x61\x8a\xf4\x80\xe3\x39\x3c\x02\x5a\x24\x48\x83\xc2\x49\xe5\x49\x6a\x58\x2c\xd0\xa0\xc7\x91\x52\xb6\x2d\x6a\xda\x06\x76\x5a\xda\xab\x4f\x82\x86\x04\xc5\x14\x31\xb9\xd9\x3b\x4a\xd2\x20\x27\x94\xcb\x89\x99\x20\x25\xe6\xbb\x19\xc9\x29\xe1\x04\x92\x44\x33\x4f\x64\xf0\x16\xa7\x2c\x08\x13\x02\x1f\x94\xc9\x55\x70\xf8\x32\xc4\x66\x0c\xd3\xfc\xca\xc6\xe2\xac\xb4\xb6\x61\x89\x58\xbc\x0d\xc2\xc4\x6f\xa1\x20\x87\x2e\x64\x31\x87\x57\x35\xd8\xfa\xe7\xb6\xbe\x49\xc6\x61\x0b\x89\x06\x49\xd3\x37\x1a\xd3\xeb\xd5\x6a\xb1\x12\x06\x49\x10\x9a\xf6\x9f\xb0\x4b\xb9\x3c\x48\x3a\x8d\x1b\x80\x6b\x11\xbd\x45\x5c\x8b\xe8\x7d\xe0\x8a\x33\xc6\x41\x06\x35\x98\x0a\x43\x13\xf4\x71\xde\xb4\xea\xc7\x67\x71\x18\xf6\x84\xf1\x0f\x72\xe5\x22\xcc\x10\x57\x89\x41\x7f\xae\x0e\xcb\x9d\xb7\xf9\x78\x14\x18\x98\x25\x02\x1b\x56\xe1\x7c\xf3\x69\x8a\x22\x5c\xa4\x82\x4c\x09\x28\x03\xb8\xb5\xaa\x63\x31\x69\x52\x09\x51\x84\x18\x0f\xe0\x1e\xc1\x07\xc3\xb9\x03\x09\x43\x22\xa1\xa6\xd8\xb1\x9b\x22\x47\x90\x87\x22\xff\x20\x72\x40\xad\x84\xbf\xf3\xc4\x80\xaa\xa1\x94\x15\x22\x8b\xb4\x36\x41\x05\x84\x21\xee\xf5\xa5\x2b\x0b\x75\xa6\x21\x55\x51\xfe\x3d\x3b\xfc\xfa\x4b\x6b\x7e\xdc\x9d\x62\x54\xe5\x22\x56\x7e\x49\xd5\x62\xf6\xa9\x0e\xba\x19\x13\xe6\x18\xb8\x3b\xab\x9b\x9c\x92\x03\x8e\x10\x95\x8a\xe8\x32\xa6\xac\x6d\x2b\xfd\xab\x31\xb5\x73\x65\x45\x5b\x91\x54\x63\x92\x44\xed\x41\xb5\x5f\xd5\xbe\xa8\xb3\x7a\x40\x94\xe9\x32\xe0\x2f\x9f\x3d\x7f\xea\x6f\xa6\xb3\x0e\x3f\xd7\xd5\x5f\xbb\x2a\x71\x4d\x3c\x57\x05\x45\x57\x2d\x71\xbe\xdc\x71\x9c\xc3\x1e\x35\x8f\xe1\x3c\x5f\xf8\xfc\xaa\x29\x2f\x55\xfd\x9c\x58\xf9\x7a\x25\x90\x03\x28\x39\x2d\xb2\xe6\xd0\xc0\x7e\x32\x00\x76\x05\xf7\x73\x51\xfd\x54\x9a\x74\xc5\xf1\x5a\x00\x47\xc9\xae\xb9\x5e\xfb\x4e\xf0\x42\x78\x44\x9a\x79\x03\xf0\x38\xb3\xdd\x8d\xe1\x91\x85\xde\x1b\xc0\xa7\xab\xe0\x34\x93\xad\xb2\xd3\x9a\xa8\x17\x9f\x66\xe2\x45\x25\xe8\x49\x9c\x40\x92\x90\xc7\x32\x31\x7c\x0f\xc4\xd0\x69\xc0\xd4\x5d\x63\x88\x3f\xcd\xbe\x1b\x58\x8c\xed\x5d\x08\x55\x06\x5c\x06\xa8\x9e\x1e\x56\x91\xfd\xf1\xb7\x7f\x9f\x29\x3b\xe7\xf3\xd3\x75\xa7\x9c\x1f\x5c\x74\xea\xa7\x25\xbd\x8a\x77\xf3\x80\x62\x70\x5e\x14\x5c\xe7\x73\xe2\x5f\xff\xf5\xfb\x3f\xbc\x5f\x30\x45\x90\x13\x7a\xa9\xc4\xe8\x58\x7a\x50\x52\xbc\x13\xc5\x46\xa9\xea\xb0\x1c\xd9\x01\x58\x99\x1f\x5f\xe1\x90\x1d\x62\x2f\xe8\x8c\xe7\xef\x96\xb7\x77\xc6\x5e\x00\xcb\x49\x10\xa3\xcc\x19\x1a\xdf\x38\xce\xeb\xed\x7a\x7b\xe6\xba\xa9\x28\x6e\x8b\x75\x01\xc0\x3b\x05\x78\xbb\x5c\x2e\x4e\x03\xac\x29\x6e\x0b\x30\xa4\x28\xda\x17\xe1\x7b\x05\x79\xbb\x5c\x9e\x01\x59\x51\xdc\x3e\x62\x44\x3a\xff\x04\x20\xc7\xef\x14\xed\xf9\x6a\xb5\x5a\x9d\x09\xcf\x9a\xe4\xe6\x78\xbf\x53\x88\xdf\xc6\x23\xc0\xa1\x41\xda\x7d\xe5\xbc\x29\xdc\xef\xe5\x89\xeb\x40\xb8\x5f\x77\x35\x1b\x04\xf9\x9b\xbd\x96\x55\xaf\x63\x7b\xdc\x12\x34\xe5\xf9\x8b\xc2\x3f\xb5\xc8\x0b\x5d\x11\xdc\xeb\x7e\xb7\x5b\x82\x79\x67\x7d\xe2\x42\xd0\x2b\x22\x5f\xfe\x21\x99\xa3\xd0\xd7\x13\xdd\x0e\xa2\xe0\x6d\xb5\x27\x1c\xfb\x5f\xe3\x0d\x1e\x74\xf8\x53\xb2\x2b\xe3\xb1\x58\x6c\xef\x1d\x88\xe8\xa9\x6b\x63\x72\xf2\x3a\x73\x23\x54\x9c\xd7\x94\x72\xea\xda\xa8\x98\xba\xed\x8d\x01\xe3\xae\xc5\xaa\xb9\x6b\x43\xa3\x53\xc3\x15\x80\x79\x9b\x49\xc7\xca\xcc\xed\x14\xff\xca\xd2\xf3\xfa\x8f\x02\x6f\x57\x7e\x3a\x8b\x8e\x0b\x20\xfe\xf2\xea\xf3\xfa\x88\xdf\xae\x02\x1d\x80\xb8\x7c\x73\x5e\x16\x9c\xfa\xdb\xb3\x5d\x03\x75\x95\x40\xf5\x13\x55\xb5\x02\x28\x01\xf2\xed\xb9\x69\xc1\xbb\xf3\xb6\x77\xde\xec\xe3\xa0\x07\xab\x4a\x8d\xee\x52\x87\x92\x82\xa3\x80\x83\xb0\xf2\x0d\x6b\x68\xe8\x8b\x5a\xc9\xec\x94\x14\x21\xc6\x71\x06\x44\xed\x15\xd8\x06\xd7\xba\x20\x3d\x4f\xbf\x3a\x6f\x76\x2b\xd4\xde\x9b\xb7\xde\xb1\x1b\x47\xab\x2d\x59\x67\x2f\x59\x6b\xf3\xd3\xa6\x8e\x8e\x4d\xad\x8b\x04\x8c\x11\x88\xa5\x01\x63\x6f\xac\x66\x6a\x7b\x6d\x02\xb8\xdd\x6c\xd1\xa3\xc9\xa2\xa1\xf6\x6b\xd4\x2d\x7d\xb0\x3a\x92\x75\xdd\x20\x29\x32\xde\x86\x35\x41\x59\xcc\xf7\xd2\xd5\xda\x8d\xa7\x55\x8f\x86\xbd\x23\x67\x3d\xb9\x4e\xe7\x74\xe8\xe5\x9d\x52\x6a\x8a\xb3\x08\x7d\xfd\xb3\xaf\x56\x6b\x69\xa1\xa4\xa0\x04\xa5\x28\xe3\x0e\x45\x2d\x49\x7d\x0f\x49\xf5\x5a\x5e\x6a\xf7\xe3\x73\x4d\xc6\x71\xc8\x0d\xa3\x32\x5c\xdc\x33\x5a\xda\xb9\x6e\x1b\xf6\x11\x2c\x77\xed\x22\xc7\xd0\x2d\xad\xe7\x51\x2c\xdb\x8b\x3a\x76\xde\xd5\xc2\x32\xe4\x0c\x76\x29\xf8\xc2\x73\xd8\xcb\xdf\xfb\x3a\x7b\xd7\x11\x36\xbe\x57\x3b\xca\xcd\x35\xa7\x7f\x9a\xe2\xa8\xe5\x85\xfd\xce\xf7\x00\x28\x9a\x01\x50\xec\x74\xdc\xc7\x4b\xe4\x88\x3a\x0e\xe5\x43\xd4\xc6\x7d\x5f\xe6\x8c\x56\x3f\x54\xa9\x9c\xf0\x95\xd6\x8e\x9e\x6c\x55\xb3\xf9\xe3\xc7\xc6\x66\x94\x3d\x6f\x4a\x5b\x6b\xa1\x3b\x4f\x47\x03\x53\x26\x97\xb3\x38\xef\xc5\xbe\x52\xec\xa5\xad\x75\xfe\x1e\xec\xeb\x8f\x5d\xe8\x3f\xa4\xfa\x37\x05\xe3\xf2\x93\x00\x14\x65\x72\x7b\x1f\xd0\x53\x40\x09\x07\xfa\x41\x88\xe9\xb6\x20\x05\xcf\x0b\x5e\x75\x44\x99\xbe\x71\xbd\x6b\x20\x29\x50\x85\xa7\xe9\x36\xaf\xba\xc2\x0d\xb9\xd2\xc7\x08\xb3\xfa\xdc\x2b\x39\x25\xb6\xee\x26\xf3\x6a\x30\xc8\x51\xaa\xdb\xc5\x32\x86\x39\x3e\xa0\x0e\xad\xd1\xd7\x12\xb7\x4e\x85\x11\x2e\x2f\x23\xf2\xb3\x6e\x62\xc7\xb9\xad\xaf\x21\x29\x68\x32\x50\xcc\x4f\xf3\xb9\x25\xa9\x7a\x05\x10\x45\xd5\xcd\xa9\x14\xb7\xe7\x3c\x67\x3f\x7d\xfa\x74\x5e\xac\xb8\xdf\x59\x92\xad\x06\xbf\x0e\xfd\xf4\xbc\xcb\xc4\x93\x8d\x69\x0d\x71\x03\x9f\x74\x9a\x25\x9c\xef\xf7\x4f\x8b\x3f\x55\xc6\x36\x37\x68\xb8\xf4\xe6\x4b\x87\xa6\x44\x47\x8f\x60\x63\xe3\x1c\xed\x9e\x75\xe1\x5f\x3a\xdd\xe0\x55\xe2\x5d\xc8\x58\x4b\x95\x19\xa1\x1b\x0d\x47\x69\x57\x13\x00\xbe\xf5\xe5\x6c\x25\x25\x5b\x90\x0a\xe8\x2d\x61\xed\x68\x6f\x18\xea\xbf\x56\xaa\x31\x58\xcd\x9e\x35\x72\x1d\xd5\x02\x40\xdb\x3c\xb5\xf8\x37\x35\x7f\x01\xcd\x1c\x67\x00\x7c\x0b\x4a\xd8\x82\x14\xe4\x39\xce\xe2\x96\xc8\xd1\x0f\x9e\xf7\x0d\xe7\x29\xc8\x3f\xd8\x90\x74\x24\xd7\x0e\x64\xee\xbc\xb3\x5c\x02\x8f\x8f\xa3\x1f\xce\x2a\x29\x73\xd6\xed\xd4\xac\xa7\xcc\x96\xba\x56\xba\x76\xec\xbd\x45\xe3\xb0\xb6\xfa\x1d\x57\x8b\xdd\xa2\x71\xb0\xc7\x8f\xe7\x98\xe3\x47\x47\x00\xa8\xe5\x5e\x87\x8c\x8e\x2c\xef\x00\xa1\x87\xb0\xae\x9c\x2f\xa5\xfd\x3f\x00\x00\xff\xff\xa9\xc0\x2f\x5e\x56\x3a\x00\x00")

func templatesBaseTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesBaseTf,
		"templates/base.tf",
	)
}

func templatesBaseTf() (*asset, error) {
	bytes, err := templatesBaseTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base.tf", size: 14934, mode: os.FileMode(480), modTime: time.Unix(1542759042, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_dnsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x41\x6b\xe3\x3e\x10\xc5\xef\xfe\x14\x83\xe8\x21\x29\xa9\x49\x29\xff\x4b\xa1\xfc\x29\xcb\x1e\xb7\x97\xdd\xdb\xb2\x18\x45\x9a\x24\x2a\x8a\x24\x34\x63\xb7\xdd\xe2\xef\xbe\xc8\x72\x53\xa7\x4d\x76\xed\x42\x73\x4a\xa4\xd1\x9b\xdf\x53\xde\xd8\x8d\x8c\x46\xae\x2c\x82\xa0\x27\x62\xdc\x55\xda\xef\xa4\x71\x02\x9e\x0b\x00\x7e\x0a\x08\x37\x20\x88\xa3\x71\x1b\x51\xb4\x45\xf1\x5a\x1f\x64\x44\xc7\xd5\x6f\xef\x70\x50\xdd\x7f\x06\x87\x00\x34\xae\x65\x6d\xf9\x65\x23\x2f\x91\x8a\x26\xb0\xf1\x2e\x2d\xfd\xd8\x22\x38\xb9\x43\xf0\x6b\xe0\x2d\x42\xd6\x86\xa4\x0d\x6b\x1f\xf3\x5a\xf4\x8d\xd1\xa8\x21\x83\x42\x06\x05\xb3\x06\xc3\x80\x8f\x86\x98\xca\x0e\x51\x4b\x96\x20\xe4\x03\x55\xd1\xd7\x8c\xff\x5d\xf5\x8c\x3d\x71\x86\x55\xbe\x76\x9c\x5a\x9f\x3d\x37\x32\x96\x03\x33\x70\x93\x18\xe1\x7f\x58\xc2\x35\x5c\xb6\xa2\x28\x20\xb3\x1d\x2b\x6e\xbb\x8e\xbe\xe6\x50\x33\x08\x74\x4d\xa5\x1d\x75\x3b\x55\x3a\x53\x11\xc6\x06\x23\xe5\x9e\x8d\xb4\x75\x92\xf9\x29\xce\x9e\x29\x58\xc3\x33\xb1\x10\x0b\xb0\x5e\x49\x5b\x0e\xcb\xe7\xad\xf8\x95\x74\xbb\x1d\xea\xce\x76\x92\x46\xef\x6f\xf7\x34\x36\x5a\xdc\xa1\xe3\x99\xf2\x4e\x49\x9e\xbd\xbd\x87\x72\x08\x59\x9e\x97\xbd\xf0\x02\xac\x21\x9e\x09\x31\x9f\x2f\x60\x39\x87\xeb\xb7\x3a\xe9\x56\xcb\x77\x62\x19\xe0\xa4\x4c\x2b\xfa\xcb\x7b\x71\xf6\x77\xf4\x7b\x6f\x5c\xbe\x93\xb5\x95\xcc\xe8\xc6\x9a\x18\xb6\xe8\x11\xf6\x1c\xf3\x79\x72\x73\x5a\xfb\xb8\xb1\x69\x0d\x72\x0c\x22\x92\xaf\xa3\xc2\xa3\xe1\x1b\x0a\x8e\x8e\xe0\x25\x5c\xc3\xf2\x58\x04\x0f\x86\x35\x17\xb0\xdc\xe4\xa8\x00\xdc\x1d\xd4\xa6\xce\x46\xb7\x17\x5b\x4f\x8c\xfa\xa2\x03\x28\x00\xda\xd3\xc8\x11\x95\x8f\x5a\x80\xd0\x8e\x3e\xc2\xfa\x12\xd6\xae\x3e\xc7\xbb\x5f\xda\x07\xe2\x20\xc6\x6f\xdd\xbc\x3e\x4b\x6e\x40\xdc\x7d\xef\x16\xd8\xf6\xd1\xbf\x5a\x2e\x53\x8f\xcc\x48\xfd\x38\xbd\x9f\xa1\x7e\x84\xfe\x61\xf0\xc1\x58\xad\x64\xd4\xd5\xde\xe9\x78\xf6\xf3\x72\x04\xfd\x97\xbb\xdb\x6f\x5f\x47\x18\x48\x74\x76\x55\xaa\x75\x66\x8c\x65\xca\x4a\x6a\x36\xce\x07\xd1\x76\x2a\x3e\xd1\xf6\x73\x0c\x24\xe1\x69\xf4\x2b\x3f\x1d\x3f\x9d\x19\xc3\x7f\x3b\x92\x1d\x4d\x28\xef\xeb\x5d\x58\xf9\xc7\xee\x7b\xa8\x57\xd6\xa8\xca\x84\x71\x16\x58\x85\xa9\x0e\x58\x85\xcf\xf9\x03\x58\x85\x8f\xa5\xc8\x90\x3f\x3a\xee\x86\xbc\x95\xe9\x5d\x5d\x11\x6e\xd2\x4b\x81\xa6\xce\xf9\x79\xd2\xb8\x20\xdc\x7c\x82\x63\x43\xbe\xb7\x9b\x7e\x1d\x3a\xfe\x13\x00\x00\xff\xff\x3d\xa9\x5a\x27\xdf\x08\x00\x00")

func templatesCf_dnsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_dnsTf,
		"templates/cf_dns.tf",
	)
}

func templatesCf_dnsTf() (*asset, error) {
	bytes, err := templatesCf_dnsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_dns.tf", size: 2271, mode: os.FileMode(480), modTime: time.Unix(1542740543, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\x4b\x6f\xdc\x36\x10\xbe\xeb\x57\x10\x6a\x0e\x6d\x1a\xa9\x9b\xf5\x1e\x7c\xd9\x93\x81\xa2\xbd\x14\x41\x93\x9b\x11\x10\x14\xc5\xd5\x0a\xa6\x49\x81\xa4\xec\xba\x86\xfe\x7b\x40\x52\x0f\xea\x41\x49\xbb\xb1\x93\x05\x2c\x5f\x0c\x72\x9e\xdf\xcc\x70\xbe\xfd\x05\xdc\xfc\x09\x3e\x7f\xfe\x2b\x10\x44\xf2\x52\x60\x02\x42\xf4\x28\xa1\x24\xb8\x14\xb9\x7a\x82\x99\xe0\x65\x11\x82\x10\x1f\xa0\x94\xc7\x10\x3c\x07\x00\x30\x74\x4f\x40\xfd\xed\x41\xf8\xee\xf9\x01\x89\x98\xb0\x07\x98\xa7\x55\x84\x0f\x91\x94\xc7\x88\x26\x51\xce\x14\x11\x0c\xd1\xa8\x31\x16\x59\x63\x01\x00\x29\x91\x58\xe4\x85\xca\x39\xd3\x16\x6c\x08\xe0\xef\x5a\x41\x4b\x3c\x14\x18\xe6\xa9\xe3\x83\x72\x8c\x68\x6c\x8f\xab\x30\x08\x00\xc8\x59\x26\x88\x94\x26\x24\x00\x70\x9e\x0a\x98\x50\x8e\xef\x24\xd8\x83\xdb\x70\x13\x9b\xbf\x3f\x36\xe1\x57\x73\x5f\x08\xae\x38\xe6\xb4\x36\xa8\xb0\x09\x04\x80\x83\xe0\xf7\xb0\xe0\x42\x99\xf3\xed\x76\xbb\x35\xc7\x8a\x37\x87\xce\x71\xa5\xdd\x12\xd7\x6b\x5f\x7b\x33\xa1\xba\x99\xf2\x1e\x7d\x0c\x57\x04\x6d\xdc\x29\x94\x35\xce\xfe\xd1\xb8\x9f\x07\xb8\x31\x45\xf3\x03\xc1\x4f\x98\x92\xda\x5e\x9e\x31\x2e\x08\xc4\x47\xc4\x32\x62\x03\xd0\xa5\xad\x7d\x57\x41\xc0\x4b\x55\x94\xaa\x29\xfe\xa8\x29\xb4\x95\x07\x44\xcb\x3a\xa8\x71\xdf\xc4\x56\x31\x36\x15\xab\x82\x41\x8f\xd1\x64\xa6\xaf\x26\xbf\x36\x77\x79\xe4\x42\xc1\x11\x02\x3a\x53\xca\x51\x0a\x13\x44\x11\xc3\x44\x40\xf5\x54\x0c\x4d\xee\x41\xc8\x88\x7a\xe4\xe2\x4e\x8b\x13\x86\x12\x4a\x20\x16\x5c\x4a\xf8\x3f\x67\x04\x3a\x06\x72\x96\x81\x3d\x50\xa2\x24\xa6\xdd\x2c\xba\x33\xd1\x1d\x10\x95\x5a\x54\x96\x09\x23\x4a\xce\x25\x72\xdb\x00\x66\x44\x63\x9a\xd4\xff\xc9\xf8\xbd\x81\xeb\xeb\x14\x5e\x90\xe6\x52\x11\x46\xc4\x00\xb8\x7e\xce\x48\xb0\xae\x20\x34\x69\x8a\x80\x04\xab\x74\xc6\x6d\x6f\x3a\xd1\xd4\xfd\xed\x76\x69\x0b\xd6\x97\x9b\x4f\x66\xdc\x52\x72\x40\x25\x55\x10\x61\x33\xb6\xb6\x85\x46\xf8\xee\x41\x78\xe0\xe2\x11\x89\xd4\x76\xb8\x42\x22\x23\xca\xb6\xc3\x30\x32\xe8\x5e\x0e\xc3\xac\x26\x01\x70\x35\x7c\xdd\xb3\xa6\x4b\xc6\xb3\xdd\xe6\xde\xa4\xec\xbc\x41\x9e\x07\xe8\x48\x10\x55\x47\x88\x8f\x04\xdf\xd5\x78\x8c\x11\x04\x8e\xc1\xa9\xa1\xa2\x09\x34\x43\x37\x35\x4d\x5d\xf1\xb4\x88\x9d\xa1\xb1\x7a\x29\xe8\x82\x76\xca\x24\xf4\x5a\xe8\x55\x48\x4b\xc9\xbe\xb5\xdb\xf9\x7a\x59\xbb\xa6\x5d\xcd\x2e\xf9\x97\x97\x8a\x88\x61\xe9\xa6\xf6\x89\x30\x92\xeb\x56\x8a\x95\x3d\x79\xab\xd8\x60\x2e\x61\xb1\x5c\x4f\xed\x06\x73\x58\xbd\x96\xcb\xdd\xee\x6a\xc2\xa7\x3d\x7d\x45\xa7\x1e\xaf\x9d\xdb\x0b\x5c\xa0\xab\xda\xeb\xbb\x77\xa8\xf5\x72\xde\x1a\xb5\xba\x0b\x9b\xd4\x37\x51\x9e\x1d\xe4\x7b\x26\x5b\x34\xde\xd8\x3e\xad\xeb\x73\xbd\x59\xb9\x55\xeb\x9a\xcc\x2d\x56\x33\xe1\x3f\x7b\xad\xb6\x79\x2d\x2c\xd7\x49\x34\x76\xbb\xab\x97\x83\xc3\xbe\x02\x17\x82\xc7\x6e\x77\x75\x1e\x20\x2f\x8b\xc8\x65\x41\xb2\x88\xc9\x98\x81\x0d\xc6\x66\x89\x87\x59\x71\x95\x45\xd7\x9b\x01\x13\xeb\x0f\xcb\xcb\xf0\xb0\x01\xf9\x5a\x9f\x4e\x5b\xe5\xd5\xf9\x68\x8d\x7e\x42\x83\xda\xfe\xf4\x8c\xce\x48\x69\x22\xa7\x1f\x90\xd4\x78\x69\x2e\xd3\xe4\x7a\xd8\x26\x79\x6e\x67\x64\x9e\x2c\xd7\x36\xbc\x7c\xb9\xb6\xb3\x48\x99\x4d\x72\x6b\x1e\x64\xeb\xe5\xc3\x3a\x79\x3d\x9c\x27\x2a\xf4\x34\x3a\x92\xfe\xe5\xe6\xd3\x09\x44\x5d\xe1\xe2\x24\xb2\xae\x70\x71\x32\x53\xd7\x11\xfd\x30\x9a\x0e\x66\x28\xac\xbd\xfb\xb8\xd9\xee\x46\x5c\xb4\xb9\xba\x7a\x55\x06\xbd\xf0\x4b\xe1\x02\xd9\xf3\x72\xbd\xbf\x9b\x3a\x77\x2d\x78\x1e\x7d\xee\xf4\x5b\x0a\x6d\x1a\xca\xe6\xe6\x58\x6f\x56\xbe\x84\x98\x97\x4c\x99\x7a\xfb\x09\xf7\xdc\x64\x4c\x7e\x7e\xd2\x6d\x41\x7c\x63\x8c\x7b\x88\xdf\x22\xa3\x72\xea\x38\xc7\xaa\xc2\x77\xcf\x7a\x82\xc1\xef\xc0\x54\x31\xce\x59\x4a\xfe\xb3\xd2\x73\x44\xab\x29\x79\xfb\xdc\xf8\x1b\xa3\x7a\x71\x66\x46\x28\xb9\x27\x4c\xfd\xea\x79\xd2\x9d\xcc\xdf\xeb\xdc\x3f\xb8\xa9\xfd\x76\x12\x61\xf3\x76\xad\xa7\x3b\x15\x2e\x54\x16\xf9\x21\xed\x5e\x9b\x15\xb8\xaf\xe7\x0b\x27\x57\xe3\x3c\x82\xa1\xad\x2e\xb3\x0b\x07\xfe\x49\x66\x50\x5b\x99\xa7\x17\x8e\x11\x2f\xc5\xd0\x32\x4b\xfc\xc2\xbf\xf8\x7b\x5d\xd2\xda\xff\x16\x00\x00\xff\xff\xe0\xcd\x3c\x6d\xe5\x19\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 6629, mode: os.FileMode(480), modTime: time.Unix(1542740543, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConcourse_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x3d\x6f\xe3\x3c\x0c\xde\xf3\x2b\x04\xe3\x9d\x5e\x5c\x7c\x6e\xe2\x41\x4b\xa7\x4e\xb7\x1c\x6e\xb8\xad\x08\x04\x59\x56\x62\xa3\xaa\x64\x48\x72\x8a\xa0\xc8\x7f\x3f\x48\xb2\x15\x7f\xa5\xb5\xeb\x9c\xaf\x1f\x4b\x40\x8a\x14\xf9\x3c\x14\x49\x58\x52\x25\x4a\x49\x28\x08\xf0\x8b\x42\x8a\x92\x52\xe6\xfa\x84\x0e\x52\x94\x45\x00\x02\x22\x38\x11\xa5\x54\x14\xb1\x04\xe5\x5c\x53\xc9\x31\xeb\x1d\x7b\x5d\x01\xc0\xf1\x33\x05\xd5\xdf\x3d\x08\xfe\x7b\x3d\x62\x19\x52\x7e\x44\x79\x7a\x5e\x7b\x37\x6b\x96\xac\x6b\x37\xeb\xda\xcd\xda\xb9\x59\x01\x90\x52\x45\x64\x5e\xe8\x5c\x70\xe3\xe4\xa1\x36\x03\x3f\x2a\x1b\x73\xe8\x58\x10\x94\xa7\x8d\x9b\x98\x20\x98\x85\x4e\x7c\x0e\x56\x2b\x00\x34\x3e\x28\x1b\x15\x00\x3f\x4d\x5c\x1f\x0e\xe8\x6c\xbc\xb1\x7c\x4f\xc9\x89\x30\x5a\xb9\xcc\x0f\x5c\x48\x8a\x48\x86\xf9\x81\x2a\x70\x0f\x1e\x03\x93\x7d\xb0\xb3\x06\xe7\xd5\xea\x2d\x50\x91\x2c\x19\xbd\x8a\x2c\x8c\x1c\x9a\xfa\x54\x34\xd1\xcc\xf9\x41\x52\xa5\x4c\x44\x85\x14\x5a\x10\xc1\x2a\x8d\x26\x36\xce\xbd\x14\xcf\xa8\x10\x52\x5b\x29\x8c\x8c\x0b\x51\x0b\xbc\x88\xe4\xa9\x44\x09\x13\xe4\xc9\x45\x1d\x85\xf6\xff\x7b\x14\xec\x4c\x9e\x9d\x40\xf3\xd4\xe1\xd6\xcf\x21\x1c\x53\x16\xa1\x25\x63\x16\x1a\x9b\xcd\x66\x73\x0b\x3c\x8c\x9f\x1e\x22\x95\xf0\xab\x61\x12\xc7\xdb\x5b\x40\x12\xc7\xdb\x1e\x22\x4e\xf6\xd5\x00\xa1\x2e\xef\x21\x4c\xe8\x35\x48\xd6\x77\x7d\x44\xfa\x6f\xe6\xb3\x3c\x19\x96\x74\x92\xef\x77\xdc\x6e\xe3\x55\x99\x90\x1a\x0d\x75\x3b\x93\x38\x13\x38\x45\x09\x66\x98\x13\x2a\x91\x05\xed\x1e\x04\x9c\xea\x17\x21\x9f\xcc\x01\x55\x26\x9c\x6a\xd5\x76\xfd\x58\x27\x66\x95\x21\x4b\xaa\x5f\x2a\xfc\xdf\x06\xbe\x1b\x8a\x1c\xb1\x5c\x69\xca\xa9\xec\xf2\x57\x77\xba\x76\x2c\x58\xf2\x0b\x82\x2c\x69\xa1\x16\x62\xc9\xcf\x5d\x32\x7d\xde\xbf\x1f\x7e\x59\x5d\x4d\x5f\x43\x07\xa3\x95\x9d\x2d\x7b\x5c\x32\x8d\x30\xb1\xe3\xc5\xb5\xf2\x66\xc1\xd4\x9e\xf6\x42\xbe\x60\x99\x06\xee\x00\x96\x07\xaa\x2b\x7a\x3b\xd1\xa1\xa6\x32\xec\x64\xe7\xa3\x1d\x98\x08\x1d\xd3\x6b\xd0\x78\x82\xdf\xa3\x15\x46\xad\xd4\xab\x6e\xef\x61\xba\xa0\xe3\x47\xe7\x95\xb9\x99\x51\xcc\x74\x86\x48\x46\xc9\x53\x85\x90\x13\x9d\x90\xce\x24\x55\x99\x60\xce\xfa\x2e\xb2\xca\x92\xf7\xd5\x5e\x69\x8b\xfc\x88\x59\x1b\xde\xad\x53\xf6\x39\x6c\xb2\x38\x8c\xd9\xb5\x52\xba\x8c\x89\x05\x8a\xc9\x8e\x8d\xa5\xcb\xc9\x5c\x3a\xa3\xa0\x2e\x00\x8d\x2e\x29\x6b\xd2\x2e\xaa\x6a\x60\x4e\x2d\xab\x29\x4c\xfa\xe1\xb6\x00\x91\x66\xda\x2d\xcd\x63\x1c\x6f\x67\xd0\xe8\xd1\x19\xcd\xa2\xb1\x68\x93\xe8\x66\xfc\x6c\x0e\x27\xed\xb4\x30\x8e\x6f\xb2\xd5\xc2\x38\xee\xef\xb5\x4e\xf8\x19\xc6\xf4\x24\x4c\x6e\xb4\xc6\xc1\xa1\x3d\x0e\x7e\x9e\x45\xee\xad\x05\xc0\x97\xc5\x12\x2b\x80\x29\x93\xc5\x97\x00\x18\xc7\x73\xd6\x00\x0f\xd0\xf8\x45\xc0\x98\x74\x56\x01\xf7\x40\xfe\x66\xd7\x86\x4b\xb6\x6d\xf8\x2f\xfa\x36\x9c\xd7\xb8\xe1\xf4\xce\x0d\xfb\xad\x1b\x7e\xb8\x77\x8b\x52\x17\xa5\x9e\xf2\x35\xe7\x88\x59\x49\xe7\x35\x04\x93\xea\x1b\xd7\x37\xf1\x52\xed\x4b\x1f\x2d\x55\x23\xd7\x6c\x77\xcd\xb7\xd1\x26\x86\xc9\xa9\x36\x76\xfd\x9a\x6a\x04\x3f\x72\x93\x6d\x19\x15\x72\x00\xec\xae\xa2\x67\xbf\x37\x0d\x31\xd5\x7d\x66\xef\xb0\x50\x4a\x36\xca\x4d\xca\x15\xf2\xae\xfe\x04\x00\x00\xff\xff\x30\xc8\x26\xa1\x34\x14\x00\x00")

func templatesConcourse_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesConcourse_lbTf,
		"templates/concourse_lb.tf",
	)
}

func templatesConcourse_lbTf() (*asset, error) {
	bytes, err := templatesConcourse_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/concourse_lb.tf", size: 5172, mode: os.FileMode(480), modTime: time.Unix(1542403673, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIamTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x51\x6f\xe3\x36\x0c\x7e\xae\x7f\x05\x61\xec\x61\x2b\x9a\xac\xed\xcb\x80\xe0\x8a\x43\xd1\x66\xc5\xb6\x1b\x56\x24\xc5\x3d\xac\x28\x0c\x46\xa6\x1d\x6d\xb2\xe4\x49\x72\xba\xac\xc8\x7f\x1f\x24\xd9\x4e\xd2\xd8\x4e\xbb\xe1\xee\xa5\x40\xfd\x7d\x24\x3f\x92\x0e\x49\xaf\x50\x73\x5c\x08\x82\x78\xa1\xcc\x32\xe1\x58\x24\x5c\x1a\x8b\x92\x51\x52\x6a\x95\x71\x41\x31\xbc\x44\x00\x29\x65\x58\x09\x0b\x57\x10\xc7\xd1\x26\x8a\x84\x62\x28\x8c\x87\x38\x16\xf7\x81\x7a\xaf\xd5\x8a\xa7\x94\x3a\xd6\x37\x2f\x2b\xd4\xe3\x5e\xaf\x70\xe5\x3c\xc1\x47\x38\x87\x09\x5c\xc0\xc6\x3b\x4d\xd1\x22\xc4\xf8\x6c\x7a\x84\x78\x91\x41\x8f\xc4\x82\xde\x10\x66\x13\x47\x11\x00\x53\x95\xb4\x81\xed\x75\x8f\x0f\x25\x07\x01\x9a\x8c\xaa\x34\xa3\xad\x08\xad\x06\x03\x93\x5c\x25\x3c\xdd\x24\x5e\x80\xe7\x46\x00\x25\xda\xa5\xa3\x7c\xff\x3a\xf8\x05\x8c\x60\x40\x40\x04\x20\x78\x46\x6c\xcd\x04\xf9\x58\x00\x4c\x13\x5a\x4a\x16\x94\x29\x4d\x49\x4a\xc6\x6a\xb5\x86\x2b\xb0\xba\xa2\x08\x60\xe3\x6c\xd0\x98\xaa\x20\x1f\x3d\x29\x95\xe0\xcc\x11\x3e\x7c\x98\xfe\xf6\x63\xe4\x9c\xc4\x9f\x49\x1b\xae\x64\x3c\x81\xf8\xf2\xfc\xe2\x72\x74\x71\x3e\xba\xf8\x21\x3e\x73\xd0\xdc\xa2\xa5\x82\xa4\x8d\x27\xf0\xe8\x03\x86\xb0\x00\xf1\x35\xb3\xb5\x91\xb1\x66\x72\xed\x63\xcc\x5c\x82\x67\x0d\xe3\x5e\x73\xc9\x78\x89\x22\x9e\xb4\x66\xce\x27\xe9\x15\x67\xe4\x2c\x89\x5d\x8e\xb1\xc0\x7f\x94\xc4\x67\x33\x66\xaa\x88\x6b\xda\xa6\x75\x32\xcd\x32\x62\x2e\x7c\x7c\x2d\x84\x7a\xde\x7a\x9f\xf3\xd4\x3d\x0d\x16\x9b\x08\xe0\x29\xda\x44\x2e\xa7\xce\x36\x85\xbc\xdf\xda\xa8\x9a\xfd\xff\x5a\xf5\x05\x4a\xfd\xb8\xad\x22\xb1\x4b\x57\x74\xc5\x38\x5a\xba\x4e\x53\x4d\xc6\xb4\xc5\x69\x70\x6b\x91\x2d\x3f\x2b\x51\x15\xf4\x1a\xbb\x51\xe5\xfa\xa7\x02\xf3\x43\xc0\xbf\x51\xdd\x46\xb7\x24\xc8\xd2\x5c\x62\x69\x96\xca\x76\xa3\x7d\x96\x86\x69\xbe\x68\x94\xd2\x81\xd6\x96\xb0\x42\x2e\x70\xc1\x05\xb7\xeb\xdf\x95\xec\x27\x7a\xf1\xfd\x68\xfd\x3b\xef\x25\xcc\x28\xe7\x4a\xf6\xc2\x73\x62\x95\xe6\x76\x7d\xa7\x55\x55\xf6\xb3\xea\x4a\xf4\x13\xaa\x85\xa4\x7e\x38\xd4\xaa\x03\x1e\xe8\x9b\x6f\x4f\x5f\x0b\x02\xfa\x80\xf9\x81\xcf\x5f\x55\xca\xb3\x75\x53\x96\x6b\x6b\x35\x5f\x54\xf6\xc0\xfd\xac\x92\xbd\xa5\x7b\x20\x5d\x70\x89\xb6\xbf\xb8\xae\xa8\xc6\x92\xee\x7c\xb1\x6e\x49\x0f\xc1\x37\xce\xa3\x98\x97\xca\x36\xee\x67\xf4\x57\x45\x66\xa0\xb8\x6f\xe0\xd6\xcf\x77\xa9\x07\x9c\x50\xb4\x99\xea\x28\x47\xfb\xb6\x38\xf0\xc1\x2d\xc2\x8e\x08\xa5\x40\x56\x9b\x47\x27\x00\x4f\x67\xee\x6f\xc7\xe0\x72\x4f\x67\xf5\x64\x72\xcf\x4f\xeb\xd9\x75\x16\x9d\xbc\x78\x70\xe7\x77\x7e\xe2\xfd\x73\x2c\x26\xf7\x68\x8c\x9f\xab\xef\xf5\x7d\x32\xe0\x98\x04\x1a\xcb\x99\x50\x98\x2e\x50\xa0\x64\x5c\xe6\x93\xd3\xff\x14\xa2\x29\xc6\x76\xc2\xc3\xd0\xdc\xae\xe1\x8e\x91\xd6\x62\x7f\x16\x66\x32\xa3\xa9\x64\x7a\x5d\xda\xd3\x57\x96\x2d\xe3\x8e\x24\x69\xb4\x74\x8b\x16\x7f\xa1\x75\x2f\x2f\x74\xf7\x4e\xa3\xb4\x7d\x94\xa6\xcb\xde\xcd\x1e\xe5\xe9\x95\xec\x9d\xfc\x3b\x84\xbf\x36\x6e\xff\x3b\xba\x9e\x76\x76\x73\x82\x7e\x6a\xfb\x4d\xb0\xbb\xae\x1c\xa5\x76\x77\xe4\xba\xa8\xdd\x68\x19\x88\xfb\x2b\xd0\x9f\x42\x63\xd4\xf2\xe0\xf2\x39\xb2\xd1\x3a\x75\xbf\xe3\x04\xab\xb5\x8e\x3c\xde\xe4\xb3\x27\xd0\x3d\x09\xf2\x9c\xe5\x7b\xf5\x75\x1c\x47\x3c\x97\xee\x2a\x62\x4b\x94\x39\x19\xb8\x82\xc7\xd8\x79\x8e\x9f\xfc\x65\x74\x90\x50\x26\xd4\x73\x22\x54\xee\x92\x58\x88\x90\x83\x50\x79\x92\xbb\x1d\x90\x6c\xb3\x71\x5c\x26\x54\x95\x3e\xa3\x65\xcb\xa4\xa5\x8c\x17\x0b\xd1\x48\xf7\x57\x6f\x68\xab\x6b\x04\x74\x64\xda\x84\x33\x75\x37\x00\x56\x25\x4b\x78\xda\xbe\x3f\x3b\xf7\x68\x40\x3c\xc9\x6a\xcc\x32\xce\x12\xbb\x2e\x29\x90\x66\xd3\x9f\xa7\x37\x0f\x1d\x1d\xea\x12\xb9\x9b\x9c\xd3\x9a\x94\x9a\x32\xfe\xf7\xb6\x4f\x66\xa9\xb4\x4d\x9a\x6e\x09\x95\x8f\x82\xdd\xe0\xf9\xdb\xe6\x32\xd4\x79\x47\x72\x0e\xcd\x28\xbc\xaa\x5f\xec\x34\x6d\x4e\xc3\xe3\x47\xe4\xf1\x13\x75\x55\xb2\xad\xf0\x63\xc7\x6a\xef\x4d\xfc\xb6\x23\x75\xa7\x0c\xef\xaf\xe9\xf6\x66\xed\xf9\x65\x6d\xdf\x37\xfe\x55\x2e\x54\x17\xaa\x9e\xbe\x9f\x54\xee\x0f\xa9\xdd\xdd\xb9\x0f\xcf\xad\x26\x2c\x0e\xf0\xfb\xca\x7e\x52\xf9\x74\x45\x72\x7f\xb5\x7b\xb0\x19\xdb\x8d\xf7\x41\x46\x08\x60\x9a\x9e\x3d\x1d\x7f\x37\xba\x56\xf5\x7e\x07\x55\x65\xcb\xca\xfa\x35\xdd\xf3\x55\xbc\x42\x51\xd1\xf0\x87\x25\x7c\x84\x3f\x14\x97\xdf\xc6\xf1\x19\xb8\xef\xdb\x71\xdf\x6c\x0d\xa3\xf1\xd4\x4f\x98\xef\x60\xb2\xb5\x7a\x93\x81\x9f\xe0\xff\x06\x00\x00\xff\xff\x6f\x9b\x07\x6e\xce\x0f\x00\x00")

func templatesIamTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesIamTf,
		"templates/iam.tf",
	)
}

func templatesIamTf() (*asset, error) {
	bytes, err := templatesIamTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/iam.tf", size: 4046, mode: os.FileMode(480), modTime: time.Unix(1539621279, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIso_segmentsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x4d\x8f\xdb\x36\x10\xbd\xef\xaf\x18\x08\x39\xc4\x89\x56\xd0\xda\x72\xaa\x2d\xb0\x2d\x8a\xe4\x18\xa4\x01\x92\xf6\xb2\x58\x10\x94\x44\xcb\x44\xb8\xa4\x40\x52\x4e\x93\xc0\xff\xbd\x20\xa9\xc8\xfa\xf6\xc7\xee\x26\x2e\xea\x83\x61\x53\xe4\xcc\xbc\x37\x4f\x43\x8d\xb8\xc1\x92\xe2\x84\x11\xf0\xa8\x12\x0c\x6b\x2a\x38\x52\x24\xbf\x27\x5c\x2b\x0f\xbe\x5d\x00\xe8\x2f\x05\x81\xea\x73\x03\x9e\xd2\x92\xf2\xdc\xbb\x00\xc8\xc8\x0a\x97\x4c\x7f\xbf\x10\xba\x31\x95\x4a\x5a\x18\x33\x66\xec\x4f\xfb\x0b\x33\xf6\x05\x52\x49\xb0\x26\x80\x81\x09\x9c\x41\x82\x19\xe6\x29\x91\x80\x79\x06\x6f\xde\x7d\x00\xc2\xb5\xa4\x44\xc1\x4a\x48\xc0\xa0\x28\xcf\x19\x81\x3a\x24\xa8\x42\x0a\xe0\x6f\xcc\x68\x06\x1b\xcc\x4a\xa2\x00\x4b\x02\x21\x08\x09\x57\x81\x77\xb1\xbd\xb8\x68\x81\x41\x5a\xa0\x44\xa8\x35\x2a\x84\xec\x62\xb9\x01\x8f\x51\xa5\x9b\x28\x6e\xe0\x76\x3e\xf7\xe1\x55\xfc\x2a\xf6\x61\xbe\x5c\x2e\x7d\x88\xe6\x66\x64\xbe\x9c\x2f\xc3\xbb\x41\xf3\x6a\x8d\x25\xc9\x90\x4e\x8b\xc3\x9d\x5c\x87\xd7\xa1\x0f\xd7\xe1\xf5\x95\x0f\x71\x18\xcf\x7d\x88\x17\x61\x68\xbf\xcd\x48\x1c\x5f\xfb\x10\x47\xd1\xc2\x87\x45\x68\xc6\x23\xfb\x3b\x0e\xe3\xd0\x87\x45\xb4\xfc\xc5\xac\x9d\x2f\xec\xf7\xdc\x85\x38\x19\x5b\x99\x1d\x11\x5b\x15\xc3\x22\x34\x51\xbd\x0a\x1d\x6a\x26\x52\xcc\x94\x5d\x6d\x4c\xe3\xaf\x28\x15\x25\x37\xf3\xbd\x67\xdf\x36\x58\x06\x7d\xe1\xc0\x6f\x10\xc2\xef\xc0\x08\xcf\xf5\xfa\xb9\x99\x83\x37\x98\x32\x9c\x50\x46\xf5\x17\xf4\x55\x70\xa2\x66\xf0\x2b\x84\x5b\x9b\x36\x49\x94\x28\x65\x4a\xc0\xc3\x9f\x15\x52\x65\xc2\x89\xf6\x1c\x10\xf7\xa7\x0a\xde\xf9\x6d\x7e\x6c\x0c\x36\xc0\xa0\x19\xdb\xd6\xe0\xda\x14\x29\xa2\xd9\xc8\x6c\x77\xd1\xce\x4b\x69\x26\x51\xc2\x44\xfa\xa9\x35\xcf\x0c\x3b\xef\x16\x80\x59\x60\x86\x7c\x88\x7c\x17\x48\x40\x79\x46\xfe\x81\x97\xfb\x60\xbe\x84\xab\x99\x75\xd4\xbb\xe8\x1c\x11\x46\x0c\x69\x23\xeb\x5b\xce\x8c\x1d\x93\x44\x9c\xbb\x7c\x00\xbc\xc3\xf7\x64\x97\x09\xc2\x37\x06\xd5\x25\x55\xe2\xd2\xc5\xfe\xec\x5b\x63\xb9\x8d\x62\xdb\x67\x5c\x8a\x52\x13\xa4\x8d\x7c\x10\x56\x4a\xa4\xd4\xa6\xd3\x03\xcf\x5d\xd9\x97\x88\xa9\x2c\xb8\x75\x75\x22\x5a\x88\x77\xd9\x0e\x1a\x2e\x82\x17\x01\xcd\x7a\xb0\x01\x9a\x51\xd2\xcc\x59\xea\x44\x1f\x50\xae\x89\xe4\x98\xb5\x07\xb3\x21\x99\xb1\xa4\x92\x98\x9d\x2a\xed\xff\x61\x91\x75\x3e\x13\xba\xb7\x71\x72\x93\x92\x83\x0c\xa8\xb5\x90\x1a\x35\x93\xe6\x62\xb9\x64\x89\x31\x64\x0a\x25\xfa\x5e\x28\x51\xb3\x0c\xef\x0c\x71\xa2\x3f\x0b\xf9\xc9\x4c\x27\xdc\x52\x93\x4a\xa1\x94\xd5\x0e\x6a\x18\xa0\x3c\x87\x1b\xd0\xb2\x24\xe6\x36\xae\x58\x9a\x88\x70\x85\x99\x22\x75\xfa\xd4\x14\x98\xdb\x2a\x0f\x55\x26\x59\xd2\x4a\xe4\xd6\xbb\x1b\xe2\x1e\x99\xea\x43\x38\x91\xdd\x24\xa0\x38\x6c\xe6\x61\x1f\xd9\x6d\x8e\xb0\xe4\x3b\x5d\xb0\x24\x68\x59\x0e\xb0\xe4\x76\x8d\x29\x87\x5d\x10\x71\x68\x2e\x48\xa1\x45\x2a\x58\x8b\xe1\x8f\xaf\xdf\xdb\x9b\xae\x2a\x93\x08\xa7\x76\x43\x72\xb7\x5f\x2f\x29\x37\xe0\xad\x84\xfc\x8c\x65\xe6\xb9\x09\x58\xe6\x44\xa3\x5c\x8a\xb2\xe8\x86\x87\x9a\x17\x83\x2e\x0b\x75\xb8\x03\x37\xec\x14\x7f\x51\xb4\xf8\x19\x04\x46\xd1\xe2\xbc\x18\x8c\xa2\xc5\xe9\x14\xfe\x2c\x0e\xcf\x8f\xc4\xbd\x2c\x36\x57\x3f\xf0\x66\xae\x2b\xe7\x78\x85\xd4\xf9\x65\x1c\xb6\xf8\xeb\xde\xbb\xdf\xb9\x6a\x3c\x00\x0c\xed\xfb\x17\x00\x6b\x82\x99\x5e\xa3\x74\x4d\xd2\x4f\x15\x91\x03\x56\x4e\x40\x7d\xa4\x7c\x0e\x83\x6d\x8c\xb6\x71\x77\xd4\x72\x16\xc0\x9f\x06\xf9\x00\xf4\x1f\x8e\x5d\x91\xb4\x94\xe6\xb1\xac\x09\xbd\x3b\x78\x28\xf4\x1d\xf6\xe1\x67\xb7\xbc\x01\x65\x04\x48\xa7\xd3\x7a\x2f\xe9\xc6\xf4\x57\xbd\x96\xe9\x88\x27\xc6\x0a\xcc\xa5\x03\x73\x0c\x0d\xae\xd7\x78\x2a\x36\xac\xf5\x53\x48\xf9\x60\x57\xf6\x39\x51\x47\x90\x52\x39\x3f\x9e\x1b\x24\x4b\x46\xbc\xa1\xbe\xba\xee\x4c\xdd\x8c\x83\x68\x82\x17\xcd\x3e\xa3\xd7\xde\xce\x06\xf1\x7f\x7c\xfd\x1e\xb4\xc4\xab\x15\x4d\x61\x25\xc5\x3d\x38\x71\x81\x16\x60\x96\xda\x25\x9d\xa0\x77\x1d\x53\xbd\x45\xb4\x67\x04\xd6\x69\x67\xac\x6a\xa5\x06\x9e\x51\x6b\x5b\x94\xe7\x92\x28\xe5\x0d\x6e\x70\xbb\x69\x3a\xb5\xec\x6a\x81\xfa\x3b\x24\x74\x1b\x88\x41\x2a\x06\x5a\x07\x83\x7d\xd0\xde\x49\xd6\x5c\xca\xbb\xd9\x6e\xb6\x24\x5d\x76\x7a\x95\x62\xa4\x27\x39\x46\x40\x8d\x77\x0f\x0f\x95\x51\xf7\x35\xc6\xd1\x62\xea\xdc\xa5\xa7\xa8\x6a\xb4\x8c\x9c\x81\xb6\xba\xfc\x3c\x86\xc2\x0e\xb0\x79\x56\x3a\x2b\xb3\x47\xd3\x59\xfd\x4a\x6a\x58\x67\x7f\xbd\xf9\xaf\xeb\xac\xcc\x1e\xa4\xb3\x9a\x9f\x47\xd4\xd9\x94\xcd\xf3\xd0\x99\x2d\xb9\x98\x31\x54\xe5\xfe\x18\xb5\x0d\xea\xe8\x8f\xb7\x6f\xf7\x6e\x7e\x19\x29\x08\xcf\x14\x12\xbc\x47\xe7\xed\x00\x82\xa1\xbd\xcf\xbb\x3b\xbf\x4d\xf4\xf2\x6a\x8f\x56\xc2\x69\x79\x86\x3f\x41\x15\x95\x50\x33\x4a\x72\x81\x92\xc4\x6a\xc2\x65\x9a\x64\x28\x25\x8c\xa9\x07\x2b\xa2\xb7\x83\x39\x9f\x60\x7d\x42\x92\xa8\xba\xc6\xe4\x27\xa9\x63\xa0\x23\x38\x49\x1c\x63\x4c\x3e\xe6\x26\x38\x21\x8e\xab\x38\xbc\x9a\xd6\x47\x35\xe3\x34\x89\x8c\x17\xdf\x03\x95\xc2\xb1\x7e\x02\x71\xf4\xca\x05\xc7\xba\xb9\xed\x9c\xb8\xdf\x98\x60\xff\x37\xf7\xb9\x28\x75\x51\x6a\xf0\xd2\x15\x6a\xbf\x18\x30\xed\x9d\x4b\x8e\x3d\xb9\x6b\xef\x56\xa9\xe0\x29\x76\xa7\x01\xbd\xd7\x65\x2f\x02\xb3\xd4\x07\x46\x95\x7e\xee\x79\xb3\x99\x0f\xe1\x6c\xca\x59\xeb\x4d\x97\x59\xab\xda\x7e\x6f\x6d\xbf\x37\xe6\x7d\xcf\x2b\xd9\x91\x68\xfc\x93\x6d\x46\xd1\xe2\x29\x8c\x4e\x5b\xbd\x6b\xb2\xd7\xcf\x26\xa2\xd9\x21\xa9\xda\xaf\x0a\x77\x8e\x33\x91\xb9\xea\xb0\xa8\x3e\x22\x42\xf7\xb8\x28\x28\xcf\x7b\xee\x2d\x15\x5f\x69\x71\x8f\x8b\xe7\xed\xd3\x86\xf6\xb9\x51\xef\xf8\x6c\xeb\xf9\x30\xb5\xc0\x08\x77\x66\x9a\xf9\x89\xb8\xec\xf9\xe0\x0f\x8f\x6c\x77\x2a\x39\x16\xe1\x60\x21\x7d\x40\xf2\x06\xeb\xf2\x58\x0e\xff\x0d\x00\x00\xff\xff\x86\xb6\xed\xe6\x37\x20\x00\x00")

func templatesIso_segmentsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesIso_segmentsTf,
		"templates/iso_segments.tf",
	)
}

func templatesIso_segmentsTf() (*asset, error) {
	bytes, err := templatesIso_segmentsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/iso_segments.tf", size: 8247, mode: os.FileMode(480), modTime: time.Unix(1542740543, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLb_subnetTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4d\x6e\xfb\x20\x10\xc5\xf7\x3e\xc5\x08\x65\xf1\xff\x48\x68\xd4\x55\x37\xb9\x42\x2f\x50\x45\x08\xe3\xa9\x83\x4a\x20\x32\x63\xa7\xa9\xe5\xbb\x57\x80\x15\xdb\xb5\xd3\xa6\xc9\xc6\x02\xe6\xf7\xde\x63\x86\x0a\xbd\xab\x2b\x85\xc0\xe4\xd9\x0b\x5f\xe7\x16\x89\x01\x33\x79\xff\xed\x19\xb4\x19\x80\x72\xb5\x25\x18\xff\x76\xc0\x56\xad\x41\x5b\xd2\xe1\x4f\x23\x2b\x2e\x1b\xa9\x8d\xcc\xb5\xd1\x74\x11\x1f\xce\xa2\xff\xdb\xb1\x0c\xa0\x39\x29\xa1\x8b\x79\xa5\x53\xd2\xf0\xb4\x19\xcf\x29\x5d\x54\x22\x37\x4e\xbd\x4d\xce\x85\xe5\xe4\x24\xaa\x84\x82\xb0\xb4\x86\xa7\x75\x32\xc5\xb5\x2d\xf0\xfd\xff\x63\x52\x9b\xb9\x48\x14\x34\x78\x44\x4b\x37\x8c\x4e\x48\x81\x93\x01\x90\x2c\x7d\x4c\x0e\xf0\x2c\x8f\x3d\x26\x94\xa3\x6d\x82\xe5\x8d\xc9\x37\xc9\xd7\xaa\x1d\x55\x47\x13\x5d\x00\x18\xfd\x8a\xea\xa2\x0c\xf6\x14\x5d\x5a\x57\xa1\x50\x07\x69\x4b\xf4\xb0\x83\x17\x36\x44\x66\x6b\x60\x33\x5f\x6c\x1f\x59\x5d\x96\x4d\x9b\x54\xb9\x9a\x50\x90\xcc\x0d\xa6\x4e\x4d\x16\xda\xe1\xce\x97\x2e\x7a\x99\x76\x83\x53\xa0\x27\x6d\x25\x69\x67\xc5\xa8\x3f\x3b\x60\x5b\x1e\xff\x0f\xdb\x90\xb7\x94\x84\x67\x79\xf9\xd2\xe6\x24\x1f\x24\xb4\x25\xac\x2c\x92\xe8\x0f\x72\x5d\xf2\xbe\xeb\x23\xc9\x71\xf9\xb5\x74\xb4\xcf\xa7\x0e\xf9\x37\x71\x7a\xa0\xf4\xde\x29\x1d\xed\x33\x60\x69\xe7\x87\xc1\xbe\x77\xaa\x13\xe3\x6a\x79\x32\x64\xc3\x43\xe2\x83\x1a\xff\xc7\x75\x31\x1b\xb4\xd9\x05\xfc\x26\xb8\xab\xe9\x54\xd3\xe8\xad\x0a\x5d\xf4\xa9\x1a\x69\x6a\x8c\x33\x96\x68\xcb\x76\x3a\xb6\x5f\xe6\xcc\x53\xdf\x8f\x9d\xd5\xde\x54\x89\x4f\xfb\x7e\xf0\x30\x80\x89\xf8\x19\x00\x00\xff\xff\x0b\x56\xd0\x1c\xba\x04\x00\x00")

func templatesLb_subnetTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesLb_subnetTf,
		"templates/lb_subnet.tf",
	)
}

func templatesLb_subnetTf() (*asset, error) {
	bytes, err := templatesLb_subnetTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/lb_subnet.tf", size: 1210, mode: os.FileMode(480), modTime: time.Unix(1539621279, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSsl_certificateTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x41\x6e\xc3\x20\x14\x44\xf7\x9c\x62\x84\xba\xee\x0d\x72\x16\x84\xf1\xb8\xf9\x2a\x31\xd1\x87\xd0\xa2\x88\xbb\x57\xc6\x1b\xa7\x92\x37\x61\x83\x04\xf3\x46\x6f\xaa\x57\xf1\x53\x24\x6c\xce\xd1\x05\x6a\x91\x45\x82\x2f\xb4\x78\x1a\xa0\xb4\x3b\x71\x81\xcd\x45\x65\xfd\xb2\xa6\x1b\x73\x4a\xb8\x70\xf5\xb2\xbe\xc1\xdd\x55\xea\x76\x7f\xb3\x9d\xd2\xca\x9c\x1e\x1a\x08\xeb\x7f\xb2\x13\x7f\x73\x99\x5a\xa9\xaf\xca\x36\x4e\xe3\x61\xaf\x59\xfd\x6d\x2b\xe7\x22\xbf\x5b\xdb\xc7\xb3\x7a\xfd\xcc\xd7\xa4\xc5\x71\xad\x4e\xe6\x6e\x8d\x01\x8e\x2a\x53\x9a\x1b\x0e\xe1\x57\xd3\x6e\xff\xc5\xc7\xe2\xd3\xf8\xfe\x3d\xa0\xc3\x44\xec\xe7\x14\x3a\x44\x77\xbf\x28\x0b\x43\x0b\x91\x63\x14\x10\x94\x43\x95\x4b\x52\xba\x99\xb9\x68\x6a\xb8\xa0\xe8\x83\x06\xe8\xa6\x9b\xbf\x00\x00\x00\xff\xff\x4f\x95\x65\x5c\xd6\x01\x00\x00")

func templatesSsl_certificateTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesSsl_certificateTf,
		"templates/ssl_certificate.tf",
	)
}

func templatesSsl_certificateTf() (*asset, error) {
	bytes, err := templatesSsl_certificateTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ssl_certificate.tf", size: 470, mode: os.FileMode(480), modTime: time.Unix(1539621279, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVpcTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xd1\x6a\xe3\x30\x10\x45\xdf\xf5\x15\x17\xb1\x0f\xc9\xb2\x6b\xb2\xaf\x81\x6c\xff\xa0\xfd\x04\xa1\x48\x53\x67\x5a\x65\x64\x24\xd9\x6d\x08\xfe\xf7\x22\xd9\x69\x21\xf4\xa1\x03\x36\x66\xe6\x0e\xf7\x8c\xef\x64\x13\xdb\x63\x20\x68\x7a\xe7\x5c\x58\x7a\x33\x0d\xce\xb0\xd7\xb8\x2a\xa0\x5c\x06\xc2\x5a\x07\xe8\x5c\x12\x4b\xaf\x15\xe0\xe9\xd9\x8e\xa1\xdc\x06\x4b\x2b\xbb\xc4\x43\xe1\x28\xb5\xf5\xd4\xbe\x6c\x08\x17\x8c\x99\x60\x05\x37\x07\x4c\x83\xd3\x6a\x56\x2a\x44\x67\x43\x6e\x46\xd5\xd4\xc5\x51\x4a\x5d\xfd\x75\x0d\x24\x7d\x39\x6d\x26\x9b\xba\x3b\xae\x2d\xfe\x63\x87\x07\xec\xb0\xc7\xbf\x59\xaf\xab\xec\x57\x90\x9f\xac\x7e\x33\xc2\x1e\x2f\x91\x65\xa3\xa1\xff\xc0\xbe\xe5\xda\xee\xea\xf3\xbb\x63\xbf\x9d\x1b\x6d\xa2\x1c\xc7\xe4\x08\x7a\x15\x68\xe8\xf6\xae\xfc\x0b\xfb\x5d\x2d\x3c\xf5\xc8\xee\xf3\xbe\x86\xec\xd8\x27\x73\x0c\xd1\xbd\xde\xab\x2b\x5b\xd3\xb2\x4f\x4d\xca\x92\x8b\x15\x47\xa6\x90\x58\x71\x97\x9b\x74\x0d\xa0\x4a\x48\x6a\x82\xc6\x4b\x36\xa7\x98\x8b\xd8\x33\x65\x1c\x50\xd2\x48\xaa\x66\x68\xfb\xe5\x1f\x03\x8f\xf6\x4c\x5f\x3e\x24\x93\x61\x3f\xff\x6d\x71\x00\xb3\x9a\xd5\x47\x00\x00\x00\xff\xff\xe1\xdc\x0f\xba\x0f\x02\x00\x00")

func templatesVpcTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVpcTf,
		"templates/vpc.tf",
	)
}

func templatesVpcTf() (*asset, error) {
	bytes, err := templatesVpcTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vpc.tf", size: 527, mode: os.FileMode(480), modTime: time.Unix(1539621279, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/base.tf": templatesBaseTf,
	"templates/cf_dns.tf": templatesCf_dnsTf,
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/concourse_lb.tf": templatesConcourse_lbTf,
	"templates/iam.tf": templatesIamTf,
	"templates/iso_segments.tf": templatesIso_segmentsTf,
	"templates/lb_subnet.tf": templatesLb_subnetTf,
	"templates/ssl_certificate.tf": templatesSsl_certificateTf,
	"templates/vpc.tf": templatesVpcTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"base.tf": &bintree{templatesBaseTf, map[string]*bintree{}},
		"cf_dns.tf": &bintree{templatesCf_dnsTf, map[string]*bintree{}},
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"concourse_lb.tf": &bintree{templatesConcourse_lbTf, map[string]*bintree{}},
		"iam.tf": &bintree{templatesIamTf, map[string]*bintree{}},
		"iso_segments.tf": &bintree{templatesIso_segmentsTf, map[string]*bintree{}},
		"lb_subnet.tf": &bintree{templatesLb_subnetTf, map[string]*bintree{}},
		"ssl_certificate.tf": &bintree{templatesSsl_certificateTf, map[string]*bintree{}},
		"vpc.tf": &bintree{templatesVpcTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

