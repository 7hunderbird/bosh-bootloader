// Code generated by go-bindata.
// sources:
// templates/base.tf
// templates/cf_dns.tf
// templates/cf_lb.tf
// templates/concourse_lb.tf
// templates/iam.tf
// templates/iso_segments.tf
// templates/lb_subnet.tf
// templates/ssl_certificate.tf
// templates/vpc.tf
// DO NOT EDIT!

package aws

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBaseTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xdc\x5b\x5f\x6f\xe3\xb8\x11\x7f\x3e\x7f\x0a\xc1\xd8\x87\xdd\x36\xf6\x5a\x8e\xff\xe5\x80\x2d\x70\xed\x15\xe8\xf5\xe1\x5a\xf4\xee\xad\x58\x08\x14\x45\xcb\x6c\x24\x51\x20\x29\x67\xb3\x81\xbf\x7b\xc1\x7f\x92\x28\x89\x96\x94\x8d\xd7\xc9\xdd\x3d\x6c\x22\xce\x0c\x67\x7e\x33\x9c\x19\x4a\x93\x23\xa0\x18\x84\x09\xf2\xa6\x19\xe0\x01\x48\x71\x90\x82\x7c\xea\x3d\x4d\x3c\x8f\x3f\xe6\xc8\xfb\xe4\x4d\xc5\x83\xc9\xc4\xf3\x22\xb4\x07\x45\xc2\xbd\x4f\x72\xd5\xf3\x40\x3e\xcb\x08\xe5\x07\x04\x18\x9f\xf9\x82\x12\xa4\x78\xe6\x2f\xa2\x3d\xdc\x6d\xb7\xd3\x36\xcd\xb2\xa4\x01\x7e\x08\x57\xdb\x55\x49\xc3\x48\xc1\x0f\x33\x5f\xfc\x66\x68\xb6\x2b\xe8\xef\x36\x7e\x68\xd3\xd8\x7b\xdd\x6e\xc0\x7e\xb9\x58\xaf\x3b\x68\xaa\xbd\xd0\x9d\xbf\xf3\xb7\x91\xa2\x81\x60\x06\x51\xc6\x29\x48\xe4\x6e\x86\x66\x19\xdd\x6e\xc0\x76\xa3\x68\x50\xd1\x45\x73\x87\x42\xe4\xef\xf6\x7e\x49\xf3\x80\xa4\x2a\x75\x9d\x6f\xc1\x6e\x75\xb7\x5f\x43\x9b\x66\x69\xd1\x2c\x7d\x7f\xb9\x58\xad\xb4\xce\x05\x9b\x69\x93\xea\x34\xd1\x0a\xae\xd1\x1e\x2e\x6d\x1a\x5b\xce\x7e\xb9\x0d\xd7\xe0\x6e\x5b\xd2\xc4\xe4\x58\xea\xa4\x69\xe0\xed\xdd\xc6\x5f\x80\x4a\x4e\x87\xce\xe1\x6e\xbb\x5f\xdf\x46\x3b\x9b\xc6\xde\x6b\x17\xee\x21\xda\xed\xa5\x9c\xd3\xe4\x34\x99\x54\x51\x03\x20\x44\x8c\x05\xf7\xe8\xd1\x0e\x1a\xc6\x29\xce\xe2\xa9\x4d\xcc\x10\xa4\x88\x0f\x24\xa6\x28\xc6\x24\x1b\x40\x18\x12\x76\x08\x70\x16\x92\x22\x8b\x02\x88\x23\xaa\x78\xaa\x70\x9d\x2e\xe6\xf2\xff\x8f\x8b\x06\x27\x38\x02\x9c\x80\x10\x27\x98\x3f\x06\x5f\x49\x86\x98\xbd\x5d\x82\x19\x6f\xb0\xa0\xec\x18\xe0\x68\x88\xad\x07\x42\x79\x30\x98\xfc\x98\xc3\x9a\xee\x92\x54\xe1\x6f\xa8\x2d\x83\x7c\x63\x91\xbf\x91\x72\x28\x62\xa4\xa0\x50\x98\xf4\xc0\x02\x84\xf3\xa9\x37\xfd\x5f\x91\xe6\x21\xf9\xa2\x7e\x53\x80\xe4\x28\x8b\x58\x40\x32\xef\x93\xf7\x5f\x49\x89\x33\x8e\x68\x86\x78\x10\x03\x8e\x1e\xc0\xe3\x1c\xc7\xd3\xcf\x13\xcf\x3b\xe6\xd0\xf3\x4c\x08\x70\x5a\x20\x7b\x13\x9e\xb0\x20\xa7\xf8\x08\x38\x52\xce\x54\x3e\x38\xa6\x1a\x3f\x90\xc4\x84\x62\x7e\x48\x85\xae\xff\xf9\xed\x27\xa1\x3d\x65\x20\x08\x31\x67\x42\xe2\x6a\x71\xb7\x69\xab\x7d\x8f\x1e\x83\x1c\x60\xda\x12\x27\x16\x32\x90\x22\x05\xc8\xbb\xa7\x23\xa0\x73\x05\xec\x29\x28\x29\x27\x9e\x97\x17\x61\x82\xa1\x90\xa3\xe8\x1a\x6a\xce\x0d\xed\xbc\x22\x0c\x48\x8e\x32\xc6\x0e\xa7\x0e\x18\x19\x82\x05\x15\x91\x11\x53\x52\x08\x44\x45\x86\x6c\x3e\x14\xfa\x69\xdd\xcc\x89\xb1\x14\x9c\x65\x80\xcf\x0c\xd3\x4c\x31\x49\x5f\x30\x48\x71\xce\xb1\x74\xc6\xf4\xd7\x9f\x7e\x9f\x2a\xd8\x03\x1c\xd5\x04\x25\x04\x82\x64\xae\x1e\x9f\x64\x12\xe6\x20\x66\x3a\xff\xfe\x2a\xb6\x1d\xb8\xdf\x49\xf0\x26\x78\x8f\xe0\x23\x4c\x90\x16\x80\xe3\x8c\x50\x14\xc0\x03\xc8\x62\xc4\x64\x50\x08\x53\x64\x04\x9c\xfa\xf0\x08\x68\x91\x20\x0d\x0a\x27\x55\x24\xa9\xc7\x62\x83\x06\x3d\x8e\x94\xb2\x6d\x51\xf3\x36\xb0\xf3\xd2\x5e\x7d\x12\x34\x24\x28\xa6\x88\x49\x67\xef\x29\x49\x83\x9c\x50\x2e\x17\x16\x82\x94\x98\xdf\xcd\x93\x9c\x12\x4e\x20\x49\x34\xf3\x4c\x26\x6f\x71\xca\x82\x30\x21\xf0\x5e\x99\x5c\x25\x87\xcf\x63\x6c\xc6\x30\xcd\x2f\x6c\x2c\xce\x4a\x6b\x1b\x96\x88\xcd\xdb\x20\xcc\xfc\x16\x0a\xf2\xd1\x0b\x59\xcc\xe1\x45\x0d\xb6\xfe\x73\x5b\xdf\x24\xe3\xb0\x85\x44\x83\xa4\x19\x1b\x8d\xe5\xcd\x7a\x7d\xbb\x16\x06\x49\x10\x9a\xf6\x9f\xb1\x4b\x85\x3c\x48\x3a\x8d\x1b\x81\x6b\x11\xbd\x46\x5c\x8b\xe8\x6d\xe0\x8a\x33\xc6\x41\x06\x35\x98\x0a\x43\x93\xf4\x71\xde\xb4\xea\xdd\x93\x38\x0c\x07\xc2\xf8\x7b\xb9\x73\x11\x66\x88\xab\xc2\xa0\x7f\xae\x0e\xcb\x8d\xb7\xfd\x70\x12\x18\x98\x2d\x02\x1b\x56\x11\x7c\xcb\x79\x8a\x22\x5c\xa4\x82\x4c\x09\x28\x13\xb8\xb5\xab\x63\x33\x69\x52\x09\x51\x84\x18\x0f\xe0\x01\xc1\x7b\xc3\xb9\x07\x09\x43\xa2\xa0\xa6\xd8\xe1\x4d\x51\x23\xc8\x7d\x91\xbf\x17\x35\xa0\xd6\xc2\xdf\x78\xe2\x81\xea\xa1\x94\x15\xa2\x8a\xb4\x9c\xa0\x12\xc2\x98\xf0\xfa\xdc\x55\x85\x3a\xcb\x90\xea\x28\xff\x9e\x1d\x7f\xf9\xb9\xb5\x3e\xed\x2e\x31\xaa\x73\x11\x3b\x3f\xa7\x6b\x31\x7e\xaa\x83\x6e\x9e\x09\x73\x0c\xdc\x9d\xdd\x4d\x4e\xc9\x11\x47\x88\x4a\x45\x74\x1b\x53\xf6\xb6\x95\xfe\xd5\x33\xe5\xb9\xb2\xa3\xad\x48\xaa\x67\x92\x44\xf9\xa0\xf2\x57\xe5\x17\x75\x56\x8f\x88\x32\xdd\x06\xfc\xe5\x93\xe7\xcf\xfd\xed\x7c\xd1\x11\xe7\xba\xfb\x6b\x77\x25\xae\x85\xa7\xaa\xa1\xe8\xea\x25\xfa\xdb\x1d\xc7\x39\x1c\xd0\xf3\x18\xce\xfe\xc6\xe7\x17\x4d\xf9\x52\xdd\xcf\x99\x9d\x2f\xd7\x02\x39\x80\x92\xcb\xa2\x6a\x8e\x4d\xec\x67\x13\x60\x57\x72\xef\xcb\xea\xe7\xca\xa4\x2b\x8f\xd7\x12\x38\x4a\xf6\xcd\xfd\xda\x77\x82\x67\xc2\x23\xca\xcc\x2b\x80\xc7\x59\xed\xae\x0c\x8f\x6c\xf4\x5e\x01\x3e\x5d\x0d\xa7\x59\x6c\xb5\x9d\xd6\x42\xbd\xf9\x34\x0b\xcf\x6a\x41\xcf\xe2\x04\x92\x84\x3c\x94\x85\xe1\x7b\x20\x86\xce\x03\xa6\xee\x1a\x63\xe2\x69\xf1\xdd\xc0\x62\xec\xe0\x42\xa8\x32\xe0\x65\x80\x1a\x18\x61\x15\xd9\xef\x7f\xfb\x77\x4f\xdb\xb9\x5c\x9e\xef\x3b\xe5\xfa\xe8\xa6\x53\xbf\x2d\x19\xd4\xbc\x9b\x17\x14\xa3\xeb\xa2\xe0\xea\xaf\x89\x7f\xfd\xd7\x6f\xff\xf0\x7e\xc6\x14\x41\x4e\xe8\x4b\x15\x46\xc7\xd6\xa3\x8a\xe2\x8d\x68\x36\x4a\x55\xc7\xd5\xc8\x0e\xc0\xca\xfa\x78\x2e\x20\x5d\xfe\xea\x90\x77\xa9\xfa\xe8\x08\x38\xbd\xd0\x7d\x64\x15\xf8\xad\x37\x93\xa7\xe1\x27\xf8\x2c\x60\x72\x11\xc4\x28\x73\xa6\xba\x9e\x83\x3c\x0a\xbe\xd1\x87\xb8\xff\x4e\xbe\xd9\x6d\x76\x3d\xd7\x47\x45\x71\xd1\x83\xdc\x8b\x75\x01\xc0\x1b\x05\x78\xb7\x5a\xdd\x9e\x07\x58\x53\x5c\x17\x60\x48\x51\x74\x28\xc2\xb7\x0a\xf2\x6e\xb5\xea\x01\x59\x51\x5c\x17\x64\x91\x31\x22\x5d\x4f\x02\x90\xe3\x37\x8a\xf6\x72\xbd\x5e\xaf\x7b\x6a\xbf\x26\xb9\x3a\xde\x6f\x14\xe2\xd7\xf1\x4a\x6f\x6c\x92\x76\x5f\x21\xaf\x0a\xf7\x5b\x79\x83\x3a\x12\xee\x6f\xbb\x6a\x8d\xed\xdb\x5e\xe7\x35\xab\xfa\xbc\x3a\xa0\xeb\xd7\x94\xfd\x8d\xff\x3f\xb5\xc8\x17\x6a\xf9\xdd\xfb\x7e\xb7\xae\xdf\x7c\x83\x7e\x46\x83\x6f\x65\xe4\x3f\x4a\x53\x6f\xf0\xa0\xe3\xdf\x7a\x5d\x18\x8f\xdb\xdb\xdd\x9d\x03\x11\xbd\x74\x69\x4c\xce\x5e\x67\xae\x84\x8a\xf3\x9a\x52\x2e\x5d\x1a\x15\xd3\xb7\xbd\x32\x60\xdc\xbd\x58\xb5\x76\x69\x68\x74\x69\xb8\x00\x30\xaf\xb3\xe8\x58\x95\xb9\x5d\xe2\xbf\xb1\xf5\xbc\xfc\xab\xbd\xeb\xb5\x9f\xce\xa6\xe3\x05\x10\x7f\x7e\xf7\x79\x79\xc4\xaf\xd7\x81\x8e\x40\x5c\x7e\x09\x2f\x1b\x4e\xfd\xdb\x93\xdd\x03\x75\xb5\x40\xf5\x13\x55\x7d\xda\x57\x02\xe4\xd7\x70\x33\x52\x77\xe3\xed\x6e\xbc\xc5\x87\x51\x2f\x4a\x95\x1a\xdd\xad\x0e\x25\x05\x47\x01\x07\x61\x15\x1b\xd6\xa3\xb1\x1f\x5e\x25\xb3\x53\x52\x84\x18\xc7\x19\x10\xbd\x57\x60\x1b\x5c\x9b\x6a\xf4\x3c\xfd\x29\xbc\x39\x7d\x50\xfb\x0e\xde\xfa\x66\x6e\x02\xad\xb6\x65\x9d\xbd\x64\xad\xad\xcf\x9b\x3a\x3a\x9c\x5a\x17\x09\x18\x23\x10\x4b\x03\xa6\xde\x54\xad\xd4\x7c\x6d\x12\xb8\x3d\x3c\x31\x60\x68\xa2\xa1\xf6\xb7\xa8\x5b\xc6\x60\x75\x24\xeb\xba\x41\x52\x64\xbc\x0d\x6b\x82\xb2\x98\x1f\x64\xa8\xb5\x07\x49\xab\x99\x0b\xdb\x23\xbd\x91\x5c\xa7\x73\x06\xf4\xea\x46\x29\x35\xc7\x59\x84\xbe\xfc\xd9\x57\xbb\xb5\xb4\x50\x52\x50\x82\x52\x94\x71\x87\xa2\x96\xa4\xa1\x87\xa4\xfa\xcc\x2e\xb5\x7b\xf7\x54\x93\x71\x1a\x73\xc3\xa8\x0c\x17\xf7\x8c\x96\x76\xae\xdb\x86\x7d\x04\x4b\xaf\xbd\xc8\x31\x74\x4b\x1b\x78\x14\xcb\x71\xa1\x0e\xcf\xbb\x46\x52\xc6\x9c\xc1\x2e\x05\x9f\x79\x0e\x07\xc5\xfb\xd0\x60\xef\x3a\xc2\x26\xf6\x6a\x47\xb9\xb9\xe7\xfc\x4f\x73\x1c\xb5\xa2\x70\xd8\xf9\x1e\x01\x45\x33\x01\x0a\x4f\xc7\x43\xa2\x44\x3e\x51\xc7\xa1\x7c\x89\xda\xb8\xef\xcb\x9a\xd1\x9a\x6f\x2a\x95\x13\xb1\xd2\xf2\xe8\xd9\xd1\x33\x9b\x3f\x7e\x68\x38\xa3\x9c\x61\x53\xda\x5a\x1b\xdd\x78\x3a\x1b\x98\x36\xb9\x5c\xc5\xf9\x20\xf6\xb5\x62\x2f\x6d\xad\xf3\x0f\x60\xdf\x7c\xe8\x42\xff\x3e\xd5\x7f\x23\x30\x2d\x7f\x12\x80\xa2\x4c\xba\xf7\x1e\x3d\x06\x94\x70\xa0\x5f\x84\x98\xe9\x09\x52\xf0\xbc\xe0\xd5\x84\x93\x99\x03\xd7\x5e\x03\x49\x81\x2a\x3c\xcd\xf4\x78\x35\xe5\x6d\xc8\x95\x3e\x46\x98\x35\xb7\x5e\xc9\x29\xb1\x75\x0f\x8d\x57\x0f\x83\x1c\xa5\x7a\xfc\x2b\x63\x98\xe3\x23\xea\xd0\x1a\x7d\x29\x71\xeb\x54\x18\xe1\xf2\x32\x22\x7f\xd6\x43\xe9\x38\xb7\xf5\x35\x24\x05\x4d\x46\x8a\xf9\x71\xb9\xb4\x24\x55\x9f\x00\xa2\xa8\xba\x39\x95\xe2\x0e\x9c\xe7\xec\xc7\x8f\x1f\xfb\xc5\x8a\xfb\x9d\x25\xd9\x1a\xd8\xeb\xd0\x4f\xaf\xbb\x4c\x3c\x3b\x68\xd6\x10\x37\xf2\x4d\xa7\xd9\xc2\xf9\xbd\xfe\xbc\xf8\x73\x6d\x6c\xd3\x41\xe3\xa5\x37\x3f\x3a\x34\x25\x3a\x66\xfe\x1a\x8e\x73\x8c\x6f\xd6\x85\x7f\xee\x0c\x83\x6f\x12\xef\x42\xc6\xda\xaa\xac\x08\xdd\x68\x38\x5a\xbb\x9a\x00\xf0\x75\x28\x67\xab\x28\xd9\x82\x54\x42\x6f\x09\x6b\x67\x7b\xc3\x50\xff\xeb\xa3\x1a\x83\x35\xbc\x59\x23\xd7\x59\x2d\x00\xb4\xcd\x53\xcb\x7f\x73\xf3\x2f\xa0\x99\xe3\x0c\x80\xaf\x41\x09\x5b\x90\x82\x3c\xc7\x59\xdc\x12\x39\xf9\xc1\xf3\xbe\xe2\x3c\x05\xf9\x7b\x1b\x92\x8e\xe2\xda\x81\xcc\x8d\xd7\xcb\x25\xf0\xf8\x30\xf9\xa1\x57\x49\x59\xb3\xae\xa7\x66\xbd\x64\xb6\xd4\xb5\xca\xb5\xc3\xf7\x16\x8d\xc3\xda\xea\xef\xb2\x5a\xec\x16\x8d\x83\x3d\x7e\xe8\x63\x8e\x1f\x1c\x09\xa0\x56\x7b\x1d\x32\x3a\xaa\xbc\x03\x84\x01\xc2\xba\x6a\xbe\x94\xf6\xff\x00\x00\x00\xff\xff\x39\xf1\x7e\xd7\x26\x3a\x00\x00")

func templatesBaseTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesBaseTf,
		"templates/base.tf",
	)
}

func templatesBaseTf() (*asset, error) {
	bytes, err := templatesBaseTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/base.tf", size: 14886, mode: os.FileMode(480), modTime: time.Unix(1530642649, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_dnsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x95\x41\x6b\xe3\x3e\x10\xc5\xef\xfe\x14\x83\xe8\x21\x29\xa9\x49\x29\xff\x4b\xa1\xfc\x29\xcb\x1e\xb7\x97\xdd\xdb\xb2\x18\x45\x9a\x24\x2a\x8a\x24\x34\x63\xb7\xdd\xe2\xef\xbe\xc8\x72\x53\xa7\x4d\x76\xed\x42\x73\x4a\xa4\xd1\x9b\xdf\x53\xde\xd8\x8d\x8c\x46\xae\x2c\x82\xa0\x27\x62\xdc\x55\xda\xef\xa4\x71\x02\x9e\x0b\x00\x7e\x0a\x08\x37\x20\x88\xa3\x71\x1b\x51\xb4\x45\xf1\x5a\x1f\x64\x44\xc7\xd5\x6f\xef\x70\x50\xdd\x7f\x06\x87\x00\x34\xae\x65\x6d\xf9\x65\x23\x2f\x91\x8a\x26\xb0\xf1\x2e\x2d\xfd\xd8\x22\x38\xb9\x43\xf0\x6b\xe0\x2d\x42\xd6\x86\xa4\x0d\x6b\x1f\xf3\x5a\xf4\x8d\xd1\xa8\x21\x83\x42\x06\x05\xb3\x06\xc3\x80\x8f\x86\x98\xca\x0e\x51\x4b\x96\x20\xe4\x03\x55\xd1\xd7\x8c\xff\x5d\xf5\x8c\x3d\x71\x86\x55\xbe\x76\x9c\x5a\x9f\x3d\x37\x32\x96\x03\x33\x70\x93\x18\xe1\x7f\x58\xc2\x35\x5c\xb6\xa2\x28\x20\xb3\x1d\x2b\x6e\xbb\x8e\xbe\xe6\x50\x33\x08\x74\x4d\xa5\x1d\x75\x3b\x55\x3a\x53\x11\xc6\x06\x23\xe5\x9e\x8d\xb4\x75\x92\xf9\x29\xce\x9e\x29\x58\xc3\x33\xb1\x10\x0b\xb0\x5e\x49\x5b\x0e\xcb\xe7\xad\xf8\x95\x74\xbb\x1d\xea\xce\x76\x92\x46\xef\x6f\xf7\x34\x36\x5a\xdc\xa1\xe3\x99\xf2\x4e\x49\x9e\xbd\xbd\x87\x72\x08\x59\x9e\x97\xbd\xf0\x02\xac\x21\x9e\x09\x31\x9f\x2f\x60\x39\x87\xeb\xb7\x3a\xe9\x56\xcb\x77\x62\x19\xe0\xa4\x4c\x2b\xfa\xcb\x7b\x71\xf6\x77\xf4\x7b\x6f\x5c\xbe\x93\xb5\x95\xcc\xe8\xc6\x9a\x18\xb6\xe8\x11\xf6\x1c\xf3\x79\x72\x73\x5a\xfb\xb8\xb1\x69\x0d\x72\x0c\x22\x92\xaf\xa3\xc2\xa3\xe1\x1b\x0a\x8e\x8e\xe0\x25\x5c\xc3\xf2\x58\x04\x0f\x86\x35\x17\xb0\xdc\xe4\xa8\x00\xdc\x1d\xd4\xa6\xce\x46\xb7\x17\x5b\x4f\x8c\xfa\xa2\x03\x28\x00\xda\xd3\xc8\x11\x95\x8f\x5a\x80\xd0\x8e\x3e\xc2\xfa\x12\xd6\xae\x3e\xc7\xbb\x5f\xda\x07\xe2\x20\xc6\x6f\xdd\xbc\x3e\x4b\x6e\x40\xdc\x7d\xef\x16\xd8\xf6\xd1\xbf\x5a\x2e\x53\x8f\xcc\x48\xfd\x38\xbd\x9f\xa1\x7e\x84\xfe\x61\xf0\xc1\x58\xad\x64\xd4\xd5\xde\xe9\x78\xf6\xf3\x72\x04\xfd\x97\xbb\xdb\x6f\x5f\x47\x18\x48\x74\x76\x55\xaa\x75\x66\x8c\x65\xca\x4a\x6a\x36\xce\x07\xd1\x76\x2a\x3e\xd1\xf6\x73\x0c\x24\xe1\x69\xf4\x2b\x3f\x1d\x3f\x9d\x19\xc3\x7f\x3b\x92\x1d\x4d\x28\xef\xeb\x5d\x58\xf9\xc7\xee\x7b\xa8\x57\xd6\xa8\xca\x84\x71\x16\x58\x85\xa9\x0e\x58\x85\xcf\xf9\x03\x58\x85\x8f\xa5\xc8\x90\x3f\x3a\xee\x86\xbc\x95\xe9\x5d\x5d\x11\x6e\xd2\x4b\x81\xa6\xce\xf9\x79\xd2\xb8\x20\xdc\x7c\x82\x63\x43\xbe\xb7\x9b\x7e\x1d\x3a\xfe\x13\x00\x00\xff\xff\x3d\xa9\x5a\x27\xdf\x08\x00\x00")

func templatesCf_dnsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_dnsTf,
		"templates/cf_dns.tf",
	)
}

func templatesCf_dnsTf() (*asset, error) {
	bytes, err := templatesCf_dnsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_dns.tf", size: 2271, mode: os.FileMode(480), modTime: time.Unix(1541637957, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x57\xcb\x6e\xdc\x36\x14\xdd\xcf\x57\x10\x6a\x16\x6d\x1a\xa9\x93\xf1\x2c\xbc\x99\x95\x81\xa2\xdd\x14\x41\x93\x9d\x11\x10\x14\xc5\xd1\x08\xa6\x49\x81\xa4\xec\xba\x86\xfe\x3d\x20\xa9\x07\xf5\xa0\x1e\x13\x3b\x19\xc0\x93\x4d\x40\xf1\xbe\xce\x3d\x97\xf7\xf8\x17\x70\xf3\x27\xf8\xfc\xf9\xaf\x8d\x20\x92\x17\x02\x13\x10\xa0\x47\x09\x25\xc1\x85\xc8\xd4\x13\x4c\x05\x2f\xf2\x00\x04\xf8\x08\xa5\x3c\x05\xe0\x79\x03\x00\x43\xf7\x04\x54\xbf\x03\x08\xde\x3d\x3f\x20\x11\x11\xf6\x00\xb3\xa4\x0c\xf1\x31\x94\xf2\x14\xd2\x38\xcc\x98\x22\x82\x21\x1a\xd6\xce\x42\xeb\x6c\x03\x40\x42\x24\x16\x59\xae\x32\xce\xb4\x07\x9b\x02\xf8\xbb\x32\xd0\x37\x1e\x72\x0c\xb3\xc4\x89\x41\x39\x46\x34\xb2\xc7\x65\xb0\xd9\x00\x90\xb1\x54\x10\x29\x4d\x4a\x00\xe0\x2c\x11\x30\xa6\x1c\xdf\x49\x70\x00\xb7\xc1\x36\x32\xff\xfe\xd8\x06\x5f\xcd\xf7\x5c\x70\xc5\x31\xa7\x95\x43\x85\x4d\x22\x00\x1c\x05\xbf\x87\x39\x17\xca\x9c\xef\x76\xbb\x9d\x39\x56\xbc\x3e\x74\x8e\x4b\x1d\x96\xb8\x51\xbb\xd6\xdb\x11\xd3\xed\x58\xf4\xf0\x63\xb0\x20\x69\x13\x4e\xa1\xb4\x0e\xf6\x8f\xc6\xfd\x3c\xc0\x8d\x2b\x9a\x1d\x09\x7e\xc2\x94\x54\xfe\xb2\x94\x71\x41\x20\x3e\x21\x96\x12\x9b\x80\x6e\x6d\x15\xbb\xdc\x6c\x78\xa1\xf2\x42\xd5\xcd\x1f\x90\x42\x7b\x79\x40\xb4\xa8\x92\x1a\xf2\x26\xb2\x86\x91\xe9\x58\xb9\xe9\x71\x8c\xc6\x13\xbc\x1a\xfd\x35\xb5\xcb\x13\x17\x0a\x0e\x10\xd0\x95\x52\x8e\x12\x18\x23\x8a\x18\x26\x02\xaa\xa7\xbc\xef\xf2\x00\x02\x46\xd4\x23\x17\x77\xfa\x3a\x61\x28\xa6\x04\x62\xc1\xa5\x84\xff\x73\x46\xa0\xe3\x20\x63\x29\x38\x00\x25\x0a\x62\xe8\x66\xd1\x9d\xc8\xee\x88\xa8\xd4\x57\x65\x11\x33\xa2\xe4\x54\x21\xb7\x35\x60\xe6\x6a\x44\xe3\xea\x7f\x32\x7a\x6f\xe0\xfa\x3a\x86\x17\xa4\x99\x54\x84\x11\xd1\x03\xae\x5b\x33\x12\xac\x6d\x08\x8d\xeb\x26\x20\xc1\x4a\x5d\x71\xc3\x4d\x27\x9b\x8a\xdf\x2e\x4b\x1b\xb0\xbe\xdc\x7c\x32\xe3\x96\x90\x23\x2a\xa8\x82\x08\x9b\xb1\xb5\x14\x1a\xe0\x7b\x00\xc1\x91\x8b\x47\x24\x12\xcb\x70\x85\x44\x4a\x94\xa5\x43\x3f\x33\xe8\x7e\xec\xa7\x59\x8e\x02\xe0\x5a\xf8\xd8\xb3\x84\x25\xc3\xd9\x6e\x6a\xaf\x4b\x76\xde\x20\xcf\x03\x74\x22\x88\xaa\x13\xc4\x27\x82\xef\x2a\x3c\x86\x08\x02\xc7\xe1\xd8\x50\xd1\x18\x9a\xa1\x1b\x9b\xa6\xb6\x79\xfa\x8a\x9d\xa1\xa1\x79\x21\xe8\x8c\x75\xc2\x24\xf4\x7a\xe8\x74\x48\xdf\x92\x5d\x6f\xb7\xd3\xfd\xb2\x7e\x0d\x5d\xcd\x2e\xf9\x97\x17\x8a\x88\x7e\xeb\xc6\xf6\x89\x30\x37\x97\xad\x14\x7b\x77\xf5\x56\xb1\xc9\x5c\xc2\x62\xb9\x1e\xdb\x0d\xe6\xb0\x7c\xad\x90\xfb\xfd\xd5\x48\x4c\x7b\xfa\x8a\x41\x3d\x51\xdb\xb0\x17\xb8\x40\x17\xd1\xeb\xbb\x77\xa8\x8d\x72\xde\x1a\xb5\xb6\x33\x9b\xd4\x37\x51\x9e\x1d\xe4\x7b\x26\x1b\x34\xde\xd8\x3e\xad\xfa\x73\xbd\x5d\xb8\x55\xab\x9e\x4c\x2d\x56\x33\xe1\x3f\x7b\xad\x36\x75\xcd\x2c\xd7\x51\x34\xf6\xfb\xab\x97\x83\xc3\xbe\x02\x17\x82\xc7\x7e\x7f\x75\x1e\x20\x2f\x8b\xc8\x65\x41\x32\x8b\xc9\x50\x81\xf5\xc6\x66\x81\x0e\x6b\x9f\xdb\xeb\x6d\x4f\x8d\x75\x07\xe6\x65\xb4\x58\x4f\x80\x2d\x2f\xa9\xe9\xf4\xaa\x9a\xb4\x55\xb7\xa8\x5e\x8f\x7f\x7a\x55\x67\x96\x35\x52\xd7\x0f\x28\x6c\xb8\x40\xe7\x25\x73\x35\x78\xa3\x9a\xb7\x75\x32\x2d\x9c\x2b\x1f\x5e\xed\x5c\xf9\x99\x95\xcf\xa6\xb8\x25\x8f\xb3\x8d\xf2\x61\xd9\x7d\x3d\xa8\x2b\x0d\x3a\x16\xad\x60\xff\x72\xf3\x69\x85\x68\x57\x38\x5f\x25\xdc\x15\xce\x57\xab\x76\x9d\xd1\x0f\x93\xec\x60\x42\xce\xda\x6f\x1f\xb7\xbb\xfd\x40\x97\xd6\x9f\xae\x5e\x55\x4d\xcf\xfc\xd5\x70\x81\x4a\x7a\xbe\xdf\xdf\x2d\xa3\x5b\x0a\x9e\x27\xa5\x5b\xfb\x46\x4e\x1b\x42\xd9\xda\x1c\xef\xf5\xfa\x97\x10\xf3\x82\x29\xd3\x6f\xbf\xf8\x9e\x9a\x8c\xd1\x9f\xff\xd1\xb5\x20\xbe\x31\xf5\xdd\xc7\x6f\x56\x5d\x39\x7d\x9c\x52\x58\xc1\xbb\x67\x3d\xc1\xe0\x77\x60\xba\x18\x65\x2c\x21\xff\xd9\xdb\x53\xa2\xab\x6e\x79\xf3\xdc\xf8\x89\x51\xbe\xb8\x4a\x23\x94\xdc\x13\xa6\x7e\xf5\x3c\xe9\x4e\xe5\xef\x75\xed\x1f\xdc\xd2\x7e\x5b\x25\xde\xbc\xac\xf5\xb0\x53\xa5\xa1\x1f\xcf\xf6\xa9\x59\x00\xfa\x72\xb1\xb0\xba\x15\xe7\xa9\x0b\xed\x75\x5e\x5a\x38\xd8\x8f\xca\x82\xca\xcb\xb4\xb6\x70\x9c\x78\xf5\x85\xbe\x33\x27\x2e\xfc\x5b\xbf\x43\x91\xc6\xff\xb7\x00\x00\x00\xff\xff\xe1\xa9\xb5\x38\xee\x19\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 6638, mode: os.FileMode(480), modTime: time.Unix(1541791954, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConcourse_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x3d\x6f\xe3\x3c\x0c\xde\xf3\x2b\x04\xe3\x9d\x5e\x5c\x7c\x6e\xe2\x41\x4b\xa7\x4e\xb7\x1c\x6e\xb8\xad\x08\x04\x59\x56\x62\xa3\xaa\x64\x48\x72\x8a\xa0\xc8\x7f\x3f\x48\xb2\x15\x7f\xa5\xb5\xeb\x9c\xaf\x1f\x4b\x40\x8a\x14\xf9\x3c\x14\x49\x58\x52\x25\x4a\x49\x28\x08\xf0\x8b\x42\x8a\x92\x52\xe6\xfa\x84\x0e\x52\x94\x45\x00\x02\x22\x38\x11\xa5\x54\x14\xb1\x04\xe5\x5c\x53\xc9\x31\xeb\x1d\x7b\x5d\x01\xc0\xf1\x33\x05\xd5\xdf\x3d\x08\xfe\x7b\x3d\x62\x19\x52\x7e\x44\x79\x7a\x5e\x7b\x37\x6b\x96\xac\x6b\x37\xeb\xda\xcd\xda\xb9\x59\x01\x90\x52\x45\x64\x5e\xe8\x5c\x70\xe3\xe4\xa1\x36\x03\x3f\x2a\x1b\x73\xe8\x58\x10\x94\xa7\x8d\x9b\x98\x20\x98\x85\x4e\x7c\x0e\x56\x2b\x00\x34\x3e\x28\x1b\x15\x00\x3f\x4d\x5c\x1f\x0e\xe8\x6c\xbc\xb1\x7c\x4f\xc9\x89\x30\x5a\xb9\xcc\x0f\x5c\x48\x8a\x48\x86\xf9\x81\x2a\x70\x0f\x1e\x03\x93\x7d\xb0\xb3\x06\xe7\xd5\xea\x2d\x50\x91\x2c\x19\xbd\x8a\x2c\x8c\x1c\x9a\xfa\x54\x34\xd1\xcc\xf9\x41\x52\xa5\x4c\x44\x85\x14\x5a\x10\xc1\x2a\x8d\x26\x36\xce\xbd\x14\xcf\xa8\x10\x52\x5b\x29\x8c\x8c\x0b\x51\x0b\xbc\x88\xe4\xa9\x44\x09\x13\xe4\xc9\x45\x1d\x85\xf6\xff\x7b\x14\xec\x4c\x9e\x9d\x40\xf3\xd4\xe1\xd6\xcf\x21\x1c\x53\x16\xa1\x25\x63\x16\x1a\x9b\xcd\x66\x73\x0b\x3c\x8c\x9f\x1e\x22\x95\xf0\xab\x61\x12\xc7\xdb\x5b\x40\x12\xc7\xdb\x1e\x22\x4e\xf6\xd5\x00\xa1\x2e\xef\x21\x4c\xe8\x35\x48\xd6\x77\x7d\x44\xfa\x6f\xe6\xb3\x3c\x19\x96\x74\x92\xef\x77\xdc\x6e\xe3\x55\x99\x90\x1a\x0d\x75\x3b\x93\x38\x13\x38\x45\x09\x66\x98\x13\x2a\x91\x05\xed\x1e\x04\x9c\xea\x17\x21\x9f\xcc\x01\x55\x26\x9c\x6a\xd5\x76\xfd\x58\x27\x66\x95\x21\x4b\xaa\x5f\x2a\xfc\xdf\x06\xbe\x1b\x8a\x1c\xb1\x5c\x69\xca\xa9\xec\xf2\x57\x77\xba\x76\x2c\x58\xf2\x0b\x82\x2c\x69\xa1\x16\x62\xc9\xcf\x5d\x32\x7d\xde\xbf\x1f\x7e\x59\x5d\x4d\x5f\x43\x07\xa3\x95\x9d\x2d\x7b\x5c\x32\x8d\x30\xb1\xe3\xc5\xb5\xf2\x66\xc1\xd4\x9e\xf6\x42\xbe\x60\x99\x06\xee\x00\x96\x07\xaa\x2b\x7a\x3b\xd1\xa1\xa6\x32\xec\x64\xe7\xa3\x1d\x98\x08\x1d\xd3\x6b\xd0\x78\x82\xdf\xa3\x15\x46\xad\xd4\xab\x6e\xef\x61\xba\xa0\xe3\x47\xe7\x95\xb9\x99\x51\xcc\x74\x86\x48\x46\xc9\x53\x85\x90\x13\x9d\x90\xce\x24\x55\x99\x60\xce\xfa\x2e\xb2\xca\x92\xf7\xd5\x5e\x69\x8b\xfc\x88\x59\x1b\xde\xad\x53\xf6\x39\x6c\xb2\x38\x8c\xd9\xb5\x52\xba\x8c\x89\x05\x8a\xc9\x8e\x8d\xa5\xcb\xc9\x5c\x3a\xa3\xa0\x2e\x00\x8d\x2e\x29\x6b\xd2\x2e\xaa\x6a\x60\x4e\x2d\xab\x29\x4c\xfa\xe1\xb6\x00\x91\x66\xda\x2d\xcd\x63\x1c\x6f\x67\xd0\xe8\xd1\x19\xcd\xa2\xb1\x68\x93\xe8\x66\xfc\x6c\x0e\x27\xed\xb4\x30\x8e\x6f\xb2\xd5\xc2\x38\xee\xef\xb5\x4e\xf8\x19\xc6\xf4\x24\x4c\x6e\xb4\xc6\xc1\xa1\x3d\x0e\x7e\x9e\x45\xee\xad\x05\xc0\x97\xc5\x12\x2b\x80\x29\x93\xc5\x97\x00\x18\xc7\x73\xd6\x00\x0f\xd0\xf8\x45\xc0\x98\x74\x56\x01\xf7\x40\xfe\x66\xd7\x86\x4b\xb6\x6d\xf8\x2f\xfa\x36\x9c\xd7\xb8\xe1\xf4\xce\x0d\xfb\xad\x1b\x7e\xb8\x77\x8b\x52\x17\xa5\x9e\xf2\x35\xe7\x88\x59\x49\xe7\x35\x04\x93\xea\x1b\xd7\x37\xf1\x52\xed\x4b\x1f\x2d\x55\x23\xd7\x6c\x77\xcd\xb7\xd1\x26\x86\xc9\xa9\x36\x76\xfd\x9a\x6a\x04\x3f\x72\x93\x6d\x19\x15\x72\x00\xec\xae\xa2\x67\xbf\x37\x0d\x31\xd5\x7d\x66\xef\xb0\x50\x4a\x36\xca\x4d\xca\x15\xf2\xae\xfe\x04\x00\x00\xff\xff\x30\xc8\x26\xa1\x34\x14\x00\x00")

func templatesConcourse_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesConcourse_lbTf,
		"templates/concourse_lb.tf",
	)
}

func templatesConcourse_lbTf() (*asset, error) {
	bytes, err := templatesConcourse_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/concourse_lb.tf", size: 5172, mode: os.FileMode(480), modTime: time.Unix(1541445007, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIamTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xbc\x57\x51\x6f\xe3\x36\x0c\x7e\xae\x7f\x05\x61\xec\x61\x2b\x9a\xac\xed\xcb\x80\xe0\x8a\x43\xd1\x66\xc5\xb6\x1b\x56\x24\xc5\x3d\xac\x28\x0c\x46\xa6\x1d\x6d\xb2\xe4\x49\x72\xba\xac\xc8\x7f\x1f\x24\xd9\x4e\xd2\xd8\x4e\xbb\xe1\xee\xa5\x40\xfd\x7d\x24\x3f\x92\x0e\x49\xaf\x50\x73\x5c\x08\x82\x78\xa1\xcc\x32\xe1\x58\x24\x5c\x1a\x8b\x92\x51\x52\x6a\x95\x71\x41\x31\xbc\x44\x00\x29\x65\x58\x09\x0b\x57\x10\xc7\xd1\x26\x8a\x84\x62\x28\x8c\x87\x38\x16\xf7\x81\x7a\xaf\xd5\x8a\xa7\x94\x3a\xd6\x37\x2f\x2b\xd4\xe3\x5e\xaf\x70\xe5\x3c\xc1\x47\x38\x87\x09\x5c\xc0\xc6\x3b\x4d\xd1\x22\xc4\xf8\x6c\x7a\x84\x78\x91\x41\x8f\xc4\x82\xde\x10\x66\x13\x47\x11\x00\x53\x95\xb4\x81\xed\x75\x8f\x0f\x25\x07\x01\x9a\x8c\xaa\x34\xa3\xad\x08\xad\x06\x03\x93\x5c\x25\x3c\xdd\x24\x5e\x80\xe7\x46\x00\x25\xda\xa5\xa3\x7c\xff\x3a\xf8\x05\x8c\x60\x40\x40\x04\x20\x78\x46\x6c\xcd\x04\xf9\x58\x00\x4c\x13\x5a\x4a\x16\x94\x29\x4d\x49\x4a\xc6\x6a\xb5\x86\x2b\xb0\xba\xa2\x08\x60\xe3\x6c\xd0\x98\xaa\x20\x1f\x3d\x29\x95\xe0\xcc\x11\x3e\x7c\x98\xfe\xf6\x63\xe4\x9c\xc4\x9f\x49\x1b\xae\x64\x3c\x81\xf8\xf2\xfc\xe2\x72\x74\x71\x3e\xba\xf8\x21\x3e\x73\xd0\xdc\xa2\xa5\x82\xa4\x8d\x27\xf0\xe8\x03\x86\xb0\x00\xf1\x35\xb3\xb5\x91\xb1\x66\x72\xed\x63\xcc\x5c\x82\x67\x0d\xe3\x5e\x73\xc9\x78\x89\x22\x9e\xb4\x66\xce\x27\xe9\x15\x67\xe4\x2c\x89\x5d\x8e\xb1\xc0\x7f\x94\xc4\x67\x33\x66\xaa\x88\x6b\xda\xa6\x75\x32\xcd\x32\x62\x2e\x7c\x7c\x2d\x84\x7a\xde\x7a\x9f\xf3\xd4\x3d\x0d\x16\x9b\x08\xe0\x29\xda\x44\x2e\xa7\xce\x36\x85\xbc\xdf\xda\xa8\x9a\xfd\xff\x5a\xf5\x05\x4a\xfd\xb8\xad\x22\xb1\x4b\x57\x74\xc5\x38\x5a\xba\x4e\x53\x4d\xc6\xb4\xc5\x69\x70\x6b\x91\x2d\x3f\x2b\x51\x15\xf4\x1a\xbb\x51\xe5\xfa\xa7\x02\xf3\x43\xc0\xbf\x51\xdd\x46\xb7\x24\xc8\xd2\x5c\x62\x69\x96\xca\x76\xa3\x7d\x96\x86\x69\xbe\x68\x94\xd2\x81\xd6\x96\xb0\x42\x2e\x70\xc1\x05\xb7\xeb\xdf\x95\xec\x27\x7a\xf1\xfd\x68\xfd\x3b\xef\x25\xcc\x28\xe7\x4a\xf6\xc2\x73\x62\x95\xe6\x76\x7d\xa7\x55\x55\xf6\xb3\xea\x4a\xf4\x13\xaa\x85\xa4\x7e\x38\xd4\xaa\x03\x1e\xe8\x9b\x6f\x4f\x5f\x0b\x02\xfa\x80\xf9\x81\xcf\x5f\x55\xca\xb3\x75\x53\x96\x6b\x6b\x35\x5f\x54\xf6\xc0\xfd\xac\x92\xbd\xa5\x7b\x20\x5d\x70\x89\xb6\xbf\xb8\xae\xa8\xc6\x92\xee\x7c\xb1\x6e\x49\x0f\xc1\x37\xce\xa3\x98\x97\xca\x36\xee\x67\xf4\x57\x45\x66\xa0\xb8\x6f\xe0\xd6\xcf\x77\xa9\x07\x9c\x50\xb4\x99\xea\x28\x47\xfb\xb6\x38\xf0\xc1\x2d\xc2\x8e\x08\xa5\x40\x56\x9b\x47\x27\x00\x4f\x67\xee\x6f\xc7\xe0\x72\x4f\x67\xf5\x64\x72\xcf\x4f\xeb\xd9\x75\x16\x9d\xbc\x78\x70\xe7\x77\x7e\xe2\xfd\x73\x2c\x26\xf7\x68\x8c\x9f\xab\xef\xf5\x7d\x32\xe0\x98\x04\x1a\xcb\x99\x50\x98\x2e\x50\xa0\x64\x5c\xe6\x93\xd3\xff\x14\xa2\x29\xc6\x76\xc2\xc3\xd0\xdc\xae\xe1\x8e\x91\xd6\x62\x7f\x16\x66\x32\xa3\xa9\x64\x7a\x5d\xda\xd3\x57\x96\x2d\xe3\x8e\x24\x69\xb4\x74\x8b\x16\x7f\xa1\x75\x2f\x2f\x74\xf7\x4e\xa3\xb4\x7d\x94\xa6\xcb\xde\xcd\x1e\xe5\xe9\x95\xec\x9d\xfc\x3b\x84\xbf\x36\x6e\xff\x3b\xba\x9e\x76\x76\x73\x82\x7e\x6a\xfb\x4d\xb0\xbb\xae\x1c\xa5\x76\x77\xe4\xba\xa8\xdd\x68\x19\x88\xfb\x2b\xd0\x9f\x42\x63\xd4\xf2\xe0\xf2\x39\xb2\xd1\x3a\x75\xbf\xe3\x04\xab\xb5\x8e\x3c\xde\xe4\xb3\x27\xd0\x3d\x09\xf2\x9c\xe5\x7b\xf5\x75\x1c\x47\x3c\x97\xee\x2a\x62\x4b\x94\x39\x19\xb8\x82\xc7\xd8\x79\x8e\x9f\xfc\x65\x74\x90\x50\x26\xd4\x73\x22\x54\xee\x92\x58\x88\x90\x83\x50\x79\x92\xbb\x1d\x90\x6c\xb3\x71\x5c\x26\x54\x95\x3e\xa3\x65\xcb\xa4\xa5\x8c\x17\x0b\xd1\x48\xf7\x57\x6f\x68\xab\x6b\x04\x74\x64\xda\x84\x33\x75\x37\x00\x56\x25\x4b\x78\xda\xbe\x3f\x3b\xf7\x68\x40\x3c\xc9\x6a\xcc\x32\xce\x12\xbb\x2e\x29\x90\x66\xd3\x9f\xa7\x37\x0f\x1d\x1d\xea\x12\xb9\x9b\x9c\xd3\x9a\x94\x9a\x32\xfe\xf7\xb6\x4f\x66\xa9\xb4\x4d\x9a\x6e\x09\x95\x8f\x82\xdd\xe0\xf9\xdb\xe6\x32\xd4\x79\x47\x72\x0e\xcd\x28\xbc\xaa\x5f\xec\x34\x6d\x4e\xc3\xe3\x47\xe4\xf1\x13\x75\x55\xb2\xad\xf0\x63\xc7\x6a\xef\x4d\xfc\xb6\x23\x75\xa7\x0c\xef\xaf\xe9\xf6\x66\xed\xf9\x65\x6d\xdf\x37\xfe\x55\x2e\x54\x17\xaa\x9e\xbe\x9f\x54\xee\x0f\xa9\xdd\xdd\xb9\x0f\xcf\xad\x26\x2c\x0e\xf0\xfb\xca\x7e\x52\xf9\x74\x45\x72\x7f\xb5\x7b\xb0\x19\xdb\x8d\xf7\x41\x46\x08\x60\x9a\x9e\x3d\x1d\x7f\x37\xba\x56\xf5\x7e\x07\x55\x65\xcb\xca\xfa\x35\xdd\xf3\x55\xbc\x42\x51\xd1\xf0\x87\x25\x7c\x84\x3f\x14\x97\xdf\xc6\xf1\x19\xb8\xef\xdb\x71\xdf\x6c\x0d\xa3\xf1\xd4\x4f\x98\xef\x60\xb2\xb5\x7a\x93\x81\x9f\xe0\xff\x06\x00\x00\xff\xff\x6f\x9b\x07\x6e\xce\x0f\x00\x00")

func templatesIamTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesIamTf,
		"templates/iam.tf",
	)
}

func templatesIamTf() (*asset, error) {
	bytes, err := templatesIamTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/iam.tf", size: 4046, mode: os.FileMode(480), modTime: time.Unix(1519854618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesIso_segmentsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x59\x4b\x8f\xdb\x36\x10\xbe\xef\xaf\x18\x08\x39\xc4\x89\x2c\xc8\xb6\x9c\x6a\x0b\x6c\x8b\x22\x39\x06\x69\x80\xa4\xbd\x2c\x16\x04\x25\xd1\x32\x11\x2e\x29\x90\x94\xd3\x24\xf0\x7f\x2f\x48\x2a\xb2\x5e\x96\x1f\xbb\x9b\xb8\xa8\x0f\x86\x4d\x71\x5e\xdf\x7c\x1c\x6a\xc8\x0d\x96\x14\x27\x8c\x80\x47\x95\x60\x58\x53\xc1\x91\x22\xf9\x3d\xe1\x5a\x79\xf0\xed\x0a\x40\x7f\x29\x08\x54\x9f\x1b\xf0\x94\x96\x94\xe7\xde\x15\x40\x46\x56\xb8\x64\xfa\xfb\x83\xd0\x8d\xa9\x54\xd2\xc2\xa8\x31\x63\x7f\xda\x5f\x98\xb1\x2f\x90\x4a\x82\x35\x01\x0c\x4c\xe0\x0c\x12\xcc\x30\x4f\x89\x04\xcc\x33\x78\xf3\xee\x03\x10\xae\x25\x25\x0a\x56\x42\x02\x06\x45\x79\xce\x08\xd4\x2e\x41\xe5\x52\x00\x7f\x63\x46\x33\xd8\x60\x56\x12\x05\x58\x12\x08\x41\x48\x98\x05\xde\xd5\xf6\xea\xaa\x15\x0c\xd2\x02\x25\x42\xad\x51\x21\x64\x37\x96\x1b\xf0\x18\x55\xba\x19\xc5\x0d\xdc\xce\xe7\x3e\xbc\x8a\x5f\xc5\x3e\xcc\x97\xcb\xa5\x0f\xd1\xdc\x8c\xcc\x97\xf3\x65\x78\x37\xa8\x5e\xad\xb1\x24\x19\xd2\x69\x71\xbc\x91\xeb\xf0\x3a\xf4\xe1\x3a\xbc\x9e\xf9\x10\x87\xf1\xdc\x87\x78\x11\x86\xf6\xdb\x8c\xc4\xf1\xb5\x0f\x71\x14\x2d\x7c\x58\x84\x66\x3c\xb2\xbf\xe3\x30\x0e\x7d\x58\x44\xcb\x5f\x8c\xec\x7c\x61\xbf\xe7\xce\xc5\x51\xdf\xca\xec\x04\xdf\x2a\x1f\x16\xa1\xf1\xea\x55\xe8\xa2\x66\x22\xc5\x4c\x59\x69\xa3\x1a\x7f\x45\xa9\x28\xb9\x99\xef\x3d\xfb\xb6\xc1\x32\xe8\x13\x07\x7e\x83\x10\x7e\x07\x46\x78\xae\xd7\xcf\xcd\x1c\xbc\xc1\x94\xe1\x84\x32\xaa\xbf\xa0\xaf\x82\x13\x35\x81\x5f\x21\xdc\xda\xb4\x49\xa2\x44\x29\x53\x02\x1e\xfe\xac\x90\x2a\x13\x4e\xb4\xe7\x02\x71\x7f\x2a\xe7\x9d\xdd\xe6\xc7\xfa\x60\x1d\x0c\x9a\xbe\x6d\x4d\x5c\x9b\x22\x45\x34\xdb\x33\xdb\x3d\xb4\xf3\x52\x9a\x49\x94\x30\x91\x7e\x6a\xcd\x33\xc3\xce\xba\x0d\xc0\x08\x98\x21\x1f\x22\xdf\x39\x12\x50\x9e\x91\x7f\xe0\xe5\xa1\x30\x5f\xc2\x6c\x62\x0d\xf5\x1e\x3a\x43\x84\x11\x03\xda\x1e\xf9\x96\x31\xa3\xc7\x24\x11\xe7\x2e\x1f\x00\xef\xf0\x3d\xd9\x65\x82\xf0\x8d\x89\x6a\x4a\x95\x98\x3a\xdf\x9f\x7d\x6b\x88\x5b\x2f\xb6\x7d\xc4\xa5\x28\x35\x41\xda\xd0\x07\x61\xa5\x44\x4a\x6d\x3a\x3d\xf0\xdc\x93\x43\x89\x18\xcb\x82\x93\xab\x13\xd1\x8a\x78\x97\xed\xa0\x61\x22\x78\x11\xd0\xac\x17\x36\x40\xd3\x4b\x9a\x39\x4d\x1d\xef\x03\xca\x35\x91\x1c\xb3\xf6\x60\x36\x44\x33\x96\x54\x14\xb3\x53\xa5\xfd\x3f\x4c\xb2\xce\x67\x84\xf7\xd6\x4f\x6e\x52\x72\x94\x02\xb5\x16\x52\xa3\x66\xd2\x9c\x2f\x53\x96\x18\x45\xa6\x50\xa2\xef\x85\x12\x35\xcb\xf0\x4e\x11\x27\xfa\xb3\x90\x9f\xcc\x74\xc2\x2d\x34\xa9\x14\x4a\x59\xee\xa0\x86\x02\xca\x73\xb8\x01\x2d\x4b\x62\x96\x71\x85\xd2\x88\x87\x2b\xcc\x14\xa9\xd3\xa7\xc6\x82\xb9\xad\xf2\x50\x65\x92\x25\xad\x44\x6e\xbd\xbb\x21\xec\x91\xa9\x3e\x84\x13\xd9\x4d\x02\x8a\xc3\x66\x1e\x0e\x81\xdd\xc6\x08\x4b\xbe\xe3\x05\x4b\x82\x96\xe6\x00\x4b\x6e\x65\x4c\x39\xec\x06\x11\x87\xe6\x81\x14\x5a\xa4\x82\xb5\x10\xfe\xf8\xfa\xbd\x5d\x74\x55\x99\x44\x38\xb5\x1b\x92\x5b\x7e\xbd\xa4\xdc\x80\xb7\x12\xf2\x33\x96\x99\xe7\x26\x60\x99\x13\x8d\x72\x29\xca\xa2\xeb\x1e\x6a\x3e\x0c\xba\x28\xd4\xee\x0e\x2c\xd8\x31\xfc\xa2\x68\xf1\x33\x00\x8c\xa2\xc5\x65\x21\x18\x45\x8b\xf3\x21\xfc\x59\x18\x5e\x1e\x88\x07\x51\x6c\x4a\x3f\x70\x31\xd7\x95\xf3\x98\x0a\x39\x8d\xc3\x16\x8e\xdd\x35\xfc\x1d\xb3\xc6\x8b\xc0\xd0\xfe\x7f\x05\xb0\x26\x98\xe9\x35\x4a\xd7\x24\xfd\x54\x01\x3a\xa0\xe5\x8c\xe8\x4f\xa4\xd1\x69\xe1\x1b\xe5\xed\xf8\x3b\xec\xb9\x08\x00\x9e\x16\x81\x01\x08\x7e\x38\x06\x8a\xa4\xa5\x34\xaf\x6b\x4d\x08\xba\x83\xc7\x42\xb0\xc3\x60\xf8\x9d\x2e\x6f\x84\xb2\x27\x90\x4e\x07\xf6\x5e\xd2\x8d\xe9\xbb\x7a\xad\xd4\x09\x6f\x92\x55\x30\x53\x17\xcc\x29\x30\xb8\x1e\xe4\xa9\xd0\xb0\xda\xcf\x01\xe5\x83\x95\xec\x63\xa2\x4e\x00\xa5\x32\x7e\x3a\x36\x48\x96\x8c\x78\x43\xfd\x76\xdd\xb1\xba\x19\x47\xc1\x04\x2f\x9a\xfd\x47\xaf\xed\x9d\x0c\xc6\xff\xf1\xf5\x7b\xd0\x12\xaf\x56\x34\x85\x95\x14\xf7\xe0\xc8\x05\x5a\x80\x11\xb5\x22\x1d\xa7\x77\x9d\x54\xbd\x75\xb4\x67\x04\xd6\x68\x67\xac\x6a\xb1\x06\xde\x5d\x6b\x5d\x94\xe7\x92\x28\xe5\x0d\x6e\x7c\xbb\x69\x3a\xb5\xe8\x6a\x81\xfa\x3b\x27\x74\x1b\x8b\x41\x28\x06\x5a\x0a\x13\xfb\xa0\xbe\xb3\xb4\xb9\x94\x77\xb3\xdd\x6c\x55\xba\xe8\xf4\x2a\xc5\x9e\x5e\xe5\x14\x02\x35\xce\x24\x1e\x4a\xa3\xee\xf1\xc6\xc9\x64\xea\xac\xd2\x73\x58\xb5\xb7\x8c\x5c\x00\xb7\xba\xf8\x3c\x06\xc3\x8e\xd0\x79\x51\x3c\x2b\xb3\x47\xe3\x59\x7d\x54\x35\xcc\xb3\xbf\xde\xfc\xd7\x79\x56\x66\x0f\xe2\x59\x8d\xcf\x23\xf2\x6c\x4c\xe7\x65\xf0\xcc\x96\x5c\xcc\x18\xaa\x72\x7f\x0a\xdb\x06\x79\xf4\xc7\xdb\xb7\x07\x37\xbf\x8c\x14\x84\x67\x0a\x09\xde\x83\xf3\x76\x20\x82\xa1\xbd\xcf\xbb\xbb\xbc\x4d\x74\x3a\x3b\xc0\x95\x70\x9c\x9e\xe1\x4f\x60\x45\x45\xd4\x8c\x92\x5c\xa0\x24\xb1\x9c\x70\x99\x26\x19\x4a\x09\x63\xea\xc1\x8c\xe8\xed\x60\xce\x26\x58\x9b\x90\x24\xaa\xae\x31\xf9\x59\xec\x18\xe8\x08\xce\x22\xc7\x3e\x24\x1f\x73\x13\x1c\x21\xc7\x2c\x0e\x67\xe3\xfc\xa8\x66\x9c\x47\x91\xfd\xc5\xf7\x48\xa6\x70\xac\x9f\x80\x1c\xbd\x72\xc1\xb1\x6e\x6e\x3b\x67\xee\x37\xc6\xd9\xff\xcd\x3a\x17\xa5\x2e\x4a\x0d\x5e\xba\x42\xed\x03\x02\xd3\xde\xb9\xe4\xd8\x1b\xbd\xf6\x6e\x95\x0a\x9e\x62\x77\x4b\xd0\x3b\x46\x7b\x11\x18\x51\x1f\x18\x55\xfa\xb9\xe7\x4d\x26\x3e\x84\x93\x31\x63\xad\x13\x30\x23\xab\xda\x76\x6f\x6d\xbf\xb7\xcf\xfa\x81\xa3\xda\x3d\xde\xf8\x67\xeb\x8c\xa2\xc5\x53\x28\x1d\xd7\x7a\xd7\x44\xaf\x9f\x4d\x44\xb3\x63\x52\x75\x98\x15\xee\x7e\x67\x24\x73\xd5\x25\x52\x7d\x75\x84\xee\x71\x51\x50\x9e\xf7\xcc\x5b\x28\xbe\xd2\xe2\x1e\x17\xcf\xdb\xb7\x10\xed\xfb\xa4\xde\xb5\xda\xd6\xf3\x61\x4c\xc0\x10\x77\x62\x9a\xf9\x11\xbf\xec\xbd\xe1\x0f\xf7\x6c\x77\x5b\xb9\xcf\xc3\xc1\x42\xfa\x80\xe4\x0d\xd6\xe5\x7d\x39\xfc\x37\x00\x00\xff\xff\x6f\x92\x17\x10\x4f\x20\x00\x00")

func templatesIso_segmentsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesIso_segmentsTf,
		"templates/iso_segments.tf",
	)
}

func templatesIso_segmentsTf() (*asset, error) {
	bytes, err := templatesIso_segmentsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/iso_segments.tf", size: 8271, mode: os.FileMode(480), modTime: time.Unix(1541635854, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesLb_subnetTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x93\x4d\x6e\xfb\x20\x10\xc5\xf7\x3e\xc5\x08\x65\xf1\xff\x48\x68\xd4\x55\x37\xb9\x42\x2f\x50\x45\x08\xe3\xa9\x83\x4a\x20\x32\x63\xa7\xa9\xe5\xbb\x57\x80\x15\xdb\xb5\xd3\xa6\xc9\xc6\x02\xe6\xf7\xde\x63\x86\x0a\xbd\xab\x2b\x85\xc0\xe4\xd9\x0b\x5f\xe7\x16\x89\x01\x33\x79\xff\xed\x19\xb4\x19\x80\x72\xb5\x25\x18\xff\x76\xc0\x56\xad\x41\x5b\xd2\xe1\x4f\x23\x2b\x2e\x1b\xa9\x8d\xcc\xb5\xd1\x74\x11\x1f\xce\xa2\xff\xdb\xb1\x0c\xa0\x39\x29\xa1\x8b\x79\xa5\x53\xd2\xf0\xb4\x19\xcf\x29\x5d\x54\x22\x37\x4e\xbd\x4d\xce\x85\xe5\xe4\x24\xaa\x84\x82\xb0\xb4\x86\xa7\x75\x32\xc5\xb5\x2d\xf0\xfd\xff\x63\x52\x9b\xb9\x48\x14\x34\x78\x44\x4b\x37\x8c\x4e\x48\x81\x93\x01\x90\x2c\x7d\x4c\x0e\xf0\x2c\x8f\x3d\x26\x94\xa3\x6d\x82\xe5\x8d\xc9\x37\xc9\xd7\xaa\x1d\x55\x47\x13\x5d\x00\x18\xfd\x8a\xea\xa2\x0c\xf6\x14\x5d\x5a\x57\xa1\x50\x07\x69\x4b\xf4\xb0\x83\x17\x36\x44\x66\x6b\x60\x33\x5f\x6c\x1f\x59\x5d\x96\x4d\x9b\x54\xb9\x9a\x50\x90\xcc\x0d\xa6\x4e\x4d\x16\xda\xe1\xce\x97\x2e\x7a\x99\x76\x83\x53\xa0\x27\x6d\x25\x69\x67\xc5\xa8\x3f\x3b\x60\x5b\x1e\xff\x0f\xdb\x90\xb7\x94\x84\x67\x79\xf9\xd2\xe6\x24\x1f\x24\xb4\x25\xac\x2c\x92\xe8\x0f\x72\x5d\xf2\xbe\xeb\x23\xc9\x71\xf9\xb5\x74\xb4\xcf\xa7\x0e\xf9\x37\x71\x7a\xa0\xf4\xde\x29\x1d\xed\x33\x60\x69\xe7\x87\xc1\xbe\x77\xaa\x13\xe3\x6a\x79\x32\x64\xc3\x43\xe2\x83\x1a\xff\xc7\x75\x31\x1b\xb4\xd9\x05\xfc\x26\xb8\xab\xe9\x54\xd3\xe8\xad\x0a\x5d\xf4\xa9\x1a\x69\x6a\x8c\x33\x96\x68\xcb\x76\x3a\xb6\x5f\xe6\xcc\x53\xdf\x8f\x9d\xd5\xde\x54\x89\x4f\xfb\x7e\xf0\x30\x80\x89\xf8\x19\x00\x00\xff\xff\x0b\x56\xd0\x1c\xba\x04\x00\x00")

func templatesLb_subnetTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesLb_subnetTf,
		"templates/lb_subnet.tf",
	)
}

func templatesLb_subnetTf() (*asset, error) {
	bytes, err := templatesLb_subnetTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/lb_subnet.tf", size: 1210, mode: os.FileMode(480), modTime: time.Unix(1538085125, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesSsl_certificateTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x41\x6e\xc3\x20\x14\x44\xf7\x9c\x62\x84\xba\xee\x0d\x72\x16\x84\xf1\xb8\xf9\x2a\x31\xd1\x87\xd0\xa2\x88\xbb\x57\xc6\x1b\xa7\x92\x37\x61\x83\x04\xf3\x46\x6f\xaa\x57\xf1\x53\x24\x6c\xce\xd1\x05\x6a\x91\x45\x82\x2f\xb4\x78\x1a\xa0\xb4\x3b\x71\x81\xcd\x45\x65\xfd\xb2\xa6\x1b\x73\x4a\xb8\x70\xf5\xb2\xbe\xc1\xdd\x55\xea\x76\x7f\xb3\x9d\xd2\xca\x9c\x1e\x1a\x08\xeb\x7f\xb2\x13\x7f\x73\x99\x5a\xa9\xaf\xca\x36\x4e\xe3\x61\xaf\x59\xfd\x6d\x2b\xe7\x22\xbf\x5b\xdb\xc7\xb3\x7a\xfd\xcc\xd7\xa4\xc5\x71\xad\x4e\xe6\x6e\x8d\x01\x8e\x2a\x53\x9a\x1b\x0e\xe1\x57\xd3\x6e\xff\xc5\xc7\xe2\xd3\xf8\xfe\x3d\xa0\xc3\x44\xec\xe7\x14\x3a\x44\x77\xbf\x28\x0b\x43\x0b\x91\x63\x14\x10\x94\x43\x95\x4b\x52\xba\x99\xb9\x68\x6a\xb8\xa0\xe8\x83\x06\xe8\xa6\x9b\xbf\x00\x00\x00\xff\xff\x4f\x95\x65\x5c\xd6\x01\x00\x00")

func templatesSsl_certificateTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesSsl_certificateTf,
		"templates/ssl_certificate.tf",
	)
}

func templatesSsl_certificateTf() (*asset, error) {
	bytes, err := templatesSsl_certificateTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/ssl_certificate.tf", size: 470, mode: os.FileMode(480), modTime: time.Unix(1519854618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVpcTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xd1\x6a\xe3\x30\x10\x45\xdf\xf5\x15\x17\xb1\x0f\xc9\xb2\x6b\xb2\xaf\x81\x6c\xff\xa0\xfd\x04\xa1\x48\x53\x67\x5a\x65\x64\x24\xd9\x6d\x08\xfe\xf7\x22\xd9\x69\x21\xf4\xa1\x03\x36\x66\xe6\x0e\xf7\x8c\xef\x64\x13\xdb\x63\x20\x68\x7a\xe7\x5c\x58\x7a\x33\x0d\xce\xb0\xd7\xb8\x2a\xa0\x5c\x06\xc2\x5a\x07\xe8\x5c\x12\x4b\xaf\x15\xe0\xe9\xd9\x8e\xa1\xdc\x06\x4b\x2b\xbb\xc4\x43\xe1\x28\xb5\xf5\xd4\xbe\x6c\x08\x17\x8c\x99\x60\x05\x37\x07\x4c\x83\xd3\x6a\x56\x2a\x44\x67\x43\x6e\x46\xd5\xd4\xc5\x51\x4a\x5d\xfd\x75\x0d\x24\x7d\x39\x6d\x26\x9b\xba\x3b\xae\x2d\xfe\x63\x87\x07\xec\xb0\xc7\xbf\x59\xaf\xab\xec\x57\x90\x9f\xac\x7e\x33\xc2\x1e\x2f\x91\x65\xa3\xa1\xff\xc0\xbe\xe5\xda\xee\xea\xf3\xbb\x63\xbf\x9d\x1b\x6d\xa2\x1c\xc7\xe4\x08\x7a\x15\x68\xe8\xf6\xae\xfc\x0b\xfb\x5d\x2d\x3c\xf5\xc8\xee\xf3\xbe\x86\xec\xd8\x27\x73\x0c\xd1\xbd\xde\xab\x2b\x5b\xd3\xb2\x4f\x4d\xca\x92\x8b\x15\x47\xa6\x90\x58\x71\x97\x9b\x74\x0d\xa0\x4a\x48\x6a\x82\xc6\x4b\x36\xa7\x98\x8b\xd8\x33\x65\x1c\x50\xd2\x48\xaa\x66\x68\xfb\xe5\x1f\x03\x8f\xf6\x4c\x5f\x3e\x24\x93\x61\x3f\xff\x6d\x71\x00\xb3\x9a\xd5\x47\x00\x00\x00\xff\xff\xe1\xdc\x0f\xba\x0f\x02\x00\x00")

func templatesVpcTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVpcTf,
		"templates/vpc.tf",
	)
}

func templatesVpcTf() (*asset, error) {
	bytes, err := templatesVpcTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vpc.tf", size: 527, mode: os.FileMode(480), modTime: time.Unix(1519854618, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/base.tf": templatesBaseTf,
	"templates/cf_dns.tf": templatesCf_dnsTf,
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/concourse_lb.tf": templatesConcourse_lbTf,
	"templates/iam.tf": templatesIamTf,
	"templates/iso_segments.tf": templatesIso_segmentsTf,
	"templates/lb_subnet.tf": templatesLb_subnetTf,
	"templates/ssl_certificate.tf": templatesSsl_certificateTf,
	"templates/vpc.tf": templatesVpcTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"base.tf": &bintree{templatesBaseTf, map[string]*bintree{}},
		"cf_dns.tf": &bintree{templatesCf_dnsTf, map[string]*bintree{}},
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"concourse_lb.tf": &bintree{templatesConcourse_lbTf, map[string]*bintree{}},
		"iam.tf": &bintree{templatesIamTf, map[string]*bintree{}},
		"iso_segments.tf": &bintree{templatesIso_segmentsTf, map[string]*bintree{}},
		"lb_subnet.tf": &bintree{templatesLb_subnetTf, map[string]*bintree{}},
		"ssl_certificate.tf": &bintree{templatesSsl_certificateTf, map[string]*bintree{}},
		"vpc.tf": &bintree{templatesVpcTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

