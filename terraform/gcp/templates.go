// Code generated by go-bindata.
// sources:
// templates/bosh_director.tf
// templates/cf_dns.tf
// templates/cf_lb.tf
// templates/concourse_lb.tf
// templates/jumpbox.tf
// templates/vars.tf
// DO NOT EDIT!

package gcp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBosh_directorTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\x51\x6e\xa3\x30\x10\x86\x9f\xc3\x29\x46\xd6\x3e\x36\x34\x65\x21\x89\x2a\xf5\x24\xab\xc8\x32\xe0\x50\xb6\x0e\x46\xc6\x24\x95\x2a\xee\xbe\x32\xb6\x81\x04\x82\x9c\x6c\xa3\x2a\x0f\x10\xf8\xe7\xf7\xcc\xe7\x19\xc3\x6b\x59\xd6\x12\x50\x41\xe5\x89\x8b\x0f\x5c\x90\x03\x45\xf0\xe5\x01\x00\x1c\x09\xab\x29\xbc\x01\xfa\xf5\x95\x71\x9e\x31\x8a\x13\x7e\x28\x6b\x49\xb1\x51\xfb\x71\xcc\x96\xf6\x5e\x45\x36\xc8\x6b\x3c\xcf\x7a\x56\x75\x7c\x9b\x6d\x1f\xd0\x3a\xeb\xbf\x13\xc6\x31\xaf\xde\x31\x2f\x69\x81\x25\xc9\x1c\xbd\xf7\xb9\xa0\x27\xc2\x98\xaf\x82\x97\x2a\xf8\x9a\x71\x9a\x0b\x9a\x48\x2e\xce\xcc\x17\xae\xce\x36\x7a\xc2\xfd\x6f\x7d\x28\x63\xfe\x79\xd5\xf7\x48\x84\x4f\x8b\x23\xce\xd3\x66\x69\xb4\x67\xf1\x79\x21\xa9\x28\x08\xbb\xa7\x6a\x1b\x3b\x91\x56\x57\x2f\x49\x53\x41\xab\xea\x3c\xad\x77\x29\xcb\xea\xf5\xf9\x79\x64\x6d\xd4\xba\x6a\xfa\xa9\xed\x97\x79\xe9\x9b\x17\xcd\x6b\x10\x45\x51\xd4\x2e\x25\x68\xc5\x6b\x91\x50\x40\xd3\x8d\x84\x00\x0d\x5a\x49\x97\xa5\x12\x5d\x2c\xc6\x64\xac\xc8\x03\x20\xb5\xe4\x38\x11\x94\x9c\xf5\x4e\x05\x6f\xb0\x27\xac\xa2\xb3\x2b\xf7\x7a\xb3\xb8\x7e\x30\x5c\x7b\x31\x5a\xdb\x68\x3c\x80\xbc\xc4\x49\x9e\x0a\x2c\x48\x91\xb5\x9c\x5e\x56\x7e\xfb\x7b\x7e\x59\xab\xf7\xc6\xdb\x78\x38\x8c\x4f\x45\xd9\x1e\xb3\xbc\xf8\x68\xe6\x89\x75\x9b\x84\x2e\xc1\xf7\xa9\x8f\xa1\x8d\xb4\xb3\x6b\xd8\xae\x41\x80\x6c\xcc\xc0\x1c\x60\xec\xdf\xc9\xfa\xd2\x6f\x3d\x38\x3c\x00\x9d\x8e\x66\xaa\x76\xf1\x0f\xb2\x50\x57\x68\xa7\x04\x84\x31\x7e\x32\x4d\x5f\x72\x21\xb5\x28\x08\xd0\x13\xa0\xf5\x76\xbd\x55\x57\xdd\x75\x3b\xad\x11\x5c\xf2\x84\x33\x95\x8b\x4c\x4a\x95\x5d\xa3\x7c\x24\x11\x19\x95\x6a\x8e\xb4\xc3\x04\x2c\x75\x42\xa0\x9d\x2b\xa6\x3e\x64\x9e\x53\xaf\xfb\x0e\x50\x0e\xf9\x3b\x42\xdb\x86\xe1\xef\xf6\xba\x0d\xc3\x6f\x84\x68\x8f\x96\x1b\x41\x76\x61\x0e\x30\x3b\xed\xa3\x81\x0e\x6a\xb9\x84\x7a\x17\x20\x7b\x22\xbb\xb3\xb1\x11\x4b\xc9\x5d\x11\x4d\x86\x3c\x90\xd4\xa0\xa8\xab\x9d\x17\x06\xba\xf7\x82\x28\x88\x56\xfa\x66\xb3\xd9\xfc\x44\xb3\x99\x8f\xac\x82\xd3\x3e\x98\x45\x79\x21\x7e\x20\x44\xfb\xed\x9f\x9f\xde\xff\xe1\xd5\x6d\xd3\xd3\xfc\x4c\xdd\xdc\x9a\x8e\xed\xf8\x43\x2d\x38\x60\x95\x27\x87\x1e\x96\xcb\x30\x5f\xd3\xd4\xe9\x5d\x03\xff\x2f\x00\x00\xff\xff\x5d\x44\x78\xed\x78\x0b\x00\x00")

func templatesBosh_directorTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesBosh_directorTf,
		"templates/bosh_director.tf",
	)
}

func templatesBosh_directorTf() (*asset, error) {
	bytes, err := templatesBosh_directorTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/bosh_director.tf", size: 2936, mode: os.FileMode(420), modTime: time.Unix(1507049132, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_dnsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\x41\x8f\x9b\x3e\x10\xc5\xef\x7c\x8a\x91\xf5\x3f\xfd\x25\xd0\x4a\x3d\xe7\x50\xa9\xe7\x5e\x7a\xac\x22\xe4\xe0\x09\x41\x32\xb6\x35\x33\x90\x4d\x57\x7c\xf7\xca\x04\x58\x68\x8b\x1a\x0e\x54\x39\x6c\x2e\x01\xfb\x79\xde\x9b\x9f\x11\xb8\xd5\x54\xe9\x93\x45\x50\x7c\x63\xc1\x3a\x37\xbe\xd6\x95\x53\xf0\x96\x00\xc8\x2d\x20\x1c\x40\xb1\x50\xe5\x4a\x95\x74\x49\x42\xc8\xbe\xa1\x02\x41\x95\xde\x97\x16\x73\xe3\x38\xaf\xb5\xd3\x25\x9a\xfc\x87\x77\xa8\x40\xa1\x6b\xfb\xe1\xfb\x6d\x2c\xe4\x74\x8d\x30\xfc\x0e\xa0\xfe\x7b\x6b\x35\x65\x51\x56\x99\x2e\xed\x65\x09\x40\x5c\x32\x0a\x27\xd1\x22\x55\x97\xf5\x3a\xe4\x82\xaa\x20\x95\x77\x51\xf7\xe5\xeb\x37\x88\x25\xe0\xec\x09\xe4\x82\xb0\xa8\x0e\xe8\xda\x8a\xbc\xab\xd1\x49\xdf\x80\x6f\x24\x34\xf2\x4b\xbb\x7d\x5c\x46\x6a\x91\xf8\x9e\xb8\xd5\xb6\xc1\x7b\x8c\x95\x46\xb3\x79\x9b\x59\x0c\x3e\x56\xe8\xd6\x49\x11\x16\x9e\x4c\xce\x28\x0a\xd4\xb5\xb2\xa6\xd0\x64\x52\xe3\xf8\x37\x4e\x07\x50\xff\x67\x0f\x9a\x8f\xe4\xba\x3b\x9e\x80\xce\x70\xde\xd3\xf9\x3e\x9a\x17\xbe\x0e\x8d\x60\x5e\x5a\x7f\xd2\x36\xd7\xc6\x10\x32\x67\xc5\x39\x1d\x2e\xd5\x71\xdc\xf0\xc9\xff\x73\x2c\x27\x62\xdf\x77\xee\xd3\xcb\x4b\x92\x00\xcc\x93\x6c\x64\xd4\xa9\x58\x80\xc8\x68\xd1\xdc\x07\x9c\x16\xff\x35\x62\x36\xfc\x77\xea\xf8\x18\xe0\x93\xe7\xcb\x1a\xdc\x38\xb7\x03\xdf\x31\x6a\x6f\x8d\xaf\x82\xe4\xb4\x4d\xab\xf0\x3c\x78\xd7\x12\x6e\xa6\x5b\x9c\x53\xe6\x4b\x1a\xc8\xbf\xde\xfe\x44\x98\x77\x05\xbc\x70\x7f\x3a\xb8\xf3\x74\x9b\xc1\x4a\x11\xd6\x9e\x5a\x29\xc2\xbe\x4c\xa3\x37\xf9\x46\x90\x9e\x12\xea\x7b\xbc\xcd\x54\x8d\x0f\xc1\x22\xad\x91\x1d\xa6\xf7\xa5\x7b\x7d\xa2\xd7\xec\x22\xd6\x66\x9a\xd6\x97\x25\x61\xa9\xc5\xaf\x12\x9d\x49\x3e\xa8\x6e\x3c\x11\x5c\x79\xfd\x50\x70\xe5\x0f\x9c\x0f\x7e\xa1\x08\xcd\xa5\x39\xcd\x30\x1e\xa6\xc1\x3d\x19\x0e\xb6\xc7\xd9\x11\x7a\xe2\xf7\xaf\xc1\x0d\xdd\x2e\xd0\xfd\x0c\x00\x00\xff\xff\xcd\x51\x3b\xd4\xf5\x0b\x00\x00")

func templatesCf_dnsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_dnsTf,
		"templates/cf_dns.tf",
	)
}

func templatesCf_dnsTf() (*asset, error) {
	bytes, err := templatesCf_dnsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_dns.tf", size: 3061, mode: os.FileMode(420), modTime: time.Unix(1507075288, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\x4b\x8f\xdb\x36\x17\x5d\x7f\xfe\x15\x84\xf0\x2d\x5a\x20\xf2\xd8\x1e\x37\x75\x17\x59\x15\xdd\xa6\x5d\x74\x17\x0c\x04\x8a\xba\xb2\x09\x73\x44\x96\xa4\xec\x18\x83\xf9\xef\x05\x49\xc9\xd6\x93\x7a\xd8\x41\x31\xc9\xc2\x1a\xf1\xde\x73\xa9\x73\x1f\x3a\x92\x4e\x58\x52\x1c\x33\x40\x81\x52\x2c\x22\x20\x35\x4d\x29\xc1\x1a\x02\xf4\xb6\x40\x48\x5f\x04\xa0\x2f\x28\x50\x5a\xd2\x6c\x1f\x2c\xde\x17\x8b\x5e\x8f\x48\x48\x7a\x32\xbf\x47\xb8\xf4\x7a\xf3\x5c\x8b\x5c\xa3\x40\xf2\x5c\x83\x8c\x62\x4c\x8e\x90\x25\x91\x02\x79\xa2\xa4\x08\x7a\xc2\x2c\xb7\x7e\xff\x7f\xdb\x73\xbe\x67\x10\x11\xfe\x2a\x72\x0d\x4d\xf3\xa5\x43\x09\x59\x1c\x16\x2b\x61\xb9\x92\xe1\x57\x78\xef\x8a\xc8\xe2\x88\x0a\x17\xc7\x17\x69\xcf\x78\x8c\x59\x84\x93\x44\x82\x52\x4b\x92\x86\xe5\x61\xf1\x5b\x07\x57\xea\x10\x09\xc9\xbf\x5f\xc6\xe2\x57\x80\x95\x3a\x84\xd6\xb7\x1b\x5a\x13\x11\x4d\xdb\x7b\x05\x5b\x13\x11\x3a\xe7\x6e\xf0\xb3\x9a\x01\x7a\xee\x21\x81\x48\x48\x0e\x79\x3c\x19\xd1\xb9\xd5\x31\x25\x28\x9e\x4b\x02\x28\x68\x78\xa5\x54\xc2\x19\x33\x16\xa0\xa0\x3c\x0c\x49\xea\xa2\x99\xa4\x23\xf7\xcf\x06\x3c\x61\xb9\x84\xec\x14\xd1\xe4\x3d\x24\x69\xc8\x05\x64\xc1\x02\xa1\x04\x04\x64\x89\x8a\x78\x86\xbe\xa0\x6f\xcd\x00\x19\xe8\x33\x97\xc7\x65\x1c\xb3\xb0\x38\x0e\x5e\x0c\xb8\x3b\xbe\x82\x0f\xbb\x95\x45\xb8\x40\x08\x33\xc6\xcf\x05\x23\x42\x72\xcd\x09\x67\x06\x46\x13\x11\xb8\x93\x5c\x6a\xe5\xb0\xbf\x05\xbb\x55\xf0\x09\x05\xdb\xed\xb3\x0d\xfc\x6e\x00\x1c\x1b\x91\xc4\xd9\x1e\x94\x35\x5a\x2d\xed\xff\xa7\x55\xf0\x62\x0c\x34\x96\x7b\xd0\x91\xc6\x7b\xb7\x7c\x77\xef\xbc\x78\xd3\x50\xef\x8f\x00\x05\xb7\x0e\xa9\xe4\xa2\x23\x0b\xfe\xec\x16\xb0\x29\x97\x67\x2c\x13\x9a\xed\x23\x99\x33\x70\xf0\x07\xad\x45\x78\x5b\x09\xdd\xca\x88\xbc\x1b\x47\xc3\x32\x15\xe5\x7e\x67\xb7\x7c\xc9\x33\xea\x2b\x83\x22\x0d\x26\xa4\x1b\x08\xcb\x72\xe7\x2c\x2e\xba\x5c\x01\x4b\x23\x46\xb3\xa3\xc5\x33\x89\x77\x69\x35\x78\xbb\xd5\x7d\xfc\xa8\xd9\x04\xa9\xff\x80\x21\x55\xa7\x48\x8d\xe3\xc8\xf4\x85\x97\xa4\x56\x0e\x2a\xf5\x53\x46\x68\xf1\xd2\x26\xc6\xda\x3b\x63\x3b\x34\x14\x91\x54\x68\x6a\xa7\x46\x20\x01\x33\x76\x41\x18\x31\x8e\x13\x14\x63\x86\x33\x02\x12\xc5\xb9\x46\x8c\x2a\x0d\x09\xc2\x0a\xe1\x0c\x19\x10\x74\x05\xc9\x25\x8b\x5e\xb1\xe8\xe5\xa6\x58\xaf\x11\x92\x4b\x16\x9a\x73\x55\x4a\x46\x5e\xbd\x6a\x5e\xbe\xf2\x5c\x7f\x3f\x09\xaa\x9b\x85\xd2\x61\x0a\x15\xaa\x9b\x8b\xbb\x09\x41\xa8\x21\x46\x7a\x86\x60\xc3\xca\xe0\x9a\x3f\xab\x58\xfe\xb9\xd7\x52\x49\x41\x01\x71\x23\x34\x12\x12\x52\xfa\xbd\xc5\x65\x47\x15\xe5\x0a\xa4\x61\xe4\x44\x13\x48\xcc\x25\xa0\x42\x43\xa1\x23\x5c\xd0\x93\x3d\x53\x89\x86\x04\xa6\xd2\x36\xc4\x4d\x69\xb9\x30\x29\x65\xf0\x93\x89\xe5\xd1\x64\x3f\xdb\x1d\x54\xe1\xbc\xae\xce\x9c\xd1\x14\xc8\x85\x30\x40\x6f\x8b\xff\x11\x09\x06\x2b\x86\x94\x4b\x88\x12\x50\x5a\x72\xb3\x01\x2d\x73\xb0\x37\x2a\x1f\x73\x45\x2a\x1b\xc5\x58\x24\xd3\x7f\xcf\x28\x26\xb8\xe5\x2f\xc5\x39\xd3\xe5\x4d\xec\x4e\x91\x38\xb6\xa5\x0e\x80\x99\x3e\x44\xe4\x00\xe4\xe8\xf6\x2f\xf2\x98\x51\x12\xba\x85\xb0\x58\xe8\xec\xa8\x9e\x91\xeb\x00\xec\x35\xd9\x39\x55\x0d\x61\xa8\x76\x43\xaf\x8d\xb4\x5b\xed\x56\x66\x55\xc2\x3f\x39\x28\x1d\x09\xac\x0f\x95\x38\x4f\x0e\x27\x18\xcc\x46\x2b\xe8\x63\xae\xab\x9c\xd6\x3d\x1b\x1f\xde\xf7\x48\xe9\x67\x6a\xc2\xb7\xc7\xce\x22\xaa\x3a\x7c\x0c\x19\xe8\x84\xe0\x6e\xe5\xd3\x81\xeb\xe7\xd5\x72\xb3\x5e\x5b\x2d\xb8\xd9\x18\xfb\xe7\x5f\x96\xeb\xdf\xdc\x89\xf5\x67\xeb\x5a\x15\x87\xe8\x81\xf2\xb0\xfd\xf8\x53\x44\x12\x9c\xb3\xa1\x87\xb9\x8a\x69\xfd\x31\xe8\xf6\xec\xd6\x5b\x0a\x35\xdd\x79\xf5\x1c\x98\x22\x37\xbb\x09\x65\xd6\x05\xde\x5f\x63\x57\xeb\x8f\xf3\xb0\xb1\xd9\x6c\x36\xb7\xfa\x1a\x7c\x8c\x18\xc8\x9a\xff\xee\x59\xab\x8e\x99\xa9\x33\x4d\x00\x4a\x51\x9e\x45\x38\x4d\x69\x46\xb5\xbd\x07\x7e\xfd\xf3\xeb\x1f\x03\x79\xed\x12\xcd\xfd\xe9\x1d\xda\x47\x4d\xe8\x4e\x2b\xf0\x5e\x75\x6b\x60\x6c\x3e\x9c\x16\xaf\x26\xef\xef\xdf\xff\x6a\x28\xf4\xc7\xbd\x57\x98\xdf\xb4\x95\xf7\x0b\x23\xba\xb6\xde\x59\x37\xdf\x51\xad\x55\x31\xff\x08\x6d\xb5\x5e\x6d\xb6\xe1\xf3\xe6\xd7\xcf\xbb\xf9\xcd\xd5\x62\xd7\xdf\x5d\xb5\xa1\xd8\xc9\xee\x10\xaf\x33\x14\x83\x27\x8b\x5e\x01\x54\x4f\x67\x9f\x66\xb8\x53\x31\xb4\xe6\xcd\x2c\x56\xbc\x13\xc7\x08\xb8\x0a\x29\x36\xb1\xb6\x1a\xda\xd9\x6d\x31\xd8\x99\xe3\x4f\x0b\x84\xfc\x79\xee\x1c\x64\xbe\x3c\x0c\xf3\x3f\x71\x94\x55\x36\xed\x9d\x65\x95\x26\x78\xc4\x44\x1b\xf1\x36\x73\xfe\x28\x3b\xab\xc9\xc2\xe3\x3c\xf0\xae\xcb\x18\x4c\xab\xcf\x51\x88\x93\xeb\x71\x64\x29\x76\x88\xff\x51\x73\xa7\xb3\x1e\xcf\xaa\x78\xad\x34\xaa\x1a\xaf\xd6\xd3\x6b\xf1\xac\xfc\x35\x68\x5f\x17\x3d\xa0\xf8\x9a\x6f\xbd\x67\xd1\x31\x89\x8d\x1f\x40\xc6\x6e\xf5\x43\xb8\x68\x7e\x01\x98\xdb\x85\xc5\x97\x80\xf6\xc7\x9b\x06\xb0\xb9\x83\x0e\x01\x97\x62\xe3\x8a\x5a\xf1\x9d\xa0\x53\x9c\x73\x3d\x6f\xed\x9c\x39\xab\xab\xe8\x2f\x75\xc6\x44\x91\x31\xf9\x01\x71\xb7\xdd\x16\xea\x62\xaa\xb8\xa8\x31\x3d\x5a\x56\xb4\xc8\xe8\x63\x62\xd2\xd8\x9b\x80\xfa\x40\xed\xdf\x95\x58\x5f\x72\x27\x77\x63\x41\xb1\xbf\x1f\x4d\x06\xef\xef\xc8\x8e\x2f\x68\xff\x06\x00\x00\xff\xff\x43\xa8\x44\x67\xd9\x1d\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 7641, mode: os.FileMode(420), modTime: time.Unix(1507075896, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConcourse_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x3f\x8f\xdc\x20\x10\xc5\xeb\xf0\x29\x46\xa3\x94\xc1\x85\x73\x6d\xaa\x28\xed\x25\x45\xba\xe8\x84\x58\x7b\xec\x45\xc7\x31\x08\xf0\x5a\xd1\xc9\xdf\x3d\xc2\x66\xbd\xbe\xdc\x9f\x5d\x69\xb5\x95\x47\xe3\xc7\x63\xf8\x3d\xe0\x21\xf9\x21\x01\x36\xec\x1a\x1e\x42\x24\x95\x74\xe8\x29\x29\xcf\x6c\x11\x9e\xc5\xa7\x83\xb6\x03\xc1\x37\xc0\xcf\xcf\x3d\x73\x6f\x49\x35\xfc\xe4\x87\xf4\x42\x59\x2d\xb5\x9c\x6b\xa7\x9f\x68\x42\x31\x09\xf1\xda\xdd\xee\x94\xf1\xd9\x17\x00\xe0\x7d\x6b\xdd\xb6\x81\x62\xac\xd6\x85\xf2\xd8\x29\xdf\xc5\x3f\x50\xe4\x21\x34\x04\xf8\xdf\xfa\xce\x04\x1a\xb5\xb5\x08\x78\x2c\xe5\xea\xb5\x6c\x9f\xa7\xcc\x43\xcc\xdb\x1f\x74\xa8\xc8\x1d\x94\x69\xa7\x93\x4e\xb2\x27\x87\x59\x4a\x69\xe4\xf0\xf8\xe6\xa4\xe5\x5f\xb5\xdb\x59\x79\xac\x0b\x00\x01\xa0\xad\xe5\xb1\x9c\xd6\x07\x4e\xdc\xb0\xcd\x36\xa9\xf1\xb8\x34\x39\xa4\xb8\x8c\xf1\x07\xef\xee\xbe\xe2\x17\xc0\xba\xae\x6b\x7c\x10\x00\x53\xb6\x28\x94\x93\xee\xe3\x2c\x3a\x1d\xe3\xe1\x43\x04\x05\x14\x6e\xe8\xcb\xb5\xb7\x02\x78\xff\xf4\x1f\x03\x7e\x71\x4b\x70\x93\xfe\x85\xde\x02\x20\x52\x8c\x86\x9d\xd2\x5d\x67\x9c\x49\x7f\xb3\xfe\xfe\xe7\xfd\x8f\x33\xc9\x72\x18\x75\x68\x8d\xeb\x55\x18\x2c\x21\x60\x8c\x7b\x79\xea\xca\xa5\xbb\x4d\xf8\x4c\xca\x31\xee\x71\xe5\xbc\x51\x5f\x78\xdb\x23\xd9\x4e\x59\xe3\x1e\xa7\xec\x92\xf3\x54\x41\xbb\x9e\x66\x97\x39\x4a\x01\x60\xbc\xda\xc6\xff\xfb\xfb\xaf\xd2\x2d\x89\xbc\xbd\xe5\xd5\xaf\xe0\x15\xab\x7d\x4a\x3e\x5e\x45\x6b\x76\xb8\x19\xaf\xfc\x02\x6e\x8c\xeb\x5f\x00\x00\x00\xff\xff\x5c\xc2\x73\xd4\xf2\x04\x00\x00")

func templatesConcourse_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesConcourse_lbTf,
		"templates/concourse_lb.tf",
	)
}

func templatesConcourse_lbTf() (*asset, error) {
	bytes, err := templatesConcourse_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/concourse_lb.tf", size: 1266, mode: os.FileMode(420), modTime: time.Unix(1506702731, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJumpboxTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xce\xcd\x0a\xc3\x20\x0c\xc0\xf1\xbb\x4f\x11\x64\xd7\x7a\xe8\x71\xb0\x67\x11\x57\x43\xe9\x50\x23\xd1\x48\xa1\xf8\xee\x63\xac\xfb\x82\x9d\x7a\x0d\xf9\xff\x12\xc6\x42\xc2\x13\x82\x9e\x89\xe6\x80\x76\xa2\x98\xa5\xa2\x75\xde\x33\x96\xa2\x41\xdf\x24\xe6\x2b\xad\xc3\x92\x35\x6c\x0a\x20\xb9\x88\x70\x01\x7d\xda\x9a\x63\x83\xa9\xd9\xc5\xf7\xe1\x6b\x4b\x75\xa5\x48\x6a\x96\xfa\x8e\xad\x70\x78\xd6\x00\xcd\x05\xd9\x81\xff\x37\xcd\xc7\x32\xfb\xa8\x9f\xc7\xf1\xc7\xc5\xb5\x22\x27\x17\xec\xeb\xab\x83\xee\x03\xbd\x07\x00\x00\xff\xff\xa3\x5f\xd0\xdf\x04\x01\x00\x00")

func templatesJumpboxTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesJumpboxTf,
		"templates/jumpbox.tf",
	)
}

func templatesJumpboxTf() (*asset, error) {
	bytes, err := templatesJumpboxTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jumpbox.tf", size: 260, mode: os.FileMode(420), modTime: time.Unix(1506702731, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\x41\x0a\xc3\x20\x10\x05\xd0\x75\x3c\x85\x0c\x59\xb4\x9b\xde\xa0\x67\x29\x36\x99\xca\x14\x99\x91\x89\x08\xad\x78\xf7\x22\x16\xcc\xa6\xa4\x4b\xf9\x4f\x3e\xf3\xb3\x53\x72\xf7\x80\x16\xa2\xca\x13\x97\x74\xa3\x15\x6c\x31\x53\x7a\x45\xb4\x57\x0b\x5b\x52\x62\x0f\xa6\x1a\x33\xac\xa2\x27\xe1\x63\xf7\x16\xc6\x63\x85\x9c\xff\x6a\x5d\x14\x57\xe4\x44\x2e\x6c\xbf\x70\x54\xc9\xb4\xa2\x5a\xf0\x22\x3e\xf4\xf2\xdd\xbf\xc6\xe7\xf2\xa0\x80\x27\x98\x4b\x76\x7a\xd9\x85\x15\xce\x15\xcc\xf4\x1d\xa2\xd3\x46\xc6\x32\x2d\xee\xb7\x8f\xb4\xbf\x6b\xab\xff\x04\x00\x00\xff\xff\x39\xda\x2a\x22\x4d\x01\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 333, mode: os.FileMode(420), modTime: time.Unix(1506702731, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/bosh_director.tf": templatesBosh_directorTf,
	"templates/cf_dns.tf": templatesCf_dnsTf,
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/concourse_lb.tf": templatesConcourse_lbTf,
	"templates/jumpbox.tf": templatesJumpboxTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"bosh_director.tf": &bintree{templatesBosh_directorTf, map[string]*bintree{}},
		"cf_dns.tf": &bintree{templatesCf_dnsTf, map[string]*bintree{}},
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"concourse_lb.tf": &bintree{templatesConcourse_lbTf, map[string]*bintree{}},
		"jumpbox.tf": &bintree{templatesJumpboxTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

