// Code generated by go-bindata.
// sources:
// templates/bosh_director.tf
// templates/cf_dns.tf
// templates/cf_instance_groups.tf
// templates/cf_lb.tf
// templates/concourse_lb.tf
// templates/jumpbox.tf
// templates/vars.tf
// DO NOT EDIT!

package gcp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBosh_directorTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x56\xdd\x4e\xac\x3c\x14\xbd\xef\x53\xec\x34\xdf\x85\x26\x23\xdf\x1c\x1c\x94\x73\xe1\x93\x98\x49\xd3\x61\x2a\x72\xec\x50\x52\x8a\x98\x18\xde\xfd\xa4\x14\x28\x1d\x7e\xa6\x7a\x34\xea\x05\x0a\x6b\xad\xae\xbd\xba\x0b\x5b\xb2\x52\x54\x32\x61\x80\x53\x21\x52\xce\x48\x22\x4e\x45\xa5\x18\xc9\x99\xaa\x85\x7c\xc1\x80\x0f\x07\x7e\x33\xfc\xf7\x8e\x00\x72\x7a\x62\x30\xf3\xf3\x00\xf8\xbf\xf7\x57\x2a\x03\x96\xbf\x92\xec\xd8\x0c\x2c\x04\x40\x2b\x25\x48\x22\x19\x55\x8c\x94\xd5\xa1\x7b\x52\xc2\x03\x3c\x51\x5e\x32\xd4\x20\xb4\x68\xc5\xe2\x3b\x37\xe6\xc6\x9c\x99\x89\x85\x0e\x8a\x00\xb2\x82\x24\xd9\x51\x12\x49\xf3\x94\x59\xa0\x01\xb4\x8f\x1a\x0d\xeb\x56\x1a\xeb\xcd\x27\x13\x8c\x72\x09\x4a\xc6\x9f\x08\xcf\xf2\x97\x06\xaf\x96\xf2\x94\x49\x56\x53\xce\x31\x60\xf6\xa6\x98\xcc\x29\x77\xcb\x98\x14\x30\xc0\x46\xde\x7c\x5d\x69\xd1\x06\x23\x04\x60\xec\x98\xda\x75\xe8\x8f\x78\x1b\xb4\xbf\xff\x6f\xf1\x5e\x03\x28\xe7\xa2\x6e\x9d\x00\x14\x42\xaa\xd2\x98\x79\xc4\x61\x88\x37\x80\xef\xe2\xbb\x58\x5f\xc3\x28\x8a\x22\xbc\x37\x30\x29\x94\x48\x04\xd7\x76\x54\x52\x68\x83\x8d\x96\x52\x54\xa6\x4c\x11\x45\x53\xb3\x92\x5b\xcf\x41\x94\xcf\x37\xa2\x60\x39\xde\xfb\x26\x65\x29\xeb\x51\x59\xdc\x57\x64\xe5\xe1\xdf\x3f\xb7\x78\xb7\xbb\x6d\xaf\xf1\x6e\xf7\x85\x39\x1e\x33\xc9\x12\x25\xe4\x07\xb3\x1c\x68\x1e\x79\x0e\xd8\xef\xce\x74\x54\xcb\x79\xae\x9f\x0a\x28\xcb\xbb\x83\xe3\x9d\x4d\xcf\xb8\x51\xc2\x37\xa2\x59\xca\x37\x26\x35\x2a\x6a\xad\xf9\x76\xa1\x69\xbf\x30\x0a\xa3\xad\xf9\xe3\xfe\xfe\xfe\x27\xfa\xed\x4f\x75\x2a\x0e\xe2\x4d\xe7\xd3\xde\x58\x4d\xf3\x0c\xfc\x8d\x39\x76\x2b\x79\x9d\xe1\xdb\xdb\xf8\xf7\x3f\x45\x37\x6c\xda\x66\xfd\x84\x7d\xb8\x51\x3d\x9b\xf3\x87\x1a\x72\x94\x55\x96\x9c\x6c\x58\x3e\x47\x7b\x09\x53\x1d\x3f\x77\xfc\xb9\x48\x28\x2f\x4d\x5c\xce\x07\xde\x9d\x1c\xfc\x83\x01\xb0\x53\xc9\x45\x1d\x0b\x0d\xec\xf8\x62\x95\xfa\x06\x20\x93\x59\xa6\xed\x0f\xa7\xae\x76\x92\xe9\x4a\x6b\x87\x96\xb3\x95\xf5\x2d\xa3\x7f\x75\x36\xdd\x6c\x20\xde\xc0\xf6\xda\x55\x48\xeb\x89\x77\x8d\x7d\x16\xa5\xba\x6a\x33\x0b\x9c\xc5\x36\xf0\xcb\x08\x74\xe7\x87\x0c\x4f\xb3\xc2\x53\x20\xba\x76\x6b\x76\x15\x3c\x04\xee\x8c\x80\x8e\x86\xe8\xef\xb0\x6e\x00\x9b\xdc\x5c\xfc\xfd\xc9\x09\x86\x6f\xb7\xcd\xbe\x95\x19\xcc\x0c\x52\x97\x65\x7a\x8e\x95\xea\x33\x71\xfc\x2c\xbf\xe5\x9c\x7d\x70\x39\xab\xab\xf7\x9c\x7e\xe1\x06\x21\x51\xa9\xa2\x52\x80\x9d\x29\xfd\x95\xf2\xaa\x2b\xc4\xe4\xd8\x3d\x75\x29\xe3\xd9\x7a\x96\x65\x01\x2e\xd1\x69\xda\x05\xae\x83\x71\xe9\xce\xa6\x2e\xd0\x1d\xcc\x02\x3d\xad\x2f\x91\xd3\xda\xa5\xf6\xdb\x34\xee\xbc\x05\x8d\x99\x2e\x5f\x08\xc1\x43\x6c\xae\xe3\x17\x9c\xe9\x57\x9a\xab\xf2\xd8\xbe\x09\x07\xad\x69\xf3\x37\x78\xe3\x42\xce\xbb\xd1\x00\xf6\xf3\xee\xfd\x16\x9c\x1c\x93\x19\xcd\x49\x47\x5f\xda\x1e\xab\x85\x1a\xf4\x37\x00\x00\xff\xff\x1b\x12\x29\x7c\x8e\x0e\x00\x00")

func templatesBosh_directorTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesBosh_directorTf,
		"templates/bosh_director.tf",
	)
}

func templatesBosh_directorTf() (*asset, error) {
	bytes, err := templatesBosh_directorTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/bosh_director.tf", size: 3726, mode: os.FileMode(480), modTime: time.Unix(1516213633, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_dnsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x95\x3f\xcf\x9b\x30\x10\xc6\x77\x3e\xc5\xc9\xea\x54\x09\xf4\x4a\x9d\x33\x54\xea\xdc\xa5\x63\xf5\x0a\x39\xf6\x85\x20\x19\xdb\xba\x3b\x48\xd3\x57\x7c\xf7\xca\x04\xf2\xa7\x0d\x6a\x18\x22\x31\x24\x4b\x00\x3f\xbe\xe7\xb9\x9f\x11\xd7\x69\xaa\xf5\xd6\x21\x28\x3e\xb2\x60\x53\xda\xd0\xe8\xda\x2b\xf8\xc8\x00\xe4\x18\x11\x36\xa0\x58\xa8\xf6\x95\xca\xfa\x2c\x23\xe4\xd0\x92\x41\x50\x55\x08\x95\xc3\xd2\x7a\x2e\x1b\xed\x75\x85\xb6\xfc\x1d\x3c\x2a\x50\xe8\xbb\xe1\xf1\xe9\x36\x15\xf2\xba\x41\x18\x7f\x1b\x50\x9f\x3e\x3a\x4d\x45\x92\xd5\xb6\xcf\x07\x59\x06\x90\xb6\x4c\xc2\xb3\xe8\x26\x55\x5f\x0c\x3a\x64\x43\x75\x94\x3a\xf8\xa4\xfb\xf6\xfd\x07\xa4\x12\xb0\x0b\x04\xb2\x47\xb8\xa9\x0e\xe8\xbb\x9a\x82\x6f\xd0\xcb\xd0\x40\x68\x25\xb6\xf2\x57\xbb\x43\x5c\x46\xea\x90\xf8\x94\xb8\xd3\xae\xc5\x53\x8c\x99\x46\x8b\xeb\x36\x8b\x14\x7c\xaa\xd0\xcf\x93\x22\x34\x81\x6c\xc9\x28\x0a\xd4\xa1\x76\xd6\x68\xb2\xb9\xf5\xfc\x0f\xa7\x0d\xa8\xcf\xc5\x83\xe6\x13\xb9\xfe\x84\x27\xa2\xb7\x5c\x0e\x74\x7e\x4e\xe6\x26\x34\xb1\x15\x2c\x2b\x17\xb6\xda\x95\xda\x5a\x42\xe6\xc2\xec\xf2\xf1\x52\xbd\x4f\x07\x7e\xf6\xff\x9a\xca\x89\xb8\xcb\xc9\x7d\x79\x7b\xcb\x32\x80\xeb\x24\x0b\x19\xf5\x2a\x15\x20\xb2\x5a\x34\x0f\x01\xcf\x9b\xff\x1b\xb1\x18\xff\x7b\xf5\xfe\x18\x60\xb3\xcb\x99\xf7\x79\xa4\xf0\xeb\x78\x0f\x30\xf3\xfe\x09\x88\xaf\x82\x5f\xdc\x57\x43\xf7\x5e\xba\xc5\x60\xc5\xc4\xb9\x97\x56\x4c\x7c\x2e\xd3\xe4\x4d\xa1\x15\xa4\x55\x42\xbd\xc4\x5b\x4c\xd5\x86\x18\x1d\xd2\x1c\xd9\x71\xf9\xb9\x74\x0f\x2b\xfa\x10\xdc\xc4\x5a\x4c\xd3\x85\xaa\x22\xac\xb4\x84\x59\xa2\x57\x92\x17\xd5\x85\x33\xeb\xc0\xf3\x63\xeb\xc0\x2f\x9c\x0f\x4e\x28\x42\xbb\x6f\xb7\xf7\x30\x8e\x4b\xcf\x24\x39\x9a\xaf\x8f\xe5\xd8\xfa\x0d\xcd\x3f\x01\x00\x00\xff\xff\xc5\xca\x78\x60\xaa\x0a\x00\x00")

func templatesCf_dnsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_dnsTf,
		"templates/cf_dns.tf",
	)
}

func templatesCf_dnsTf() (*asset, error) {
	bytes, err := templatesCf_dnsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_dns.tf", size: 2730, mode: os.FileMode(480), modTime: time.Unix(1516213220, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_instance_groupsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\xd0\xcd\x6e\xab\x30\x10\x05\xe0\x3d\x4f\x71\x64\xdd\xad\xaf\x0a\x64\xcb\xb3\x20\xc7\x4c\x88\x25\xf0\xa0\xf1\x38\x0b\x22\xde\xbd\xc2\xa5\x6a\xd4\x55\x7f\xa4\xc6\x4b\xcf\x68\xce\xd1\x27\x94\x38\x8b\x27\x98\x91\x79\x9c\xa8\xf7\x3c\x2f\x59\xa9\x0f\x31\xa9\x8b\x9e\xfa\x51\x38\x2f\x06\x46\x38\x2b\x89\x9d\xce\xf6\xc5\xe0\x5e\x01\xd1\xcd\x84\xe3\x75\x30\xff\xee\x37\x27\xff\x29\xde\xfa\x30\x6c\xf6\x61\xdb\xae\xb5\xa9\x80\x81\x92\x97\xb0\x68\xe0\xb8\xaf\x2b\x89\xb8\x0b\xcb\x8c\x91\x22\x89\x53\x1a\xf0\x9e\x89\x92\x09\xbd\x3a\x45\x48\x98\xf3\xa4\xc1\xae\x1c\x09\x17\x16\x5c\x55\x97\x84\x89\xdd\x70\x76\x93\x8b\x3e\xc4\x71\xbf\x5f\xe6\x1f\x75\xf6\xd0\xa3\xe4\xd0\x2f\x2c\x5a\x3a\x1f\xad\x3b\x98\x72\xc5\x94\xaf\x32\xed\x60\x4e\xa7\x76\xff\xd8\xaa\xad\xaa\x7e\xe2\x52\x7f\xcb\xa5\xb6\x6b\xf3\x0c\x97\xe6\xcf\x5d\x9a\x37\x17\xcf\x39\xea\xa3\x4b\x0d\x8b\xdd\x46\x28\xa9\x04\xaf\x9f\x6e\xa4\xcd\x7c\x5d\xb3\xb1\x6b\xfb\x0c\xcd\xf6\x37\x9a\xaf\x01\x00\x00\xff\xff\x50\x31\x3a\x1c\x7d\x03\x00\x00")

func templatesCf_instance_groupsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_instance_groupsTf,
		"templates/cf_instance_groups.tf",
	)
}

func templatesCf_instance_groupsTf() (*asset, error) {
	bytes, err := templatesCf_instance_groupsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_instance_groups.tf", size: 893, mode: os.FileMode(480), modTime: time.Unix(1516214525, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x59\xcb\x6e\xe3\x36\x14\xdd\xfb\x2b\x08\xa1\x8b\xb6\x88\x1c\xdb\x49\xa7\x6e\x81\x41\x17\x45\xb7\xd3\x2e\xba\x1b\x04\x04\x45\x5d\xd9\xac\x19\x51\x25\x29\x7b\x8c\x41\xfe\x7d\x40\x52\xb2\xf5\xa4\x1e\x71\x30\xc8\xcc\x22\x8a\xc8\x7b\x2e\x79\xee\x83\x47\xcc\x91\x48\x46\x22\x0e\x28\x50\x8a\x63\x0a\x52\xb3\x84\x51\xa2\x21\x40\x5f\x17\x08\xe9\x73\x06\xe8\x23\x0a\x94\x96\x2c\xdd\x05\x8b\x97\xc5\xa2\xd7\x02\x67\x92\x1d\xcd\xcf\x03\x9c\x7b\xad\xb9\xa0\x84\x2b\x3b\x2a\x45\xae\x41\x62\x1e\xe1\x88\xd0\x03\xa4\x31\x56\x20\x8f\x8c\x02\x4e\xc9\xb3\xb5\xfb\xe1\xeb\x91\xc8\xa5\x04\x63\x4f\x35\x66\xa9\xd2\x24\xa5\x80\x77\x52\xe4\x99\x42\x7f\xa0\xff\x04\x4b\x7f\x0c\x50\x70\x87\x76\x42\xec\x38\x60\x2a\x9e\xb3\x5c\x43\x13\x71\xe9\x7c\x85\x3c\x0a\x8b\x91\xb0\x18\x09\x4b\x74\x88\x97\x3f\x2f\x8d\xe3\x9f\xd0\xef\x37\xc0\xbd\x80\xbd\x04\xde\xad\x2a\xe0\x09\xe6\x2c\x3d\x7c\x97\xfd\x5e\xbc\xdf\x6c\xd3\x57\xc4\x17\x1b\x6f\x91\xeb\x2c\xd7\x28\x28\x18\x68\x40\xb9\x34\x39\x12\x9e\x17\xf1\x9e\xed\xd9\x90\xdd\xe9\x91\x47\x98\x65\x43\x7e\x76\x5c\x44\x84\x63\x12\xc7\x12\x94\x5a\xd2\x24\x2c\x1f\x8b\x9f\x75\x68\xa5\xf6\x38\x93\xe2\xcb\x79\x1c\x7a\x05\x56\xa9\x7d\x68\x2d\xbb\x81\x35\xcd\xf0\x94\x75\x57\x90\x35\xcd\x42\x67\xda\x0d\x7d\x52\x93\x21\x4f\x3d\xdb\xa7\x12\xe2\x7d\x1e\x4d\xc4\x73\x46\x75\x44\x09\x4a\xe4\x92\x02\x0a\x1a\x56\x09\x93\x70\x22\x9c\x07\x28\x28\x1f\x43\x9a\x38\x5f\xb6\x3b\xb8\x7f\x97\x9a\x81\xf4\x88\x59\xfc\x12\xd2\x24\x14\x19\xa4\xa6\xe6\x62\xc8\x20\x8d\x15\x16\x29\xfa\x88\x3e\x37\x1d\xa4\xa0\x4f\x42\x1e\x96\x51\xc4\xc3\xe2\x39\x78\x32\xe0\xee\xf9\x02\x3e\x6c\x56\xa6\xde\x02\x21\xc2\xb9\x38\xd9\x35\x22\x94\x49\xa1\x05\x15\xdc\xc0\x68\x9a\x05\xee\xa5\x90\x5a\x39\xec\xcf\xc1\x76\x15\xdc\xa1\xe0\xf1\xf1\xc1\x3a\x7e\x31\x00\x8e\x0d\x2c\x49\xba\x03\x65\x27\xad\x96\xf6\xff\xfd\x2a\x78\x32\x13\x34\x91\x3b\xd0\x58\x93\x9d\x1b\x7e\x75\xc5\x3c\x79\xc3\x50\xaf\x8b\x00\x05\xd7\xca\xa8\xc4\xa2\x23\x0a\xfe\xe8\x16\xb0\x89\x90\x27\x22\x63\x96\xee\xb0\xcc\x39\x38\xf8\xbd\xd6\x59\x78\x1d\x09\xdd\xc8\x88\xb8\x1b\x43\xc3\x32\xcb\xca\xf5\xce\x2e\xf5\x92\x67\xd4\x97\x06\x45\x18\x8c\x4b\xd7\x08\x96\xe5\xca\x79\x54\xd4\xf7\xa5\x11\x5a\x3c\x13\x78\x17\x56\x83\xb7\x5d\xbd\x8e\x1f\x35\x9b\x20\xf5\x1d\x18\x52\x75\x8a\xd4\x38\x8e\x4c\x5d\x78\x49\x6a\xc5\xa0\x92\x3f\xa5\x87\x16\x2f\x6d\x62\xec\x7c\x37\xd9\x36\x0d\x45\x25\xcb\x34\xb3\x5d\x23\x90\x40\x38\x3f\x23\x82\xb8\x20\x31\x8a\x08\x37\xc7\xb1\x44\x51\xae\x11\x67\x4a\x43\x8c\x88\x42\x24\x45\x06\x04\x5d\x40\x72\xc9\xf1\x33\xc9\x7a\xb9\x29\xc6\x6b\x84\xe4\x92\x87\xe6\x5d\x95\x92\x91\xbb\x57\xcd\xed\x2b\xcf\xfe\xfb\x49\x50\xdd\x2c\x94\x06\x53\xa8\x50\xdd\x5c\xbc\x9a\x10\x84\x1a\x92\xb3\xa7\x09\x36\x66\x19\x5c\xf3\x6b\x15\xcb\xdf\xf7\x5a\x5a\x38\x28\x20\xae\x84\xe2\x4c\x42\xc2\xbe\xb4\xb8\xec\xc8\xa2\x5c\x81\x34\x8c\x1c\x59\x0c\xb1\xd9\x02\x2a\x94\x32\x3a\xc0\x19\xdd\xdb\x37\x15\x6f\x28\x23\x4c\xda\x82\xb8\xea\xe9\xab\x1b\x8f\xe8\xb6\xbe\xab\x40\x7d\x46\xee\xb4\xe2\x2c\x01\x7a\xa6\x1c\x8a\x13\x8b\x4a\x30\x40\x11\x24\x42\x02\x8e\x8d\x4e\x14\xc6\xb1\x96\x39\xd8\x03\xca\xc7\x58\x11\xc2\x46\x12\x16\x41\xf4\x9f\x15\x45\xe7\xb6\xbc\x25\x24\xe7\xba\x3c\xbc\x5e\x29\x09\xc7\x96\xd2\x1e\x08\xd7\x7b\x4c\xf7\x40\x0f\x6e\xfd\x59\x1e\x71\x46\x43\x37\x10\x16\x03\xde\x2d\x38\x0b\xbb\x09\xdb\x90\xaa\x98\xa5\x20\x10\x52\x57\xaa\x60\xbb\xda\xae\xec\x7b\x09\xff\xe7\xa0\x34\xce\x88\xde\x1b\xec\x7b\x67\x1b\x0c\x52\xde\x72\x34\x66\xf1\xbd\x2d\xc0\x9c\xd9\x7d\x8b\xec\x5d\xe2\x48\x09\x67\x62\xec\x5b\x4e\x67\x52\x54\x0d\xde\x87\x9c\x73\x82\x6e\xbb\xf2\xe9\xb9\xf5\xc3\x6a\xb9\x59\xaf\xad\xa6\xdb\x6c\xcc\xfc\x87\x5f\x96\xeb\xdf\xdc\x8b\xf5\x07\x6b\x5a\x15\x79\xe8\x86\x32\xaf\xfd\xf9\x52\x78\xca\x84\xe0\x43\x3a\xbe\x32\xb5\xfe\x21\x73\xfd\xf2\xea\x4d\x85\x9a\x7e\xbc\x58\x0e\x94\xd4\x75\xde\x84\x34\xeb\x02\xef\xcf\xb1\xcb\xec\xf7\xf3\xd1\xb0\xd9\x6c\x36\xd7\xfc\x1a\xfc\x1c\x18\x88\x9a\xff\x14\xac\x65\xc7\xcc\xd0\x99\x22\x00\xa5\x98\x48\x31\x49\x12\x96\x32\x6d\xcf\xb2\x4f\x7f\x7f\xfa\x6b\x20\xae\x5d\xe2\xb7\x3f\xbc\x43\xeb\xa8\x09\xd6\x69\x09\xde\xab\x52\x0d\x8c\x8d\x87\xd3\xd4\xd5\xe0\xfd\xfb\xe7\x3f\x0d\xa5\x7d\xbb\x9b\x81\xf9\x45\x5b\xb9\x23\x18\x51\xb5\xf5\xca\xba\xda\x8e\x2a\xad\xca\xf4\xf7\x50\x56\xeb\xd5\xe6\x31\x7c\xd8\xfc\xfa\x61\x3b\xbf\xb8\x5a\xec\xfa\xab\xab\xd6\x14\x3b\xd9\x1d\xe2\x75\x86\x38\xf0\x44\x71\x4c\x1c\x5b\xf2\x60\xae\x38\x68\xb5\x96\x59\x04\x78\x9b\x8b\x91\x62\x95\xfd\xdb\x18\xda\xc0\xb7\x03\xd9\x22\xab\x33\x9c\x77\x0b\x84\xfc\x21\xed\xec\x59\x3e\xca\x87\x19\x9f\xd8\xb5\x2a\x8b\xf6\xb6\xad\x4a\xbe\xdf\xa2\x79\x8d\xb8\x7c\x9c\xdf\xb5\x4e\x6a\xb2\xc6\x38\x0d\x5c\x4f\x99\x09\xd3\xf2\x73\x14\xe2\xe4\x7c\x1c\x99\x8a\x1d\x92\x7e\x54\x8b\xe9\xcc\xc7\x93\x2a\x6e\x82\x46\x65\xe3\x65\xf6\xf4\x5c\x3c\x29\x7f\x0e\xda\x1b\x9e\x1b\x24\x5f\xf3\x9a\x7a\x16\x1d\x93\xd8\x78\x03\x32\xb6\xab\x37\xe1\xa2\x79\x65\x3f\xb7\x0a\x8b\xcb\xfb\xf6\x5f\x59\x1a\xc0\xe6\xb0\x1c\x02\x2e\x75\xc5\x05\xb5\x62\x3b\x41\x92\x38\xe3\x7a\xdc\xda\x31\x73\xb3\x2e\xfa\xbe\x94\x14\x6f\xfe\x31\xb8\x7d\x7c\x9c\xab\x24\x6a\x5c\x8f\xd6\x10\x2d\x3a\xfa\xb8\x98\xd4\xf8\xba\x48\xf6\xe8\x85\xd2\xc3\x0d\x45\x7f\xdf\x0a\x7c\xce\x27\xd5\x66\x41\xb7\xbf\x3a\x4d\x38\x5f\x5f\x9f\x1d\x7f\x02\xfb\x16\x00\x00\xff\xff\xa5\xe7\x92\x5d\x80\x1f\x00\x00")

func templatesCf_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lbTf,
		"templates/cf_lb.tf",
	)
}

func templatesCf_lbTf() (*asset, error) {
	bytes, err := templatesCf_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb.tf", size: 8064, mode: os.FileMode(480), modTime: time.Unix(1516213324, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConcourse_lbTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xcc\x93\xc1\x6e\xdb\x30\x0c\x86\xef\x7a\x0a\x82\xd8\x71\x32\x0a\xaf\x87\x5e\x76\x1a\x76\xed\x76\xd8\x6d\x28\x04\xc5\xa6\x1d\xa1\xaa\x28\x48\x72\x8c\xa1\xf0\xbb\x0f\xb2\x1d\xc7\x5d\xb3\x24\x40\x10\xa0\x27\x13\x34\xf5\x93\xfa\x7e\x8a\xbb\xe4\xbb\x04\x58\xb1\xab\xb8\x0b\x91\x54\xd2\xa1\xa5\xa4\x3c\xb3\x45\x78\x15\x00\x3b\x6d\x3b\x82\xaf\x80\x9f\x5e\x5b\xe6\xd6\x92\xaa\xf8\xc5\x77\xe9\x4d\x69\x31\xc5\x72\x8c\x9d\x7e\xa1\x01\xc5\x20\xc4\x7b\x79\xbb\x51\xc6\x9f\x13\xd6\x75\x1d\x28\xc6\x62\x39\x26\xf7\x99\xf9\x3b\xa9\x07\x8a\xdc\x85\x8a\x00\xff\x39\xdf\x98\x40\xbd\xb6\x16\x01\xf7\xa1\x5c\xb4\xa6\xe6\x79\x46\x00\x98\xda\xef\x74\x28\xc8\xed\x94\xa9\x87\x43\x9d\x64\x4f\x0e\x73\x29\xa5\x9e\xc3\xf3\xd1\x49\xe7\x7f\xc5\x66\x63\xe5\x3e\x9e\xaf\x2f\x00\xb4\xb5\xdc\x8f\xed\x00\x7c\xe0\xc4\x15\xdb\x2c\x93\x2a\x8f\x53\x92\x43\x8a\xd3\x18\xbf\xf1\xe1\x0e\x3f\x03\xde\xdf\x7f\xc9\x9f\xb2\x2c\x4b\x7c\x12\x00\x43\x16\x9a\x49\x27\xdd\xc6\xb1\xf4\x70\x99\xa7\x93\x20\x66\x5c\xb8\x72\x40\x2e\xb9\x05\xc3\xff\x19\x9c\xc6\xfc\x66\x55\x70\xb5\x01\x17\x6a\x0b\x80\x48\x31\x1a\x76\x4a\x37\x8d\x71\x26\xfd\xc9\xf5\x8f\x3f\x1e\xbf\x9f\xf1\x97\x43\xaf\x43\x6d\x5c\xab\x42\x67\x09\x01\x63\xdc\xca\x43\x56\x4e\xd9\xb5\xcf\x67\xbc\x8e\x71\x8b\x0b\xe7\x55\xf5\x85\x1b\x1f\xc9\x36\xca\x1a\xf7\x3c\x64\x95\xec\xaa\x0a\xda\xb5\x34\xaa\x8c\x56\x0a\x00\xe3\xd5\x7a\x09\x7e\x7d\xfb\x39\x67\x67\x47\x8e\xb7\xbc\xfa\x2d\xbc\x63\xb5\x4d\xc9\xc7\xab\x68\x8d\x0a\x37\xe3\x95\x5f\xc0\x07\xc3\x75\x35\xad\x9b\xc1\x7a\xb8\xbb\x35\xab\xbf\x01\x00\x00\xff\xff\x5f\xcd\x56\x41\x23\x06\x00\x00")

func templatesConcourse_lbTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesConcourse_lbTf,
		"templates/concourse_lb.tf",
	)
}

func templatesConcourse_lbTf() (*asset, error) {
	bytes, err := templatesConcourse_lbTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/concourse_lb.tf", size: 1571, mode: os.FileMode(480), modTime: time.Unix(1516213220, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJumpboxTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x8f\x41\x0a\x83\x30\x10\x45\xf7\x39\x45\x08\xdd\xaa\x20\x64\x23\xf4\x2c\x21\x35\x83\xb5\x44\x27\x4c\x66\x44\x10\xef\x5e\x4a\x6d\xad\xd0\x4d\xbb\x1d\xe6\xbd\xff\x3f\x41\x46\xa1\x16\xb4\xe9\x10\xbb\x08\xae\xc5\x21\x09\x83\xf3\x21\x10\xe4\x6c\xb4\xb9\xc9\x90\x2e\x38\x17\x7d\x32\x7a\x51\x5a\x8f\x7e\x00\x7d\xd6\xe6\xb4\x4c\x9e\x4a\x18\x27\xd7\x87\xb5\xf8\xf8\x52\xab\x52\x28\x9c\x84\xdf\xb0\x13\x8a\x4f\x7a\xf2\x51\x36\xfc\x7b\x62\xb9\x9b\xca\xed\xb4\x36\x75\x7d\xb0\xc2\xcc\x40\xa3\x8f\xee\xd5\xe9\x2f\xeb\x41\x19\x7a\x82\x96\x91\xf6\xe1\x07\xef\x95\x39\xe5\xa6\xaa\x7e\x6b\x6d\xad\xb5\x8f\x94\x7b\x00\x00\x00\xff\xff\x10\xf1\x6b\x1b\x66\x01\x00\x00")

func templatesJumpboxTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesJumpboxTf,
		"templates/jumpbox.tf",
	)
}

func templatesJumpboxTf() (*asset, error) {
	bytes, err := templatesJumpboxTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jumpbox.tf", size: 358, mode: os.FileMode(480), modTime: time.Unix(1516214088, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVarsTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x91\xb1\x6e\x84\x30\x10\x44\x7b\xbe\x62\xb5\xba\x22\x69\x2e\xb9\x26\xdd\x7d\x0b\xf2\xe1\xc5\xda\xc8\x5a\xa3\xf5\x82\x94\x20\xfe\x3d\x32\x20\x9d\xc9\x35\x88\x0e\xbf\xf1\xcc\x78\x26\xa7\xec\x1e\x91\x00\x07\x4d\xdf\xd4\x59\xcb\x1e\x61\x6e\x00\xec\x67\x20\xb8\x03\x66\x53\x96\x80\xcd\xd2\x34\x4f\x58\x29\x70\x92\x13\xe0\x6f\x12\x3a\x81\x91\x4c\xe7\x8c\x3b\x25\x4f\x62\xec\x62\x3e\xe9\xfe\x8f\x8b\x9c\xed\xa5\x4c\x11\x97\xea\x92\xcd\x49\x47\x6d\xd0\x34\x0e\xbb\xd0\x53\xef\xc6\x68\x70\x87\xde\xc5\x4c\x47\x69\x1e\x1f\x42\xd6\x76\xec\xb5\xb2\x01\xa8\x13\xd5\x57\xe0\xed\xf3\xba\x7e\x1f\xb7\xaf\x35\xc5\xa0\x69\x62\x4f\x0a\x18\x52\x0a\x71\x7f\xab\xaa\x65\x11\x5d\xe6\x9e\x23\xbd\xe1\x65\x9e\x9c\x5e\xab\xc3\x05\xdf\x97\x62\xb0\x6f\x07\xbb\xf3\xc6\x3d\x07\x5d\x99\x6d\x32\x38\x32\xdb\xcf\xa5\x44\xf9\x0b\x00\x00\xff\xff\x86\x9a\xc3\x60\x0a\x02\x00\x00")

func templatesVarsTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVarsTf,
		"templates/vars.tf",
	)
}

func templatesVarsTf() (*asset, error) {
	bytes, err := templatesVarsTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars.tf", size: 522, mode: os.FileMode(480), modTime: time.Unix(1516213640, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/bosh_director.tf": templatesBosh_directorTf,
	"templates/cf_dns.tf": templatesCf_dnsTf,
	"templates/cf_instance_groups.tf": templatesCf_instance_groupsTf,
	"templates/cf_lb.tf": templatesCf_lbTf,
	"templates/concourse_lb.tf": templatesConcourse_lbTf,
	"templates/jumpbox.tf": templatesJumpboxTf,
	"templates/vars.tf": templatesVarsTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"bosh_director.tf": &bintree{templatesBosh_directorTf, map[string]*bintree{}},
		"cf_dns.tf": &bintree{templatesCf_dnsTf, map[string]*bintree{}},
		"cf_instance_groups.tf": &bintree{templatesCf_instance_groupsTf, map[string]*bintree{}},
		"cf_lb.tf": &bintree{templatesCf_lbTf, map[string]*bintree{}},
		"concourse_lb.tf": &bintree{templatesConcourse_lbTf, map[string]*bintree{}},
		"jumpbox.tf": &bintree{templatesJumpboxTf, map[string]*bintree{}},
		"vars.tf": &bintree{templatesVarsTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

