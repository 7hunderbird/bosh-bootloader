// Code generated by go-bindata.
// sources:
// templates/bosh_director_template.tf
// templates/cf_dns_template.tf
// templates/cf_lb_template.tf
// templates/concourse_lb_template.tf
// templates/jumpbox_template.tf
// templates/vars_template.tf
// DO NOT EDIT!

package gcp

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesBosh_director_templateTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xc4\x95\xd1\x6e\xa3\x30\x10\x45\x9f\xc3\x57\x8c\xac\x7d\x2c\x24\x65\x43\x12\x55\xea\x97\xac\x22\x64\xc0\xa5\x6c\x1d\x6c\x19\x93\x54\xaa\xf8\xf7\x95\xb1\x0d\x24\x10\xe4\x64\x1b\x55\x7d\x28\x81\x3b\x97\x99\xc3\x1d\x60\xb5\xe4\xb5\x04\x54\x12\x79\x62\xe2\x23\x2e\xf1\x81\x20\xf8\xf2\x00\x00\x8e\x98\xd6\x04\x5e\x01\xfd\xfa\xca\x19\xcb\x29\x89\x53\x76\xe0\xb5\x24\xb1\x51\x07\x49\x42\x7d\x7b\xac\x2a\x1b\xe4\x35\x9e\x67\x3d\xab\x3a\xb9\xcd\xb6\x2f\x68\x9d\xf5\xcf\x09\xe3\x84\x55\xef\x31\xe3\xa4\x8c\x25\xce\x1d\xbd\xdf\x0a\x41\x4e\x98\xd2\x40\x15\xfb\xaa\xf8\x9a\x71\x56\x08\x92\x4a\x26\xce\xcc\x17\xae\xce\xb6\x7a\xc2\xfd\x6f\x7d\xe0\x09\xfb\xbc\xea\x7b\xc4\x22\x20\xe5\x31\x2e\xb2\xc6\x37\xda\xb3\xfa\xa2\x94\x44\x94\x98\xde\x33\xb5\xad\x9d\x68\xab\x9b\x17\x67\x99\x20\x55\x75\xde\xd6\xbb\x94\xbc\x7a\x59\x2e\x47\xd6\x46\xad\xa7\x26\x9f\xda\xde\x2f\x78\x60\x2e\x34\x2f\x61\x14\x45\x51\x7b\x2b\x41\x2a\x56\x8b\x94\x00\x9a\x0e\x12\x02\x34\x88\x92\x1e\x4b\x35\xba\x58\x8c\xc9\x58\xd1\xac\x6f\x9f\x24\x63\xad\x4f\x0c\x9d\x17\x23\x67\xa3\xf1\x00\x0a\x1e\xa7\x45\x26\x62\x81\xcb\xbc\xa5\xf0\xbc\x0a\xda\xbf\xe5\xf3\x46\x5d\x37\xde\xc6\xc3\x61\x39\x2a\x42\xdf\x62\x5a\x94\x1f\xcd\x7c\xdf\xdd\x23\x40\x97\x58\xfb\xd6\xc7\x48\x46\xda\xd9\x7b\xd8\x4c\x20\x40\xb6\x66\x60\x0e\x30\xf6\xef\x64\xfd\xe8\xb7\xbe\x16\x3c\x00\xdd\x8e\x66\x5a\xc1\x2b\xfc\x41\x16\xea\x0a\xed\x95\x00\x53\xca\x4e\x26\xd2\x9c\x09\xa9\x45\x61\x88\x9e\x00\x6d\x76\x9b\x9d\xfa\xaf\x33\xb5\xd7\x1a\xc1\x24\x4b\x19\x55\xbd\xc8\x94\xab\xee\x1a\xe5\x23\xb1\xc8\x89\x54\x5b\xa2\x1d\x26\x60\xa9\xfd\x47\x7b\x57\x4c\x7d\xc9\x3c\xa7\x5e\xf7\x1d\xa0\x1c\xfa\x77\x84\xb6\x5b\xaf\x7f\x7f\x23\x3c\xfb\xc2\xb8\x11\x60\x57\xe6\x00\xb1\xd3\x3e\x1a\xe4\x60\x96\x4b\x98\x77\x01\xb2\xef\x59\x77\x36\xb6\xc2\x97\xcc\x15\xd1\x64\xc9\x03\x49\x0d\x86\xba\x9a\xb8\x75\xa8\x33\x17\x46\x61\xb4\xd2\x07\xdb\xed\xf6\x27\xc2\x66\x3e\x9d\x0a\x4e\x7b\x62\x16\xe5\x85\xf8\x81\x10\xed\x17\x7d\x7e\x6b\xff\x87\x57\xf7\x98\x9e\xe6\x77\xea\xe6\x68\x3a\xc6\xf1\x87\x22\x38\x60\x55\xa4\x87\x1e\x96\xcb\x32\x5f\xd3\xd4\xd9\x5d\x0b\xff\x2f\x00\x00\xff\xff\x60\x07\x9c\x5d\x4e\x0b\x00\x00")

func templatesBosh_director_templateTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesBosh_director_templateTf,
		"templates/bosh_director_template.tf",
	)
}

func templatesBosh_director_templateTf() (*asset, error) {
	bytes, err := templatesBosh_director_templateTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/bosh_director_template.tf", size: 2894, mode: os.FileMode(420), modTime: time.Unix(1506448519, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_dns_templateTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x96\xcf\x8a\xdb\x30\x10\x87\xef\x7e\x8a\x41\xf4\x54\xb0\x59\xe8\x39\x87\x42\xcf\xbd\xf4\x58\x16\xa3\x58\x13\x47\x20\x6b\xc4\xcc\xd8\xd9\x74\xf1\xbb\x17\x39\x71\x36\x69\x6b\xba\x3e\x04\x72\xd8\x5c\xf2\x47\x3f\xcd\x7c\xf3\x29\x18\x0d\x96\xbd\xdd\x06\x04\x23\x47\x51\xec\x6a\x47\x9d\xf5\xd1\xc0\x6b\x01\xa0\xc7\x84\xb0\x01\x23\xca\x3e\xb6\xa6\x18\x8b\x82\x51\xa8\xe7\x06\xc1\xb4\x44\x6d\xc0\xda\x45\xa9\x3b\x1b\x6d\x8b\xae\xfe\x45\x11\x0d\x18\x8c\xc3\xf4\xf3\xe9\x6b\x2e\x14\x6d\x87\x70\x7e\x6d\xc0\x7c\x7a\x1d\x2c\x57\x39\xe6\xdd\x58\x4e\xb1\x02\x20\x6f\x99\x83\x97\xd0\x0d\xd5\x58\x4d\x39\x94\x86\x7d\x52\x4f\x31\xe7\xbe\x7d\xff\x01\xb9\x04\xec\x88\x41\xf7\x08\x37\xd5\x01\xe3\xe0\x99\x62\x87\x51\xa7\x01\xa8\xd7\xd4\xeb\x1f\xe3\x4e\xb8\x82\x3c\x20\xcb\x89\x78\xb0\xa1\xc7\x13\xc6\xc2\xa0\xd5\xf5\x98\x55\x06\x9f\x2b\x8c\xcb\xa6\x18\x1b\x62\x57\x0b\xaa\x01\x73\xf0\xc1\x35\x96\x5d\xe9\xa2\xfc\xe5\x69\x03\xe6\x73\xf5\xce\xe6\xb3\xb9\xf1\xa4\x27\x61\x74\x52\x4f\x76\x7e\xce\xcd\x1b\xea\x52\xaf\x58\xb7\x81\xb6\x36\xd4\xd6\x39\x46\x91\xaa\xd9\x95\xe7\x8f\xe6\x79\x3e\xf0\x4b\xff\xaf\xb9\x9c\x6a\x78\x3b\xb9\x2f\x4f\x4f\x45\x01\x70\x4d\xb2\xd2\xd1\x68\x72\x01\x66\x67\xd5\xca\x04\x78\xd9\xfc\x5f\xc4\xea\xfc\x3e\x9a\xe7\xf7\x09\xde\x92\xec\x97\xe4\xe6\xb5\x3b\xf8\x9d\x51\xa7\xd6\xf8\xa2\xc8\xd1\x86\xd2\xa7\xc7\xd1\xbb\x44\xb8\xda\x6e\xb3\x2b\x45\xf6\x65\x62\x7a\x39\xfe\xcb\xb0\xdc\x55\xf0\x4d\xf7\x87\x93\x7b\x4d\xb7\x5a\xac\x36\x69\xe9\x5f\xab\x4d\xba\xaf\xd3\xdc\x9b\xa9\x57\xe4\x87\x94\xfa\x86\xb7\xda\xaa\xa3\x94\x02\xf2\x92\xd9\xf3\xf2\x7d\xed\x1e\x1e\xe8\x31\x7b\x83\xb5\xda\x66\xa0\xb6\x65\x6c\xad\xd2\xa2\xd1\xab\xc8\x87\xd5\x95\x37\x82\x83\x2c\x5f\x0a\x0e\xf2\xa1\xb3\x18\x8b\xdf\x01\x00\x00\xff\xff\xc6\x89\x38\x3c\xba\x0a\x00\x00")

func templatesCf_dns_templateTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_dns_templateTf,
		"templates/cf_dns_template.tf",
	)
}

func templatesCf_dns_templateTf() (*asset, error) {
	bytes, err := templatesCf_dns_templateTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_dns_template.tf", size: 2746, mode: os.FileMode(420), modTime: time.Unix(1506448625, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesCf_lb_templateTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xd4\x58\x4f\x6f\xe3\xb6\x13\x3d\xff\xfc\x29\x08\xe2\x77\x68\x81\x95\x63\x3b\xe9\xd6\x3d\xec\xa9\xe8\x75\xdb\x43\x6f\x8b\x80\xa0\xa8\x91\x4d\x98\x11\x59\x92\xb2\xd7\x08\xf2\xdd\x0b\x92\x52\x2c\x59\x12\x25\x39\x59\x14\xd9\x3d\x58\x11\x67\xde\x50\x6f\xfe\xe8\x89\x47\xaa\x39\x4d\x05\x20\x6c\x8c\x20\x0c\xb4\xe5\x39\x67\xd4\x02\x46\xcf\x0b\x84\xec\x59\x01\xfa\x82\xb0\xb1\x9a\x17\x3b\xbc\x78\x59\x2c\x06\x3d\x88\xd2\xfc\xe8\x7e\x0f\x70\x1e\xf4\x96\xa5\x55\xa5\x45\x58\xcb\xd2\x82\x26\x29\x65\x07\x28\x32\x62\x40\x1f\x39\xab\x82\x1e\xa9\x28\xbd\xdf\xff\x9f\x77\x52\xee\x04\x10\x26\x9f\x54\x69\xe1\xda\x7c\x19\x50\x12\x91\x26\xd5\x4a\x52\xaf\x14\xf4\x09\x5e\xfa\x22\x8a\x94\x70\x15\xe2\xc4\x22\xed\x84\x4c\xa9\x20\x34\xcb\x34\x18\xb3\x64\x79\x52\x5f\x56\xbf\x6d\x70\x63\xf6\x44\x69\xf9\xfd\x3c\x15\xbf\x01\x6c\xcc\x3e\xf1\xbe\xfd\xd0\x96\x29\x32\x6f\xef\x0d\x6c\xcb\x54\x12\x9c\xfb\xc1\x4f\xe6\x06\xd0\xd3\x15\x09\x1a\x8c\x2c\x35\x03\x84\xaf\x7c\x72\xae\xe1\x44\x85\xc0\x08\xd7\x97\x09\xcb\x43\x2c\x97\x20\x14\xfe\xf9\x70\x47\xaa\x97\x50\x1c\x09\xcf\x5e\x12\x96\x27\x52\x41\x81\x17\x08\x65\xa0\xa0\xc8\x0c\x91\x05\xfa\x82\xbe\x5d\x07\x28\xc0\x9e\xa4\x3e\x2c\xd3\x54\x24\xd5\x35\x7e\x74\xe0\xe1\xfa\x15\x7c\xdc\xad\x2e\x98\x05\x42\x54\x08\x79\xaa\xf8\x50\x5a\x5a\xc9\xa4\x70\x30\x96\x29\x1c\x6e\x4a\x6d\x4d\xc0\xfe\x86\xb7\x2b\xfc\x09\xe1\x87\x87\x7b\x1f\xf8\xc5\x01\x04\x36\x88\xa6\xc5\x0e\x8c\x37\x5a\x2d\xfd\xff\xbb\x15\x7e\x74\x06\x96\xea\x1d\x58\x62\xe9\x2e\x2c\xbf\xb9\xce\x1f\xa3\x69\x68\xd7\x32\x46\xf8\x52\xcd\x8d\x5c\xf4\x64\x21\x9e\xdd\x0a\x36\x97\xfa\x44\x75\xc6\x8b\x1d\xd1\xa5\x80\x00\xbf\xb7\x56\x25\x97\x95\x24\xac\x4c\xc8\xbb\x73\x74\x2c\x73\x55\xef\xf7\xe6\xf6\xac\x79\x46\x43\x65\x50\xa5\xc1\x85\x0c\xcd\xbb\xac\x77\x2e\xd2\xaa\x23\x0d\x88\x9c\x08\x5e\x1c\x3c\x9e\x4b\x7c\x48\xab\xc3\xdb\xae\xde\xc6\x8f\xb9\x99\x20\xf3\x1f\x30\x64\xda\x14\x99\x69\x1c\xb9\xbe\x88\x92\xd4\xc9\x41\xa3\x7e\xea\x08\x1d\x5e\xba\xc4\x78\xfb\x60\xec\x87\x86\x61\x9a\x2b\xcb\xfd\xd4\xc0\x1a\xa8\x10\x67\x44\x91\x90\x34\x43\x29\x15\xb4\x60\xa0\x51\x5a\x5a\x24\xb8\xb1\x90\x21\x6a\x10\x2d\x90\x03\x41\xaf\x20\xa5\x16\xe4\x89\xaa\x41\x6e\xaa\xf5\x16\x21\xa5\x16\x89\xbb\xd7\xa4\x64\xe2\xd3\x9b\xeb\xc7\x37\x91\xe7\x1f\x26\xc1\xf4\xb3\x50\x3b\xcc\xa1\xc2\xf4\x73\xf1\x66\x42\x10\xba\x12\x0e\x03\x43\xf0\xca\xca\xe1\xba\x3f\x9b\x58\xf1\xb9\xd7\x51\x34\xb8\x82\xb8\x10\x4a\x94\x86\x9c\x7f\xef\x70\xd9\x53\x45\xa5\x01\xed\x18\x39\xf2\x0c\x32\xf7\x08\xa8\xd2\x3b\xe8\x00\x67\x74\xe7\xef\x34\xa2\x21\x45\xb9\xf6\x0d\x71\x51\x45\x21\x4c\xce\x05\xfc\xe4\x62\x45\xf4\xd3\xcf\x7e\x07\x4d\xb8\xa8\x6b\x30\x17\x3c\x07\x76\x66\x02\xd0\xf3\xe2\x7f\x4c\x83\xc3\x4a\x21\x97\x1a\x48\x06\xc6\x6a\xe9\x36\x60\x75\x09\xfe\x45\x15\x63\xae\x4a\xe5\x55\x31\x56\xc9\x8c\xbf\x33\xaa\x09\xee\xf9\xcb\x69\x29\x6c\xfd\x12\x7b\xa3\xa0\x9b\xda\x52\x7b\xa0\xc2\xee\x09\xdb\x03\x3b\x84\xfd\xab\x32\x15\x9c\x25\x61\x21\xa9\x16\x7a\x3b\x6a\x60\xe4\x06\x00\xff\x4c\x7e\x4e\x35\x43\x38\xaa\xc3\xd0\xeb\x22\x6d\x57\xdb\x95\x5b\xd5\xf0\x4f\x09\xc6\x12\x45\xed\xbe\x11\xe7\x2e\xe0\xe0\xd1\x6c\x74\x82\xbe\xcf\x73\xd5\xd3\x7a\x60\xe3\xe3\xfb\x9e\x28\xfd\x5c\x4d\xc4\xf6\xd8\x5b\x44\x4d\x87\x8f\x21\x03\x83\x10\xdc\xae\x62\x3a\x70\x7d\xbf\x5a\x6e\xd6\x6b\xaf\x05\x37\x1b\x67\x7f\xff\xcb\x72\xfd\x5b\xb8\xb1\xfe\xec\x5d\x9b\xe2\x10\xbd\xa3\x3c\xec\x7e\xaa\x54\x91\x94\x94\x62\xec\xc3\xab\x61\xda\xfe\x64\xb9\x7c\x67\x0d\x96\x42\x4b\x77\xbe\x7a\x8e\x4c\x91\x8b\xdd\x8c\x32\xeb\x03\x1f\xae\xb1\x57\xeb\x8f\xf3\xb1\xb1\xd9\x6c\x36\x97\xfa\x1a\xfd\x8c\x18\xc9\x5a\xfc\xed\xd9\xaa\x8e\x1b\x53\xe7\x9a\x00\x8c\xe1\xb2\x20\x34\xcf\x79\xc1\xad\x7f\x07\x7e\xfd\xf3\xeb\x1f\x23\x79\xed\x13\xcd\xc3\xe9\x1d\xdb\x47\x4b\xe8\xce\x2b\xf0\x41\x75\xeb\x60\x7c\x3e\x82\x16\x6f\x26\xef\xef\xdf\xff\xba\x52\xe8\xef\x77\x06\x70\x7b\xd3\x36\xce\x02\x26\x74\x6d\xbb\xb3\x2e\xbe\x93\x5a\xab\x61\xfe\x11\xda\x6a\xbd\xda\x3c\x24\xf7\x9b\x5f\x3f\x6f\x6f\x6f\xae\x0e\xbb\xf1\xee\x6a\x0d\xc5\x5e\x76\xc7\x78\xbd\x41\x31\x44\xb2\x18\x15\x40\xed\x74\x0e\x69\x86\x37\x2a\x86\xce\xbc\xb9\x89\x95\xe8\xc4\x71\x02\xae\x41\x8a\x4f\xac\xaf\x86\x6e\x76\x3b\x0c\xf6\xe6\xf8\xd3\x02\xa1\x78\x9e\x7b\x07\x59\x2c\x0f\xe3\xfc\xcf\x1c\x65\x8d\x4d\x47\x67\x59\xa3\x09\xde\x63\xa2\x4d\x38\x79\xbc\x7d\x94\x9d\xcc\x6c\xe1\x71\x1a\x39\xeb\x72\x06\xf3\xea\x73\x12\xe2\xec\x7a\x9c\x58\x8a\x3d\xe2\x7f\xd2\xdc\xe9\xad\xc7\x93\xa9\x8e\x95\x26\x55\xe3\xab\xf5\xfc\x5a\x3c\x99\x78\x0d\xfa\xe3\xa2\x77\x28\xbe\xe9\x27\xd4\x11\x3a\x66\xb1\xf1\x03\xc8\xd8\xae\x7e\x04\x17\xff\x06\x00\x00\xff\xff\xcb\x4b\x2e\xce\xf1\x19\x00\x00")

func templatesCf_lb_templateTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesCf_lb_templateTf,
		"templates/cf_lb_template.tf",
	)
}

func templatesCf_lb_templateTf() (*asset, error) {
	bytes, err := templatesCf_lb_templateTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/cf_lb_template.tf", size: 6641, mode: os.FileMode(420), modTime: time.Unix(1506448602, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesConcourse_lb_templateTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x93\x3f\x8f\xdc\x20\x10\xc5\xeb\xf0\x29\x46\xa3\x94\xc1\x85\x73\x6d\xaa\x28\xed\x25\x45\xba\xe8\x84\x58\x7b\xec\x45\xc7\x31\x08\xf0\x5a\xd1\xc9\xdf\x3d\xc2\x66\xbd\xbe\xdc\x9f\x5d\x69\xb5\x95\x47\xe3\xc7\x63\xf8\x3d\xe0\x21\xf9\x21\x01\x36\xec\x1a\x1e\x42\x24\x95\x74\xe8\x29\x29\xcf\x6c\x11\x9e\xc5\xa7\x83\xb6\x03\xc1\x37\xc0\xcf\xcf\x3d\x73\x6f\x49\x35\xfc\xe4\x87\xf4\x42\x59\x2d\xb5\x9c\x6b\xa7\x9f\x68\x42\x31\x09\xf1\xda\xdd\xee\x94\xf1\xd9\x17\x00\xe0\x7d\x6b\xdd\xb6\x81\x62\xac\xd6\x85\xf2\xd8\x29\xdf\xc5\x3f\x50\xe4\x21\x34\x04\xf8\xdf\xfa\xce\x04\x1a\xb5\xb5\x08\x78\x2c\xe5\xea\xb5\x6c\x9f\xa7\xcc\x43\xcc\xdb\x1f\x74\xa8\xc8\x1d\x94\x69\xa7\x93\x4e\xb2\x27\x87\x59\x4a\x69\xe4\xf0\xf8\xe6\xa4\xe5\x5f\xb5\xdb\x59\x79\xac\x0b\x00\x01\xa0\xad\xe5\xb1\x9c\xd6\x07\x4e\xdc\xb0\xcd\x36\xa9\xf1\xb8\x34\x39\xa4\xb8\x8c\xf1\x07\xef\xee\xbe\xe2\x17\xc0\xba\xae\x6b\x7c\x10\x00\x53\xb6\x28\x94\x93\xee\xe3\x2c\x3a\x1d\xe3\xe1\x43\x04\x05\x14\x6e\xe8\xcb\xb5\xb7\x02\x78\xff\xf4\x1f\x03\x7e\x71\x4b\x70\x93\xfe\x85\xde\x02\x20\x52\x8c\x86\x9d\xd2\x5d\x67\x9c\x49\x7f\xb3\xfe\xfe\xe7\xfd\x8f\x33\xc9\x72\x18\x75\x68\x8d\xeb\x55\x18\x2c\x21\x60\x8c\x7b\x79\xea\xca\xa5\xbb\x4d\xf8\x4c\xca\x31\xee\x71\xe5\xbc\x51\x5f\x78\xdb\x23\xd9\x4e\x59\xe3\x1e\xa7\xec\x92\xf3\x54\x41\xbb\x9e\x66\x97\x39\x4a\x01\x60\xbc\xda\xc6\xff\xfb\xfb\xaf\xd2\x2d\x89\xbc\xbd\xe5\xd5\xaf\xe0\x15\xab\x7d\x4a\x3e\x5e\x45\x6b\x76\xb8\x19\xaf\xfc\x02\x6e\x8c\xeb\x5f\x00\x00\x00\xff\xff\x5c\xc2\x73\xd4\xf2\x04\x00\x00")

func templatesConcourse_lb_templateTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesConcourse_lb_templateTf,
		"templates/concourse_lb_template.tf",
	)
}

func templatesConcourse_lb_templateTf() (*asset, error) {
	bytes, err := templatesConcourse_lb_templateTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/concourse_lb_template.tf", size: 1266, mode: os.FileMode(420), modTime: time.Unix(1506448574, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesJumpbox_templateTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\xce\xcd\x0a\xc3\x20\x0c\xc0\xf1\xbb\x4f\x11\x64\xd7\x7a\xe8\x71\xb0\x67\x11\x57\x43\xe9\x50\x23\xd1\x48\xa1\xf8\xee\x63\xac\xfb\x82\x9d\x7a\x0d\xf9\xff\x12\xc6\x42\xc2\x13\x82\x9e\x89\xe6\x80\x76\xa2\x98\xa5\xa2\x75\xde\x33\x96\xa2\x41\xdf\x24\xe6\x2b\xad\xc3\x92\x35\x6c\x0a\x20\xb9\x88\x70\x01\x7d\xda\x9a\x63\x83\xa9\xd9\xc5\xf7\xe1\x6b\x4b\x75\xa5\x48\x6a\x96\xfa\x8e\xad\x70\x78\xd6\x00\xcd\x05\xd9\x81\xff\x37\xcd\xc7\x32\xfb\xa8\x9f\xc7\xf1\xc7\xc5\xb5\x22\x27\x17\xec\xeb\xab\x83\xee\x03\xbd\x07\x00\x00\xff\xff\xa3\x5f\xd0\xdf\x04\x01\x00\x00")

func templatesJumpbox_templateTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesJumpbox_templateTf,
		"templates/jumpbox_template.tf",
	)
}

func templatesJumpbox_templateTf() (*asset, error) {
	bytes, err := templatesJumpbox_templateTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/jumpbox_template.tf", size: 260, mode: os.FileMode(420), modTime: time.Unix(1506448552, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _templatesVars_templateTf = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xd0\x41\x0a\xc3\x20\x10\x05\xd0\x75\x3c\x85\x0c\x59\xb4\x9b\xde\xa0\x67\x29\x36\x99\xca\x14\x99\x91\x89\x08\xad\x78\xf7\x22\x16\xcc\xa6\xa4\x4b\xf9\x4f\x3e\xf3\xb3\x53\x72\xf7\x80\x16\xa2\xca\x13\x97\x74\xa3\x15\x6c\x31\x53\x7a\x45\xb4\x57\x0b\x5b\x52\x62\x0f\xa6\x1a\x33\xac\xa2\x27\xe1\x63\xf7\x16\xc6\x63\x85\x9c\xff\x6a\x5d\x14\x57\xe4\x44\x2e\x6c\xbf\x70\x54\xc9\xb4\xa2\x5a\xf0\x22\x3e\xf4\xf2\xdd\xbf\xc6\xe7\xf2\xa0\x80\x27\x98\x4b\x76\x7a\xd9\x85\x15\xce\x15\xcc\xf4\x1d\xa2\xd3\x46\xc6\x32\x2d\xee\xb7\x8f\xb4\xbf\x6b\xab\xff\x04\x00\x00\xff\xff\x39\xda\x2a\x22\x4d\x01\x00\x00")

func templatesVars_templateTfBytes() ([]byte, error) {
	return bindataRead(
		_templatesVars_templateTf,
		"templates/vars_template.tf",
	)
}

func templatesVars_templateTf() (*asset, error) {
	bytes, err := templatesVars_templateTfBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/vars_template.tf", size: 333, mode: os.FileMode(420), modTime: time.Unix(1506448496, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/bosh_director_template.tf": templatesBosh_director_templateTf,
	"templates/cf_dns_template.tf": templatesCf_dns_templateTf,
	"templates/cf_lb_template.tf": templatesCf_lb_templateTf,
	"templates/concourse_lb_template.tf": templatesConcourse_lb_templateTf,
	"templates/jumpbox_template.tf": templatesJumpbox_templateTf,
	"templates/vars_template.tf": templatesVars_templateTf,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"bosh_director_template.tf": &bintree{templatesBosh_director_templateTf, map[string]*bintree{}},
		"cf_dns_template.tf": &bintree{templatesCf_dns_templateTf, map[string]*bintree{}},
		"cf_lb_template.tf": &bintree{templatesCf_lb_templateTf, map[string]*bintree{}},
		"concourse_lb_template.tf": &bintree{templatesConcourse_lb_templateTf, map[string]*bintree{}},
		"jumpbox_template.tf": &bintree{templatesJumpbox_templateTf, map[string]*bintree{}},
		"vars_template.tf": &bintree{templatesVars_templateTf, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

