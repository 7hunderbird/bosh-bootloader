// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-bootloader/storage"
)

type StackMigrator struct {
	MigrateStub        func(state storage.State) (storage.State, error)
	migrateMutex       sync.RWMutex
	migrateArgsForCall []struct {
		state storage.State
	}
	migrateReturns struct {
		result1 storage.State
		result2 error
	}
	migrateReturnsOnCall map[int]struct {
		result1 storage.State
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *StackMigrator) Migrate(state storage.State) (storage.State, error) {
	fake.migrateMutex.Lock()
	ret, specificReturn := fake.migrateReturnsOnCall[len(fake.migrateArgsForCall)]
	fake.migrateArgsForCall = append(fake.migrateArgsForCall, struct {
		state storage.State
	}{state})
	fake.recordInvocation("Migrate", []interface{}{state})
	fake.migrateMutex.Unlock()
	if fake.MigrateStub != nil {
		return fake.MigrateStub(state)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.migrateReturns.result1, fake.migrateReturns.result2
}

func (fake *StackMigrator) MigrateCallCount() int {
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	return len(fake.migrateArgsForCall)
}

func (fake *StackMigrator) MigrateArgsForCall(i int) storage.State {
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	return fake.migrateArgsForCall[i].state
}

func (fake *StackMigrator) MigrateReturns(result1 storage.State, result2 error) {
	fake.MigrateStub = nil
	fake.migrateReturns = struct {
		result1 storage.State
		result2 error
	}{result1, result2}
}

func (fake *StackMigrator) MigrateReturnsOnCall(i int, result1 storage.State, result2 error) {
	fake.MigrateStub = nil
	if fake.migrateReturnsOnCall == nil {
		fake.migrateReturnsOnCall = make(map[int]struct {
			result1 storage.State
			result2 error
		})
	}
	fake.migrateReturnsOnCall[i] = struct {
		result1 storage.State
		result2 error
	}{result1, result2}
}

func (fake *StackMigrator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.migrateMutex.RLock()
	defer fake.migrateMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *StackMigrator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
