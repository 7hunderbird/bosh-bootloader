// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	awsiam "github.com/aws/aws-sdk-go/service/iam"
	"github.com/cloudfoundry/bosh-bootloader/aws/iam"
)

type Client struct {
	GetServerCertificateStub        func(*awsiam.GetServerCertificateInput) (*awsiam.GetServerCertificateOutput, error)
	getServerCertificateMutex       sync.RWMutex
	getServerCertificateArgsForCall []struct {
		arg1 *awsiam.GetServerCertificateInput
	}
	getServerCertificateReturns struct {
		result1 *awsiam.GetServerCertificateOutput
		result2 error
	}
	getServerCertificateReturnsOnCall map[int]struct {
		result1 *awsiam.GetServerCertificateOutput
		result2 error
	}
	DeleteServerCertificateStub        func(*awsiam.DeleteServerCertificateInput) (*awsiam.DeleteServerCertificateOutput, error)
	deleteServerCertificateMutex       sync.RWMutex
	deleteServerCertificateArgsForCall []struct {
		arg1 *awsiam.DeleteServerCertificateInput
	}
	deleteServerCertificateReturns struct {
		result1 *awsiam.DeleteServerCertificateOutput
		result2 error
	}
	deleteServerCertificateReturnsOnCall map[int]struct {
		result1 *awsiam.DeleteServerCertificateOutput
		result2 error
	}
	DeleteUserPolicyStub        func(*awsiam.DeleteUserPolicyInput) (*awsiam.DeleteUserPolicyOutput, error)
	deleteUserPolicyMutex       sync.RWMutex
	deleteUserPolicyArgsForCall []struct {
		arg1 *awsiam.DeleteUserPolicyInput
	}
	deleteUserPolicyReturns struct {
		result1 *awsiam.DeleteUserPolicyOutput
		result2 error
	}
	deleteUserPolicyReturnsOnCall map[int]struct {
		result1 *awsiam.DeleteUserPolicyOutput
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Client) GetServerCertificate(arg1 *awsiam.GetServerCertificateInput) (*awsiam.GetServerCertificateOutput, error) {
	fake.getServerCertificateMutex.Lock()
	ret, specificReturn := fake.getServerCertificateReturnsOnCall[len(fake.getServerCertificateArgsForCall)]
	fake.getServerCertificateArgsForCall = append(fake.getServerCertificateArgsForCall, struct {
		arg1 *awsiam.GetServerCertificateInput
	}{arg1})
	fake.recordInvocation("GetServerCertificate", []interface{}{arg1})
	fake.getServerCertificateMutex.Unlock()
	if fake.GetServerCertificateStub != nil {
		return fake.GetServerCertificateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.getServerCertificateReturns.result1, fake.getServerCertificateReturns.result2
}

func (fake *Client) GetServerCertificateCallCount() int {
	fake.getServerCertificateMutex.RLock()
	defer fake.getServerCertificateMutex.RUnlock()
	return len(fake.getServerCertificateArgsForCall)
}

func (fake *Client) GetServerCertificateArgsForCall(i int) *awsiam.GetServerCertificateInput {
	fake.getServerCertificateMutex.RLock()
	defer fake.getServerCertificateMutex.RUnlock()
	return fake.getServerCertificateArgsForCall[i].arg1
}

func (fake *Client) GetServerCertificateReturns(result1 *awsiam.GetServerCertificateOutput, result2 error) {
	fake.GetServerCertificateStub = nil
	fake.getServerCertificateReturns = struct {
		result1 *awsiam.GetServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *Client) GetServerCertificateReturnsOnCall(i int, result1 *awsiam.GetServerCertificateOutput, result2 error) {
	fake.GetServerCertificateStub = nil
	if fake.getServerCertificateReturnsOnCall == nil {
		fake.getServerCertificateReturnsOnCall = make(map[int]struct {
			result1 *awsiam.GetServerCertificateOutput
			result2 error
		})
	}
	fake.getServerCertificateReturnsOnCall[i] = struct {
		result1 *awsiam.GetServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *Client) DeleteServerCertificate(arg1 *awsiam.DeleteServerCertificateInput) (*awsiam.DeleteServerCertificateOutput, error) {
	fake.deleteServerCertificateMutex.Lock()
	ret, specificReturn := fake.deleteServerCertificateReturnsOnCall[len(fake.deleteServerCertificateArgsForCall)]
	fake.deleteServerCertificateArgsForCall = append(fake.deleteServerCertificateArgsForCall, struct {
		arg1 *awsiam.DeleteServerCertificateInput
	}{arg1})
	fake.recordInvocation("DeleteServerCertificate", []interface{}{arg1})
	fake.deleteServerCertificateMutex.Unlock()
	if fake.DeleteServerCertificateStub != nil {
		return fake.DeleteServerCertificateStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteServerCertificateReturns.result1, fake.deleteServerCertificateReturns.result2
}

func (fake *Client) DeleteServerCertificateCallCount() int {
	fake.deleteServerCertificateMutex.RLock()
	defer fake.deleteServerCertificateMutex.RUnlock()
	return len(fake.deleteServerCertificateArgsForCall)
}

func (fake *Client) DeleteServerCertificateArgsForCall(i int) *awsiam.DeleteServerCertificateInput {
	fake.deleteServerCertificateMutex.RLock()
	defer fake.deleteServerCertificateMutex.RUnlock()
	return fake.deleteServerCertificateArgsForCall[i].arg1
}

func (fake *Client) DeleteServerCertificateReturns(result1 *awsiam.DeleteServerCertificateOutput, result2 error) {
	fake.DeleteServerCertificateStub = nil
	fake.deleteServerCertificateReturns = struct {
		result1 *awsiam.DeleteServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *Client) DeleteServerCertificateReturnsOnCall(i int, result1 *awsiam.DeleteServerCertificateOutput, result2 error) {
	fake.DeleteServerCertificateStub = nil
	if fake.deleteServerCertificateReturnsOnCall == nil {
		fake.deleteServerCertificateReturnsOnCall = make(map[int]struct {
			result1 *awsiam.DeleteServerCertificateOutput
			result2 error
		})
	}
	fake.deleteServerCertificateReturnsOnCall[i] = struct {
		result1 *awsiam.DeleteServerCertificateOutput
		result2 error
	}{result1, result2}
}

func (fake *Client) DeleteUserPolicy(arg1 *awsiam.DeleteUserPolicyInput) (*awsiam.DeleteUserPolicyOutput, error) {
	fake.deleteUserPolicyMutex.Lock()
	ret, specificReturn := fake.deleteUserPolicyReturnsOnCall[len(fake.deleteUserPolicyArgsForCall)]
	fake.deleteUserPolicyArgsForCall = append(fake.deleteUserPolicyArgsForCall, struct {
		arg1 *awsiam.DeleteUserPolicyInput
	}{arg1})
	fake.recordInvocation("DeleteUserPolicy", []interface{}{arg1})
	fake.deleteUserPolicyMutex.Unlock()
	if fake.DeleteUserPolicyStub != nil {
		return fake.DeleteUserPolicyStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.deleteUserPolicyReturns.result1, fake.deleteUserPolicyReturns.result2
}

func (fake *Client) DeleteUserPolicyCallCount() int {
	fake.deleteUserPolicyMutex.RLock()
	defer fake.deleteUserPolicyMutex.RUnlock()
	return len(fake.deleteUserPolicyArgsForCall)
}

func (fake *Client) DeleteUserPolicyArgsForCall(i int) *awsiam.DeleteUserPolicyInput {
	fake.deleteUserPolicyMutex.RLock()
	defer fake.deleteUserPolicyMutex.RUnlock()
	return fake.deleteUserPolicyArgsForCall[i].arg1
}

func (fake *Client) DeleteUserPolicyReturns(result1 *awsiam.DeleteUserPolicyOutput, result2 error) {
	fake.DeleteUserPolicyStub = nil
	fake.deleteUserPolicyReturns = struct {
		result1 *awsiam.DeleteUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *Client) DeleteUserPolicyReturnsOnCall(i int, result1 *awsiam.DeleteUserPolicyOutput, result2 error) {
	fake.DeleteUserPolicyStub = nil
	if fake.deleteUserPolicyReturnsOnCall == nil {
		fake.deleteUserPolicyReturnsOnCall = make(map[int]struct {
			result1 *awsiam.DeleteUserPolicyOutput
			result2 error
		})
	}
	fake.deleteUserPolicyReturnsOnCall[i] = struct {
		result1 *awsiam.DeleteUserPolicyOutput
		result2 error
	}{result1, result2}
}

func (fake *Client) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getServerCertificateMutex.RLock()
	defer fake.getServerCertificateMutex.RUnlock()
	fake.deleteServerCertificateMutex.RLock()
	defer fake.deleteServerCertificateMutex.RUnlock()
	fake.deleteUserPolicyMutex.RLock()
	defer fake.deleteUserPolicyMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Client) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ iam.Client = new(Client)
