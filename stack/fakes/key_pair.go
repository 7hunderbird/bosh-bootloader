// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type KeyPair struct {
	DeleteKeyPairStub        func(keyPairName string) error
	deleteKeyPairMutex       sync.RWMutex
	deleteKeyPairArgsForCall []struct {
		keyPairName string
	}
	deleteKeyPairReturns struct {
		result1 error
	}
	deleteKeyPairReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *KeyPair) DeleteKeyPair(keyPairName string) error {
	fake.deleteKeyPairMutex.Lock()
	ret, specificReturn := fake.deleteKeyPairReturnsOnCall[len(fake.deleteKeyPairArgsForCall)]
	fake.deleteKeyPairArgsForCall = append(fake.deleteKeyPairArgsForCall, struct {
		keyPairName string
	}{keyPairName})
	fake.recordInvocation("DeleteKeyPair", []interface{}{keyPairName})
	fake.deleteKeyPairMutex.Unlock()
	if fake.DeleteKeyPairStub != nil {
		return fake.DeleteKeyPairStub(keyPairName)
	}
	if specificReturn {
		return ret.result1
	}
	return fake.deleteKeyPairReturns.result1
}

func (fake *KeyPair) DeleteKeyPairCallCount() int {
	fake.deleteKeyPairMutex.RLock()
	defer fake.deleteKeyPairMutex.RUnlock()
	return len(fake.deleteKeyPairArgsForCall)
}

func (fake *KeyPair) DeleteKeyPairArgsForCall(i int) string {
	fake.deleteKeyPairMutex.RLock()
	defer fake.deleteKeyPairMutex.RUnlock()
	return fake.deleteKeyPairArgsForCall[i].keyPairName
}

func (fake *KeyPair) DeleteKeyPairReturns(result1 error) {
	fake.DeleteKeyPairStub = nil
	fake.deleteKeyPairReturns = struct {
		result1 error
	}{result1}
}

func (fake *KeyPair) DeleteKeyPairReturnsOnCall(i int, result1 error) {
	fake.DeleteKeyPairStub = nil
	if fake.deleteKeyPairReturnsOnCall == nil {
		fake.deleteKeyPairReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.deleteKeyPairReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *KeyPair) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.deleteKeyPairMutex.RLock()
	defer fake.deleteKeyPairMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *KeyPair) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
