// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-bootloader/terraform"
)

type TF struct {
	ImportStub        func(terraform.ImportInput) (string, error)
	importMutex       sync.RWMutex
	importArgsForCall []struct {
		arg1 terraform.ImportInput
	}
	importReturns struct {
		result1 string
		result2 error
	}
	importReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *TF) Import(arg1 terraform.ImportInput) (string, error) {
	fake.importMutex.Lock()
	ret, specificReturn := fake.importReturnsOnCall[len(fake.importArgsForCall)]
	fake.importArgsForCall = append(fake.importArgsForCall, struct {
		arg1 terraform.ImportInput
	}{arg1})
	fake.recordInvocation("Import", []interface{}{arg1})
	fake.importMutex.Unlock()
	if fake.ImportStub != nil {
		return fake.ImportStub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.importReturns.result1, fake.importReturns.result2
}

func (fake *TF) ImportCallCount() int {
	fake.importMutex.RLock()
	defer fake.importMutex.RUnlock()
	return len(fake.importArgsForCall)
}

func (fake *TF) ImportArgsForCall(i int) terraform.ImportInput {
	fake.importMutex.RLock()
	defer fake.importMutex.RUnlock()
	return fake.importArgsForCall[i].arg1
}

func (fake *TF) ImportReturns(result1 string, result2 error) {
	fake.ImportStub = nil
	fake.importReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TF) ImportReturnsOnCall(i int, result1 string, result2 error) {
	fake.ImportStub = nil
	if fake.importReturnsOnCall == nil {
		fake.importReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.importReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *TF) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.importMutex.RLock()
	defer fake.importMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *TF) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
