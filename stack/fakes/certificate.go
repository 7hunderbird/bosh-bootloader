// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"

	"github.com/cloudfoundry/bosh-bootloader/aws/iam"
)

type Certificate struct {
	DescribeStub        func(certificateName string) (iam.Certificate, error)
	describeMutex       sync.RWMutex
	describeArgsForCall []struct {
		certificateName string
	}
	describeReturns struct {
		result1 iam.Certificate
		result2 error
	}
	describeReturnsOnCall map[int]struct {
		result1 iam.Certificate
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *Certificate) Describe(certificateName string) (iam.Certificate, error) {
	fake.describeMutex.Lock()
	ret, specificReturn := fake.describeReturnsOnCall[len(fake.describeArgsForCall)]
	fake.describeArgsForCall = append(fake.describeArgsForCall, struct {
		certificateName string
	}{certificateName})
	fake.recordInvocation("Describe", []interface{}{certificateName})
	fake.describeMutex.Unlock()
	if fake.DescribeStub != nil {
		return fake.DescribeStub(certificateName)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.describeReturns.result1, fake.describeReturns.result2
}

func (fake *Certificate) DescribeCallCount() int {
	fake.describeMutex.RLock()
	defer fake.describeMutex.RUnlock()
	return len(fake.describeArgsForCall)
}

func (fake *Certificate) DescribeArgsForCall(i int) string {
	fake.describeMutex.RLock()
	defer fake.describeMutex.RUnlock()
	return fake.describeArgsForCall[i].certificateName
}

func (fake *Certificate) DescribeReturns(result1 iam.Certificate, result2 error) {
	fake.DescribeStub = nil
	fake.describeReturns = struct {
		result1 iam.Certificate
		result2 error
	}{result1, result2}
}

func (fake *Certificate) DescribeReturnsOnCall(i int, result1 iam.Certificate, result2 error) {
	fake.DescribeStub = nil
	if fake.describeReturnsOnCall == nil {
		fake.describeReturnsOnCall = make(map[int]struct {
			result1 iam.Certificate
			result2 error
		})
	}
	fake.describeReturnsOnCall[i] = struct {
		result1 iam.Certificate
		result2 error
	}{result1, result2}
}

func (fake *Certificate) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.describeMutex.RLock()
	defer fake.describeMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *Certificate) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
